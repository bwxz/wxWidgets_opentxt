/*
Copyright ?2007 Semtech Corporation, P.O. Box 6097, Camarillo,
CA 93011-6097 U.S.A.

All rights reserved. The copyright of the content of this file is owned
by Semtech Corporation (Semtech).

This is an unpublished work.  The content of this file must be used only
for the purpose for which it was supplied by Semtech or its distributors.
The content of this file must not be copied or disclosed unless authorised in
writing by Semtech.

Name        $Workfile: ToPSyncControlDriverMessages.h $
Version     $Revision: 123 $
Date        $Date: 18/06/09 16:38 $
*/

/**
  * \file ToPSyncControlDriverMessages.h
  *	Declarations for the ToPSync Control Driver messages.
  */
#ifndef TOPSYNC_CONTROL_DRIVER_MESSAGES_H
#define TOPSYNC_CONTROL_DRIVER_MESSAGES_H


#include "ToPSyncInterfaceTypes.h"
#include "ToPSyncControlDriverCommonMessages.h"


#ifdef __cplusplus
extern "C" {
#endif



#define DISCOVERY_MESSAGE_LENGTH								TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define DISCOVERY_RESP_MESSAGE_LENGTH							TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH

#ifdef USE_MMAPI_DISCOVERY_MESSAGE
#define DISCOVERY_RESP_MESSAGE_MMAPI_VERSION                    0
#endif

#define GET_LOCK_VALUE_MESSAGE_LENGTH							TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCK_VALUE_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_PHASE_ERROR_MESSAGE_LENGTH							TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_PHASE_ERROR_RESP_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_CURRENT_MASTER_ADDRESS_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_ADDRESS_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_NUMBER_OF_VISIBLE_MASTERS_MESSAGE_LENGTH			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_NUMBER_OF_VISIBLE_MASTERS_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PORT_STATE_MESSAGE_LENGTH							TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_PORT_STATE_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_CURRENT_MASTER_TO_SLAVE_FLIGHT_TIME_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_TO_SLAVE_FLIGHT_TIME_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_SLAVE_TO_CURRENT_MASTER_FLIGHT_TIME_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SLAVE_TO_CURRENT_MASTER_FLIGHT_TIME_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_CLOCK_QUALITY_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CLOCK_QUALITY_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_CURRENT_MASTER_TO_SLAVE_NOISE_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_TO_SLAVE_NOISE_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_SLAVE_TO_CURRENT_MASTER_NOISE_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SLAVE_TO_CURRENT_MASTER_NOISE_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_CURRENT_MASTER_CLOCK_ID_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_CLOCK_ID_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define DEBUG_PRINT_UNACKNOWLEDGED_MSG_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_DESIRED_PHASE_OFFSET_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_DESIRED_PHASE_OFFSET_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_DESIRED_PHASE_OFFSET_MESSAGE_LENGTH 				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_DESIRED_PHASE_OFFSET_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_SHORT_DELAY_REQUEST_RATE_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_SHORT_DELAY_REQUEST_RATE_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_SHORT_DELAY_REQUEST_RATE_MESSAGE_LENGTH 			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SHORT_DELAY_REQUEST_RATE_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_SHORT_MESSAGE_ENABLED_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_SHORT_MESSAGE_ENABLED_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_SHORT_MESSAGE_ENABLED_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SHORT_MESSAGE_ENABLED_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_TOPSYNC_CONNECTIVITY_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2 + (4*MAX_UNICAST_TOPSYNCS))
#define SET_TOPSYNC_CONNECTIVITY_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2 + (4*MAX_UNICAST_TOPSYNCS))
#define GET_TOPSYNC_CONNECTIVITY_MESSAGE_LENGTH 				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TOPSYNC_CONNECTIVITY_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2 + (4*MAX_UNICAST_TOPSYNCS))

/* Clock Outputs */
#define SET_OUTPUT_CLOCK_FREQ_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_OUTPUT_CLOCK_FREQ_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_OUTPUT_CLOCK_FREQ_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_OUTPUT_CLOCK_FREQ_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_OUTPUT_CLOCK_FREQ_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_OUTPUT_CLOCK_FREQ_ENABLED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_OUTPUT_CLOCK_FREQ_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_OUTPUT_CLOCK_FREQ_ENABLED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_1PPS_OUTPUT_CLOCK_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_1PPS_OUTPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_1PPS_OUTPUT_CLOCK_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_1PPS_OUTPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define SET_TOD_OUTPUT_CONFIGURATION_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TOD_OUTPUT_CONFIGURATION_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TOD_OUTPUT_CONFIGURATION_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TOD_OUTPUT_CONFIGURATION_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH	+ 6)
#define SET_PPS_OUTPUT_PERIOD_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PPS_OUTPUT_PERIOD_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PPS_OUTPUT_PERIOD_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PPS_OUTPUT_PERIOD_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PPS_OUTPUT_SOURCE_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PPS_OUTPUT_SOURCE_RESP_MESSAGE_LENGTH	 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PPS_OUTPUT_SOURCE_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PPS_OUTPUT_SOURCE_RESP_MESSAGE_LENGTH	 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)

/* Clock Inputs */
#define SET_1PPS_INPUT_CLOCK_ENABLED_MESSAGE_LENGTH 		   (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_1PPS_INPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH	   (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_1PPS_INPUT_CLOCK_ENABLED_MESSAGE_LENGTH 		   (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_1PPS_INPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH	   (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_TOD_INPUT_CONFIGURATION_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TOD_INPUT_CONFIGURATION_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TOD_INPUT_CONFIGURATION_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TOD_INPUT_CONFIGURATION_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH	+ 6)
#define GET_TOD_INPUT_STATUS_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH	+ 1)
#define GET_TOD_INPUT_STATUS_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH	+ 116)
#define SET_UTC_OFFSET_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_UTC_OFFSET_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_UTC_OFFSET_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_UTC_OFFSET_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_IMPENDING_LEAP_SECOND_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_IMPENDING_LEAP_SECOND_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_DAYS_TO_LEAP_SECOND_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_DAYS_TO_LEAP_SECOND_RESP_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_PTP_INPUT_CLOCK_FREQUENCY_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_PTP_INPUT_CLOCK_FREQUENCY_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_PTP_INPUT_CLOCK_FREQUENCY_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_INPUT_CLOCK_FREQUENCY_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_PTP_INPUT_CLOCK_ENABLED_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_INPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PTP_INPUT_CLOCK_ENABLED_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_INPUT_CLOCK_ENABLED_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_INPUT_CLOCK_SELECTED_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_PTP_INPUT_CLOCK_SELECTED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_INPUT_CLOCK_SELECTED_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_PTP_INPUT_CLOCK_SELECTED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PPS_INPUT_TIME_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 13) //topsynctime is 4+4+2+1 then timescale(+1)
#define SET_PPS_INPUT_TIME_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 13) //topsynctime is 4+4+2+1
#define SET_PPS_INPUT_TIME_OF_DAY_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define SET_PPS_INPUT_TIME_OF_DAY_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define GET_DAYS_TO_LEAP_SECOND_NODE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_DAYS_TO_LEAP_SECOND_NODE_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_DAYS_TO_LEAP_SECOND_SOURCE_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_DAYS_TO_LEAP_SECOND_SOURCE_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)




/* External Interfaces */
#define GET_EXTERNAL_INTERFACES_MIN_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_EXTERNAL_INTERFACES_MIN_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define RESET_NETWORK_INTERFACE_STATISTICS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define RESET_NETWORK_INTERFACE_STATISTICS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_DEFAULT_ETHERNET_MAC_ADDRESS_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_DEFAULT_ETHERNET_MAC_ADDRESS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define GET_MDIO_LINK_AVAILABILITY_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MDIO_LINK_AVAILABILITY_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ETHERNET_LINK_SPEED_AND_DUPLEX_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_ETHERNET_LINK_SPEED_AND_DUPLEX_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_ETHERNET_LINK_SPEED_AND_DUPLEX_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ETHERNET_LINK_SPEED_AND_DUPLEX_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define RESTART_AUTONEGOTIATION_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define RESTART_AUTONEGOTIATION_RESP_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_ETHERNET_INTERFACE_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ETHERNET_INTERFACE_ENABLED_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ETHERNET_LINK_STATUS_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ETHERNET_LINK_STATUS_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_MAC_ADDRESS_FILTERING_ENABLED_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_MAC_ADDRESS_FILTERING_ENABLED_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_MAC_ADDRESS_FILTERING_ENABLED_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MAC_ADDRESS_FILTERING_ENABLED_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PERMITTED_MAC_ADDRESSES_MIN_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PERMITTED_MAC_ADDRESSES_MIN_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PERMITTED_MAC_ADDRESSES_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PERMITTED_MAC_ADDRESSES_MIN_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ETHERNET_INTERFACE_STATISTICS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ETHERNET_INTERFACE_STATISTICS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 37)
#define ADD_ETHERNET_PACKET_INTERFACE_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define ADD_ETHERNET_PACKET_INTERFACE_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define DELETE_ETHERNET_PACKET_INTERFACE_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define DELETE_ETHERNET_PACKET_INTERFACE_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_ETHERNET_PACKET_INTERFACE_ENABLED_MSG_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ETHERNET_PACKET_INTERFACE_ENABLED_RESP_MSG_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ETHERNET_PACKET_INTERFACE_STATUS_MSG_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ETHERNET_PACKET_INTERFACE_STATUS_RESP_MSG_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_ETHERNET_PACKET_INTERFACE_STATS_MSG_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ETHERNET_PACKET_INTERFACE_STATS_RESP_MSG_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define ADD_IP_PACKET_INTERFACE_MESSAGE_LENGTH					(GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG_LENGTH)
#define ADD_IP_PACKET_INTERFACE_RESP_MESSAGE_LENGTH 			(GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG_LENGTH)
#define DELETE_IP_PACKET_INTERFACE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define DELETE_IP_PACKET_INTERFACE_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_IP_PACKET_INTERFACE_CONFIGURATION_MSG_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 22)
#define SET_IP_PACKET_INTERFACE_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_IP_PACKET_INTERFACE_ENABLED_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_IP_PACKET_INTERFACE_STATUS_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_IP_PACKET_INTERFACE_STATUS_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_IP_PACKET_INTERFACE_STATISTICS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_IP_PACKET_INTERFACE_STATISTICS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 49)
#define GET_SPI_BUS_STATISTICS_MESSAGE_LEGNTH					TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SPI_BUS_STATISTICS_RESP_MESSAGE_LEGNTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 16)
#define RESET_SPI_BUS_STATISTICS_MESSAGE_LENGTH 				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define RESET_SPI_BUS_STATISTICS_RESP_MESSAGE_LENGTH			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define SET_MDIO_DATA_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_MDIO_DATA_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_MDIO_DATA_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_MDIO_DATA_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define CHANGE_IP_PACKET_INTERFACE_MESSAGE_LENGTH				(GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG_LENGTH)
#define CHANGE_IP_PACKET_INTERFACE_RESP_MESSAGE_LENGTH 			(GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG_LENGTH)



/*Physical Port*/
#define SET_MASTER_LOAD_LIMIT_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define SET_MASTER_LOAD_LIMIT_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_MASTER_LOAD_LIMIT_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MASTER_LOAD_LIMIT_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define GET_ISSUED_GRANT_DETAILS_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_ISSUED_GRANT_DETAILS_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 22)
//4+grantstatus=(4+ tpa(2+len)+portid(10)+log(1) +duration(4)+ptp(1) = 22+len  )


/* PTP Ports */
#define CONFIGURE_PTP_PORT_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define CONFIGURE_PTP_PORT_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define DECONFIGURE_PTP_PORT_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define DECONFIGURE_PTP_PORT_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_PORT_CONFIGURATION_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_PORT_CONFIGURATION_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_PTP_PORT_ENABLED_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_PORT_ENABLED_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_PORT_STATE_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_PTP_PORT_STATE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_PTP_PORT_STATE_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_PORT_STATE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_REQUESTED_ANNOUNCE_MSG_PERIOD_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_REQUESTED_ANNOUNCE_MSG_PERIOD_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_REQUESTED_ANNOUNCE_MSG_PERIOD_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_REQUESTED_ANNOUNCE_MSG_PERIOD_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_REQUESTED_SYNC_MSG_PERIOD_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_REQUESTED_SYNC_MSG_PERIOD_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_REQUESTED_SYNC_MSG_PERIOD_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_REQUESTED_SYNC_MSG_PERIOD_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_REQUESTED_DELAY_REQ_MSG_PERIOD_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_REQUESTED_DELAY_REQ_MSG_PERIOD_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_REQUESTED_DELAY_REQ_MSG_PERIOD_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_REQUESTED_DELAY_REQ_MSG_PERIOD_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_FILTER_BANDWIDTHS_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_FILTER_BANDWIDTHS_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define GET_FILTER_BANDWIDTHS_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_FILTER_BANDWIDTHS_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_ACCEPTABLE_MASTER_TABLE_REQUIRED_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ACCEPTABLE_MASTER_TABLE_REQUIRED_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_MASTER_TABLE_REQUIRED_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_MASTER_TABLE_REQUIRED_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define ADD_ACCEPTABLE_MASTER_MIN_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 17)
#define ADD_ACCEPTABLE_MASTER_MIN_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 17)
#define DELETE_ACCEPTABLE_MASTER_MIN_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 13)
#define DELETE_ACCEPTABLE_MASTER_MIN_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 13)
#define GET_ACCEPTABLE_MASTER_TABLE_ENTRY_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_MASTER_TABLE_ENTRY_MIN_RESP_MESSAGE_LENGTH	  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_DELAY_TO_USE_MESSAGE_LENGTH 						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_DELAY_TO_USE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_DELAY_TO_USE_MESSAGE_LENGTH 						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_DELAY_TO_USE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_V1_PAD_MESSAGE_LENGTH								(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_V1_PAD_RESP_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_V1_PAD_MESSAGE_LENGTH								(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_V1_PAD_RESP_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_PTP_NODE_ID_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_PTP_NODE_ID_RESP_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_PTP_NODE_ID_MESSAGE_LENGTH							TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_PTP_NODE_ID_RESP_MESSAGE_LENGTH 					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_DEFAULT_PTP_NODE_ID_MESSAGE_LENGTH					TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_DEFAULT_PTP_NODE_ID_RESP_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_MESSAGE_LENGTH \
																(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_RESP_MESSAGE_LENGTH \
																(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_MESSAGE_LENGTH \
																(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_RESP_MESSAGE_LENGTH \
																(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_ENABLE_PTP_PORT_MASTER_OPERATION_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ENABLE_PTP_PORT_MASTER_OPERATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ENABLE_PTP_PORT_SLAVE_OPERATION_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ENABLE_PTP_PORT_SLAVE_OPERATION_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)

#define GET_ENABLE_PTP_PORT_MASTER_OPERATION_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ENABLE_PTP_PORT_MASTER_OPERATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ENABLE_PTP_PORT_SLAVE_OPERATION_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ENABLE_PTP_PORT_SLAVE_OPERATION_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_PORT_ADDRESSING_MODE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_PTP_PORT_ADDRESSING_MODE_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PTP_PORT_ADDRESSING_MODE_MESSAGE_LENGTH		 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_PTP_PORT_ADDRESSING_MODE_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_FORCE_PTP_PORT_TWO_STEP_OPERATION_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_FORCE_PTP_PORT_TWO_STEP_OPERATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_FORCE_PTP_PORT_TWO_STEP_OPERATION_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_FORCE_PTP_PORT_TWO_STEP_OPERATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define	SET_MSG_PERIOD_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define	SET_MSG_PERIOD_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define	GET_MSG_PERIOD_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define	GET_MSG_PERIOD_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 9)
#define SET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define ADD_ACCEPTABLE_PARTNER_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 17)
#define ADD_ACCEPTABLE_PARTNER_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 17)
#define DELETE_ACCEPTABLE_PARTNER_MESSAGE_LENGTH 			    	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 14) //header(15),port(1),portid(10),tpa(2+length),slave(1) - so =header+14+length
#define DELETE_ACCEPTABLE_PARTNER_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 14)
#define GET_ACCEPTABLE_PARTNER_TABLE_ENTRY_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ACCEPTABLE_PARTNER_TABLE_ENTRY_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)

/* Visible Masters */
#define GET_MESSAGE_GRANT_STATUS_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MESSAGE_GRANT_STATUS_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 19)
#define GET_VISIBLE_MASTERS_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_VISIBLE_MASTERS_RESP_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_VISIBLE_MASTER_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_MIN_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 35)
#define GET_VISIBLE_MASTER_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 25)
#define GET_VISIBLE_MASTER_STATISTICS_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_STATISTICS_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 41)
#define GET_VISIBLE_MASTER_EXTENDED_STATISTICS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_EXTENDED_STATISTICS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 17)
#define RESET_VISIBLE_MASTER_STATISTICS_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define RESET_VISIBLE_MASTER_STATISTICS_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_DELAY_STATISTICS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_DELAY_STATISTICS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 23)
#define GET_VISIBLE_MASTER_RECEIVED_MSG_STATUS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_VISIBLE_MASTER_RECEIVED_MSG_STATUS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 14)

/* Current Master */
#define GET_CURRENT_MASTER_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_CURRENT_MASTER_MIN_MESSAGE_LENGTH					 TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_MIN_RESP_MESSAGE_LENGTH				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 16)
#define GET_CURRENT_MASTER_STATISTICS_MESSAGE_LENGTH                TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_CURRENT_MASTER_STATISTICS_RESP_MESSAGE_LENGTH           (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 72)
#define GET_TIMESTAMP_SNAPSHOT_MESSAGE_LENGTH                       TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TIMESTAMP_SNAPSHOT_RESP_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 48)

/* Time Reference Selector */
#define SET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_SELECTED_TIME_REFERENCE_SOURCE_MESSAGE_LENGTH					TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SELECTED_TIME_REFERENCE_SOURCE_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TIME_REF_SELECTOR_STATISTICS_MESSAGE_LENGTH 					TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TIME_REF_SELECTOR_STATISTICS_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 24)
#define SET_HOLDOVER_AVERAGING_PERIOD_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_HOLDOVER_AVERAGING_PERIOD_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_HOLDOVER_AVERAGING_PERIOD_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_HOLDOVER_AVERAGING_PERIOD_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_HOLDOVER_DURATION_MESSAGE_LENGTH								(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_HOLDOVER_DURATION_RESP_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_HOLDOVER_DURATION_MESSAGE_LENGTH								(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_HOLDOVER_DURATION_RESP_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_HOLDOVER_CALCULATION_MIN_LOCK_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_HOLDOVER_CALCULATION_MIN_LOCK_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_HOLDOVER_CALCULATION_MIN_LOCK_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_HOLDOVER_CALCULATION_MIN_LOCK_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_FORCE_HOLDOVER_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_FORCE_HOLDOVER_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_FORCE_HOLDOVER_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_FORCE_HOLDOVER_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define RESET_HOLDOVER_DATA_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define RESET_HOLDOVER_DATA_RESP_MESSAGE_LENGTH 				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define SET_SUPPRESS_PHASE_JUMP_MESSAGE_LENGTH					 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_SUPPRESS_PHASE_JUMP_RESP_MESSAGE_LENGTH 			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_SUPPRESS_PHASE_JUMP_MESSAGE_LENGTH					 TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SUPPRESS_PHASE_JUMP_RESP_MESSAGE_LENGTH 			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_MAXIMUM_FREQUENCY_OFFSET_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_MAXIMUM_FREQUENCY_OFFSET_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_MAXIMUM_FREQUENCY_OFFSET_MESSAGE_LENGTH 			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_MAXIMUM_FREQUENCY_OFFSET_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_LOCKED_STATE_THRESHOLDS_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 24)
#define SET_LOCKED_STATE_THRESHOLDS_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 24)
#define GET_LOCKED_STATE_THRESHOLDS_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCKED_STATE_THRESHOLDS_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 24)
#define SET_FORCE_LOCKED_UNLOCKED_STATE_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_FORCE_LOCKED_UNLOCKED_STATE_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_FORCE_LOCKED_UNLOCKED_STATE_MESSAGE_LENGTH			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_FORCE_LOCKED_UNLOCKED_STATE_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_LOCKED_STATE_MESSAGE_LENGTH 						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCKED_STATE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_FREQUENCY_CONTROLLER_PARAMETERS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_FREQUENCY_CONTROLLER_PARAMETERS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_FREQUENCY_CONTROLLER_PARAMETERS_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_FREQUENCY_CONTROLLER_PARAMETERS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_TOPSYNC_TIME_MESSAGE_LENGTH 						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_TOPSYNC_TIME_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 11)
#define SET_TOPSYNC_PARAMETER_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TOPSYNC_PARAMETER_RESP_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TOPSYNC_PARAMETER_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TOPSYNC_PARAMETER_RESP_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_MESSAGE_LENGTH 		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_NODE_UTC_OFFSET_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_NODE_UTC_OFFSET_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH+2)
#define SET_REDUCTION_IN_CLOCK_STRATUM_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH+1)
#define SET_REDUCTION_IN_CLOCK_STRATUM_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH+1)
#define GET_REDUCTION_IN_CLOCK_STRATUM_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_REDUCTION_IN_CLOCK_STRATUM_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH+1)


/* Time Reference Source */
#define GET_TIME_REFERENCE_SOURCES_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TIME_REFERENCE_SOURCES_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_TIME_REFERENCE_SOURCE_CONFIGURATION_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_TIME_REFERENCE_SOURCE_CONFIGURATION_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_TIME_REFERENCE_SOURCE_CONFIGURATION_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define GET_TIME_REFERENCE_SOURCE_CONFIGURATION_RESP_MESSAGE_LENGTH SET_TIME_REFERENCE_SOURCE_CONFIGURATION_RESP_MESSAGE_LENGTH
#define GET_TIME_REFERENCE_SOURCE_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TIME_REFERENCE_SOURCE_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 12)
#define SET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 20)
#define SET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_PROPORTIONAL_AND_INTEGRAL_GAINS_MESSAGE_LENGTH				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_PROPORTIONAL_AND_INTEGRAL_GAINS_RESP_MESSAGE_LENGTH 		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define GET_PROPORTIONAL_AND_INTEGRAL_GAINS_MESSAGE_LENGTH				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PROPORTIONAL_AND_INTEGRAL_GAINS_RESP_MESSAGE_LENGTH 		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_NOISE_ANALYSER_BANDWIDTHS_MESSAGE_LENGTH					 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 10)
#define SET_NOISE_ANALYSER_BANDWIDTHS_RESP_MESSAGE_LENGTH				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 10)
#define GET_NOISE_ANALYSER_BANDWIDTHS_MESSAGE_LENGTH					 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_NOISE_ANALYSER_BANDWIDTHS_RESP_MESSAGE_LENGTH				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 10)
#define SET_NOISE_ANALYSER_NUMBER_OF_FILTERS_MESSAGE_LENGTH 			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_NOISE_ANALYSER_NUMBER_OF_FILTERS_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_NOISE_ANALYSER_NUMBER_OF_FILTERS_MESSAGE_LENGTH 			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_NOISE_ANALYSER_NUMBER_OF_FILTERS_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_PHASE_ERROR_LIMIT_MESSAGE_LENGTH							 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_PHASE_ERROR_LIMIT_RESP_MESSAGE_LENGTH						 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_PHASE_ERROR_LIMIT_MESSAGE_LENGTH							 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_PHASE_ERROR_LIMIT_RESP_MESSAGE_LENGTH						 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_CONFIGURED_PHASE_OFFSET_MESSAGE_LENGTH						 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_CONFIGURED_PHASE_OFFSET_RESP_MESSAGE_LENGTH 				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_CONFIGURED_PHASE_OFFSET_MESSAGE_LENGTH						 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_CONFIGURED_PHASE_OFFSET_RESP_MESSAGE_LENGTH 				 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TIME_CORRECTION_CONFIGURATION_MESSAGE_LENGTH			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_TIME_CORRECTION_CONFIGURATION_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define GET_TIME_CORRECTION_CONFIGURATION_MESSAGE_LENGTH			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TIME_CORRECTION_CONFIGURATION_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_TIME_CORRECTION_DAMPING_FACTOR_MESSAGE_LENGTH			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TIME_CORRECTION_DAMPING_FACTOR_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TIME_CORRECTION_DAMPING_FACTOR_MESSAGE_LENGTH			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TIME_CORRECTION_DAMPING_FACTOR_RESP_MESSAGE_LENGTH		 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TIME_REFERENCE_SOURCE_UTC_OFFSET_MESSAGE_LENGTH 	         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_TIME_REFERENCE_SOURCE_UTC_OFFSET_RESP_MESSAGE_LENGTH	     (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define SET_NOISE_ANALYSER_ALARM_THRESHOLD_MESSAGE_LENGTH		         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_NOISE_ANALYSER_ALARM_THRESHOLD_RESP_MESSAGE_LENGTH	         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_NOISE_ANALYSER_ALARM_THRESHOLD_MESSAGE_LENGTH		         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_NOISE_ANALYSER_ALARM_THRESHOLD_RESP_MESSAGE_LENGTH	         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_MESSAGE_LENGTH	         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_RESP_MESSAGE_LENGTH	     (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define GET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_MESSAGE_LENGTH	         (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_RESP_MESSAGE_LENGTH	     (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)



/* Local Oscillator */
#define SET_LOCAL_OSC_TYPE_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_LOCAL_OSC_TYPE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_LOCAL_OSC_TYPE_MESSAGE_LENGTH						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCAL_OSC_TYPE_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_LOCAL_OSC_STRATUM_LEVEL_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_LOCAL_OSC_STRATUM_LEVEL_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_LOCAL_OSC_STRATUM_LEVEL_MESSAGE_LENGTH				TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCAL_OSC_STRATUM_LEVEL_RESP_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_LOCAL_OSC_PHASE_NOISE_PAIRS_MIN_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_LOCAL_OSC_PHASE_NOISE_PAIRS_MIN_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_LOCAL_OSC_PHASE_NOISE_PAIRS_MESSAGE_LENGTH			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_LOCAL_OSC_PHASE_NOISE_PAIRS_MIN_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)

/* System Management */
#define GET_SECONDS_SINCE_LAST_RESET_MESSAGE_LENGTH 			TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SECONDS_SINCE_LAST_RESET_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_TOPSYNC_LOCATION_MESSAGE_LENGTH 					TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TOPSYNC_LOCATION_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + LOCATION_IDENTIFIER_LENGTH)
#define SET_INITIAL_SYSTEM_CONFIGURATION_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + (22 * NUMBER_OF_PHYSICAL_PORTS) + 15)
#define SET_INITIAL_SYSTEM_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + (22 * NUMBER_OF_PHYSICAL_PORTS) + 15)
#define GET_INITIAL_SYSTEM_CONFIGURATION_MESSAGE_LENGTH 		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_INITIAL_SYSTEM_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + (22 * NUMBER_OF_PHYSICAL_PORTS) + 15)
#define SET_TOPSYNC_PTP_SYSTEM_PARAMETERS_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_TOPSYNC_PTP_SYSTEM_PARAMETERS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define GET_TOPSYNC_PTP_SYSTEM_PARAMETERS_MESSAGE_LENGTH		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TOPSYNC_PTP_SYSTEM_PARAMETERS_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 18)
#define SET_TOPSYNC_UPLOAD_CONFIGURATION_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define SET_TOPSYNC_UPLOAD_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_TOPSYNC_UPLOAD_CONFIGURATION_MESSAGE_LENGTH 		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TOPSYNC_UPLOAD_CONFIGURATION_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_SECURITY_KEY_MESSAGE_LENGTH 						TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SECURITY_KEY_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#if(0)
#define SET_ETHERNET_MAC_ADDRESS_MESSAGE_LENGTH 				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_ETHERNET_MAC_ADDRESS_RESP_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#endif

/* System Exceptions */
#define GET_TOPSYNC_SYSTEM_EXCEPTIONS_MESSAGE_LENGTH					 TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_TOPSYNC_SYSTEM_EXCEPTIONS_MIN_RESP_MESSAGE_LENGTH			 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_TOPSYNC_SYSTEM_EXCEPTIONS_CONFIGURATIONS_MESSAGE_LENGTH 	 (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_TOPSYNC_SYSTEM_EXCEPTIONS_CONFIGURATIONS_RESP_MESSAGE_LENGTH (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)

/* Alarm Monitoring */
#define SET_ALARM_SRC_ENABLED_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ALARM_SRC_ENABLED_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ALARM_SRC_ENABLED_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ALARM_SRC_ENABLED_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define SET_ALARM_SRC_CLIENT_ID_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_ALARM_SRC_CLIENT_ID_ENABLED_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_ALARM_SRC_CLIENT_ID_ENABLED_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ALARM_SRC_CLIENT_ID_ENABLED_RESP_MESSAGE_LENGTH 	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_ALARM_SET_MESSAGE_LENGTH							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ALARM_SET_RESP_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 6)
#define GET_ANY_ALARMS_SET_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_ANY_ALARMS_SET_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_ALARM_SET_ARRAY_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_ALARM_SET_ARRAY_RESP_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2 + (ALARM_STATE_WORDS*4))



/* SETS */
#define GENERIC_SETS_MESSAGE_LENGTH 							(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define READ_SETS_MESSAGE_LENGTH								GENERIC_SETS_MESSAGE_LENGTH
#define READ_SETS_RESP_MESSAGE_LENGTH							GENERIC_SETS_MESSAGE_LENGTH
#define WRITE_SETS_MESSAGE_LENGTH								GENERIC_SETS_MESSAGE_LENGTH
#define WRITE_SETS_RESP_MESSAGE_LENGTH							GENERIC_SETS_MESSAGE_LENGTH
#define GET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_MESSAGE_LENGTH 		TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH
#define GET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_MESSAGE_LENGTH 		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define SET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_RESP_MESSAGE_LENGTH	(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
/*MUXs */
#define SET_MUX_INPUT_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_MUX_INPUT_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_MUX_INPUT_MESSAGE_LENGTH					(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)
#define GET_MUX_INPUT_RESP_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)


/* Generic */
#define SET_GENERIC_PARAMETER_ONE_ID_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 7)
#define SET_GENERIC_PARAMETER_ONE_ID_RESP_MESSAGE_LENGTH		SET_GENERIC_PARAMETER_ONE_ID_MESSAGE_LENGTH
#define GET_GENERIC_PARAMETER_ONE_ID_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define GET_GENERIC_PARAMETER_ONE_ID_RESP_MESSAGE_LENGTH		SET_GENERIC_PARAMETER_ONE_ID_MESSAGE_LENGTH
#define SET_GENERIC_PARAMETER_TWO_ID_MESSAGE_LENGTH 			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8)
#define SET_GENERIC_PARAMETER_TWO_ID_RESP_MESSAGE_LENGTH		SET_GENERIC_PARAMETER_TWO_ID_MESSAGE_LENGTH
#define GET_GENERIC_PARAMETER_TWO_ID_MESSAGE_LENGTH				(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 4)
#define GET_GENERIC_PARAMETER_TWO_ID_RESP_MESSAGE_LENGTH		SET_GENERIC_PARAMETER_TWO_ID_MESSAGE_LENGTH

/*HARDWARE INTERFACE*/
#define WRITE_I2C_MESSAGE_LENGTH								(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5 + I2C_MAX_DATA_LENGTH)
#define WRITE_I2C_RESPONSE_MESSAGE_LENGTH						(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5 + I2C_MAX_DATA_LENGTH)
#define READ_I2C_MESSAGE_LENGTH									(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 5)
#define READ_I2C_RESPONSE_MESSAGE_LENGTH						(WRITE_I2C_MESSAGE_LENGTH)


/* Delay Replacement Driver Messages */
#define SET_MODE2_CONFIGURATION_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 33)
#define SET_MODE2_CONFIGURATION_RESP_MESSAGE_LENGTH             (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_MODE2_CONFIGURATION_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MODE2_CONFIGURATION_RESP_MESSAGE_LENGTH             (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 32)
#define SET_MODE3_CONFIGURATION_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 3)
#define SET_MODE3_CONFIGURATION_RESP_MESSAGE_LENGTH             (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_MODE3_CONFIGURATION_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 1)
#define GET_MODE3_CONFIGURATION_RESP_MESSAGE_LENGTH             (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 2)

#define GET_DRM_STATISTICS_MESSAGE_LENGTH                       (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH)
#define GET_DRM_STATISTICS_RESP_MESSAGE_LENGTH                  (TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 140)

/* mmAPI */
#define SET_MMAPI_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8) //hdr(15) address(4) length(4). Msg length to be confirmed (See MMAPI_MAX_DATA_LENGTH)
#define SET_MMAPI_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8) //                    "
#define GET_MMAPI_MESSAGE_LENGTH			(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8) //                    "
#define GET_MMAPI_RESP_MESSAGE_LENGTH		(TOPSYNC_CONTROL_MESSAGE_HEADER_LENGTH + 8) //                    "


/* Limits on the number of messages in each module. The sum of the following should not be greater than
2000, to avoid overlap with the boot message set */
/* #MAX NUM MSGS DEFINES START# */
#define SYSTEM_STATE_MODULE_MAX_MESSAGES					4
#define CLOCK_OUTPUTS_MODULE_MAX_MESSAGES					25
#define ONEPPS_OUTPUT_CLOCK_MODULE_MAX_MESSAGES 			25
#define PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_MAX_MESSAGES		10
#define CLOCK_INPUTS_MODULE_BASE_MAX_MESSAGES				25
#define ONE_PPS_INPUT_MODULE_MAX_MESSAGES					25
#define EXTERNAL_INTERFACES_MODULE_MAX_MESSAGES 			10
#define ETHERNET_INTERFACE_SUBMODULE_MAX_MESSAGES			40
#define ETHERNET_PACKET_INTERFACE_SUBMODULE_MAX_MESSAGES	25
#define IP_PACKET_INTERFACE_SUBMODULE_MAX_MESSAGES			25
#define SPI_BUS_SUBMODULE_MAX_MESSAGES						10
#define PTP_PORTS_MODULE_GENERAL_MAX_MESSAGES				60
#define PTP_PORTS_MODULE_SLAVE_MAX_MESSAGES 				60
#define PTP_PORTS_MODULE_MASTER_MAX_MESSAGES				60
#define VISIBLE_MASTER_MODULE_MAX_MESSAGES					60
#define CURRENT_MASTER_MODULE_MAX_MESSAGES					30
#define TIME_REF_SELECTOR_MODULE_MAX_MESSAGES				80
#define TIME_REF_SOURCE_MODULE_BASE_MAX_MESSAGES			80
#define LOCAL_OSCILLATOR_MODULE_MAX_MESSAGES				40
#define SYSTEM_MANAGEMENT_MODULE_MAX_MESSAGES				45
#define SYSTEM_EXCEPTIONS_MODULE_MAX_MESSAGES				10
#define ALARM_MONITORING_MODULE_MAX_MESSAGES				30
#define GUI_MODULE_MAX_MESSAGES 							80
#define SETS_MODULE_MAX_MESSAGES							10
#define MUX_MODULE_MAX_MESSAGES 							8
#define PHYSICAL_PORT_MODULE_MAX_MESSAGES					8
#define GENERIC_MODULE_MAX_MESSAGES							20
#define HARDWARE_INTERFACE_MODULE_MAX_MESSAGES				40
#define DELAY_REPLACEMENT_MODULE_MAX_MESSAGES               20
#define MMAPI_MODULE_MAX_MESSAGES							20 /* todo: revisit this probably only need 4 */

/* #NUM MSGS END # */

/*******************************************************************************
 * Delay replacement message macros and types
 */
#define DELAY_REPLACEMENT_MESSAGE_SOURCE_SELECTED_LENGTH        16
#define DELAY_REPLACEMENT_MESSAGE_SOURCE_DESELECTED_LENGTH      14
#define DELAY_REPLACEMENT_MESSAGE_ONE_TIMESTAMP_LENGTH          34
#define DELAY_REPLACEMENT_MESSAGE_TWO_TIMESTAMP_LENGTH          42

/** DRM Message Types */
/**\{ */
typedef enum
{
	syncReplacementMessage		= 0x00, /**< End-to-end PTP message T1 & T2 */
	delayReplacementMessage 	= 0x01, /**< End-to-end PTP message T3 & T4 */
	writeTimestampT1Message     = 0x20, /**< End-to-end PTP message T1 only */
	writeTimestampT2Message     = 0x21, /**< End-to-end PTP message T2 only */
	writeTimestampT3Message  	= 0x22, /**< End-to-end PTP message T3 only */
	writeTimestampT4Message 	= 0x23, /**< End-to-end PTP message T4 only */
	writePDelayT1Message        = 0x40, /**< Peer-to-peer delay message T1 timestamp */
	writePDelayT2Message        = 0x41, /**< Peer-to-peer delay message T2 timestamp */
	writePDelayT3Message  	    = 0x42, /**< Peer-to-peer delay message T3 timestamp */
	writePDelayT4Message 	    = 0x43, /**< Peer-to-peer delay message T4 timestamp */
	sourceSelectedMessage	    = 0x80, /**< Mode 3 only source selection */
	sourceDeselectedMessage		= 0x81, /**< Mode 2 only source removal */
} ToPSyncDelayMessageType;
/**\} */

typedef uint8 ToPSyncDrmBuffer_t[DELAY_REPLACEMENT_MESSAGE_TWO_TIMESTAMP_LENGTH];
/*
 *
 ******************************************************************************/


/* WARNING:
 * DO NOT change the order of the elements of the following enum.
 * The System State Module should ALWAYS be first. Response messages are always
 * numbered one greater than their associated request message.
 * Messages can only be placed in each module between the _MODULE_BASE and _MODULE_END,
 * and not between modules.  New messages must be added to the end of the existing messages within
 * the module.
 * Any new modules MUST only be added to the end of the enum
 */
/* #ToPSyncControlMsgType# */
typedef enum {
	/* System State - This should be first */
	SYSTEM_STATE_MODULE_BASE = 0,
	SET_TOPSYNC_SYSTEM_STATE_MSG = SYSTEM_STATE_MODULE_BASE,
	SET_TOPSYNC_SYSTEM_STATE_RESP_MSG,
	GET_TOPSYNC_SYSTEM_STATE_MSG,
	GET_TOPSYNC_SYSTEM_STATE_RESP_MSG,
	SYSTEM_STATE_MODULE_END,

	/* Clock Outputs */
	CLOCK_OUTPUTS_MODULE_BASE = SYSTEM_STATE_MODULE_BASE + SYSTEM_STATE_MODULE_MAX_MESSAGES,
	SET_OUTPUT_CLOCK_FREQ_MSG = CLOCK_OUTPUTS_MODULE_BASE,
	SET_OUTPUT_CLOCK_FREQ_RESP_MSG,
	GET_OUTPUT_CLOCK_FREQ_MSG,
	GET_OUTPUT_CLOCK_FREQ_RESP_MSG,
	SET_OUTPUT_CLOCK_FREQ_ENABLED_MSG,
	SET_OUTPUT_CLOCK_FREQ_ENABLED_RESP_MSG,
	GET_OUTPUT_CLOCK_FREQ_ENABLED_MSG,
	GET_OUTPUT_CLOCK_FREQ_ENABLED_RESP_MSG,
	SET_PPS_OUTPUT_PERIOD_MSG,
	SET_PPS_OUTPUT_PERIOD_RESP_MSG,
	GET_PPS_OUTPUT_PERIOD_MSG,
	GET_PPS_OUTPUT_PERIOD_RESP_MSG,
	SET_PPS_OUTPUT_SOURCE_MSG,
	SET_PPS_OUTPUT_SOURCE_RESP_MSG,
	GET_PPS_OUTPUT_SOURCE_MSG,
	GET_PPS_OUTPUT_SOURCE_RESP_MSG,
	CLOCK_OUTPUTS_MODULE_END,

	ONEPPS_OUTPUT_CLOCK_MODULE_BASE = CLOCK_OUTPUTS_MODULE_BASE + CLOCK_OUTPUTS_MODULE_MAX_MESSAGES,
	SET_1PPS_OUTPUT_CLOCK_ENABLED_MSG = ONEPPS_OUTPUT_CLOCK_MODULE_BASE,
	SET_1PPS_OUTPUT_CLOCK_ENABLED_RESP_MSG,
	GET_1PPS_OUTPUT_CLOCK_ENABLED_MSG,
	GET_1PPS_OUTPUT_CLOCK_ENABLED_RESP_MSG,
	SET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_MSG,
	SET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_RESP_MSG,
	GET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_MSG,
	GET_1PPS_OUTPUT_CLOCK_PULSE_WIDTH_RESP_MSG,
	SET_TOD_OUTPUT_CONFIGURATION_MSG,
	SET_TOD_OUTPUT_CONFIGURATION_RESP_MSG,
	GET_TOD_OUTPUT_CONFIGURATION_MSG,
	GET_TOD_OUTPUT_CONFIGURATION_RESP_MSG,
	ONEPPS_OUTPUT_CLOCK_MODULE_END,

	PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_BASE = ONEPPS_OUTPUT_CLOCK_MODULE_BASE + ONEPPS_OUTPUT_CLOCK_MODULE_MAX_MESSAGES,
	SET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_MSG = PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_BASE,
	SET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_RESP_MSG,
	GET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_MSG,
	GET_PHASE_ALIGNED_OUTPUT_CLOCK_FREQ_RESP_MSG,
	PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_END,

	/* Clock Inputs */
	CLOCK_INPUTS_MODULE_BASE = PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_BASE + PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_MAX_MESSAGES,
	SET_PTP_INPUT_CLOCK_FREQUENCY_MSG,
	SET_PTP_INPUT_CLOCK_FREQUENCY_RESP_MSG,
	GET_PTP_INPUT_CLOCK_FREQUENCY_MSG,
	GET_PTP_INPUT_CLOCK_FREQUENCY_RESP_MSG,
	SET_PTP_INPUT_CLOCK_ENABLED_MSG,
	SET_PTP_INPUT_CLOCK_ENABLED_RESP_MSG,
	GET_PTP_INPUT_CLOCK_ENABLED_MSG,
	GET_PTP_INPUT_CLOCK_ENABLED_RESP_MSG,
	SET_PTP_INPUT_CLOCK_SELECTED_MSG,
	SET_PTP_INPUT_CLOCK_SELECTED_RESP_MSG,
	GET_PTP_INPUT_CLOCK_SELECTED_MSG,
	GET_PTP_INPUT_CLOCK_SELECTED_RESP_MSG,
	GET_DAYS_TO_LEAP_SECOND_NODE_MSG,
	GET_DAYS_TO_LEAP_SECOND_NODE_RESP_MSG,
	GET_DAYS_TO_LEAP_SECOND_SOURCE_MSG,
	GET_DAYS_TO_LEAP_SECOND_SOURCE_RESP_MSG,
	CLOCK_INPUTS_MODULE_END,

	ONEPPS_INPUT_CLOCK_MODULE_BASE = CLOCK_INPUTS_MODULE_BASE + CLOCK_INPUTS_MODULE_BASE_MAX_MESSAGES,
	SET_1PPS_INPUT_CLOCK_ENABLED_MSG = ONEPPS_INPUT_CLOCK_MODULE_BASE,
	SET_1PPS_INPUT_CLOCK_ENABLED_RESP_MSG,
	GET_1PPS_INPUT_CLOCK_ENABLED_MSG,
	GET_1PPS_INPUT_CLOCK_ENABLED_RESP_MSG,
	SET_TOD_INPUT_CONFIGURATION_MSG,
	SET_TOD_INPUT_CONFIGURATION_RESP_MSG,
	GET_TOD_INPUT_CONFIGURATION_MSG,
	GET_TOD_INPUT_CONFIGURATION_RESP_MSG,
	GET_TOD_INPUT_STATUS_MSG,
	GET_TOD_INPUT_STATUS_RESP_MSG,
	SET_UTC_OFFSET_MSG,
	SET_UTC_OFFSET_RESP_MSG,
	GET_UTC_OFFSET_MSG,
	GET_UTC_OFFSET_RESP_MSG,
	SET_IMPENDING_LEAP_SECOND_MSG,
	SET_IMPENDING_LEAP_SECOND_RESP_MSG,
	GET_DAYS_TO_LEAP_SECOND_MSG,
	GET_DAYS_TO_LEAP_SECOND_RESP_MSG,
	SET_PPS_INPUT_TIME_MSG,
	SET_PPS_INPUT_TIME_RESP_MSG,
	SET_PPS_INPUT_TIME_OF_DAY_MSG,
	SET_PPS_INPUT_TIME_OF_DAY_RESP_MSG,
	ONEPPS_INPUT_CLOCK_MODULE_END,

	/* External Interfaces */
	EXTERNAL_INTERFACES_MODULE_BASE = ONEPPS_INPUT_CLOCK_MODULE_BASE + ONE_PPS_INPUT_MODULE_MAX_MESSAGES,
	GET_EXTERNAL_INTERFACES_MSG = EXTERNAL_INTERFACES_MODULE_BASE,
	GET_EXTERNAL_INTERFACES_RESP_MSG,
	RESET_NETWORK_INTERFACE_STATISTICS_MSG,
	RESET_NETWORK_INTERFACE_STATISTICS_RESP_MSG,
	EXTERNAL_INTERFACES_MODULE_END,

	ETHERNET_INTERFACE_SUBMODULE_BASE = EXTERNAL_INTERFACES_MODULE_BASE + EXTERNAL_INTERFACES_MODULE_MAX_MESSAGES,
	GET_ETHERNET_MAC_ADDRESS_MSG = ETHERNET_INTERFACE_SUBMODULE_BASE,
	GET_ETHERNET_MAC_ADDRESS_RESP_MSG,
	GET_DEFAULT_ETHERNET_MAC_ADDRESS_MSG,
	GET_DEFAULT_ETHERNET_MAC_ADDRESS_RESP_MSG,
	GET_MDIO_LINK_AVAILABILITY_MSG,
	GET_MDIO_LINK_AVAILABILITY_RESP_MSG,
	SET_ETHERNET_LINK_SPEED_AND_DUPLEX_MODE_MSG,
	SET_ETHERNET_LINK_SPEED_AND_DUPLEX_MODE_RESP_MSG,
	GET_ETHERNET_LINK_SPEED_AND_DUPLEX_MODE_MSG,
	GET_ETHERNET_LINK_SPEED_AND_DUPLEX_MODE_RESP_MSG,
	RESTART_AUTONEGOTIATION_MSG,
	RESTART_AUTONEGOTIATION_RESP_MSG,
	SET_ETHERNET_INTERFACE_ENABLED_MSG,
	SET_ETHERNET_INTERFACE_ENABLED_RESP_MSG,
	GET_ETHERNET_LINK_STATUS_MSG,
	GET_ETHERNET_LINK_STATUS_RESP_MSG,
	SET_MAC_ADDRESS_FILTERING_ENABLED_MSG,
	SET_MAC_ADDRESS_FILTERING_ENABLED_RESP_MSG,
	GET_MAC_ADDRESS_FILTERING_ENABLED_MSG,
	GET_MAC_ADDRESS_FILTERING_ENABLED_RESP_MSG,
	SET_PERMITTED_MAC_ADDRESSES_MSG,
	SET_PERMITTED_MAC_ADDRESSES_RESP_MSG,
	GET_PERMITTED_MAC_ADDRESSES_MSG,
	GET_PERMITTED_MAC_ADDRESSES_RESP_MSG,
	GET_ETHERNET_INTERFACE_STATISTICS_MSG,
	GET_ETHERNET_INTERFACE_STATISTICS_RESP_MSG,
	SET_MDIO_DATA_MSG,
	SET_MDIO_DATA_RESP_MSG,
	GET_MDIO_DATA_MSG,
	GET_MDIO_DATA_RESP_MSG,
	ETHERNET_INTERFACE_SUBMODULE_END,

	ETHERNET_PACKET_INTERFACE_SUBMODULE_BASE = ETHERNET_INTERFACE_SUBMODULE_BASE + ETHERNET_INTERFACE_SUBMODULE_MAX_MESSAGES,
	ADD_ETHERNET_PACKET_INTERFACE_MSG = ETHERNET_PACKET_INTERFACE_SUBMODULE_BASE,
	ADD_ETHERNET_PACKET_INTERFACE_RESP_MSG,
	DELETE_ETHERNET_PACKET_INTERFACE_MSG,
	DELETE_ETHERNET_PACKET_INTERFACE_RESP_MSG,
	SET_ETHERNET_PACKET_INTERFACE_ENABLED_MSG,
	SET_ETHERNET_PACKET_INTERFACE_ENABLED_RESP_MSG,
	GET_ETHERNET_PACKET_INTERFACE_STATUS_MSG,
	GET_ETHERNET_PACKET_INTERFACE_STATUS_RESP_MSG,
	GET_ETHERNET_PACKET_INTERFACE_STATS_MSG,
	GET_ETHERNET_PACKET_INTERFACE_STATS_RESP_MSG,
	ETHERNET_PACKET_INTERFACE_SUBMODULE_END,

	IP_PACKET_INTERFACE_SUBMODULE_BASE = ETHERNET_PACKET_INTERFACE_SUBMODULE_BASE + ETHERNET_PACKET_INTERFACE_SUBMODULE_MAX_MESSAGES,
	ADD_IP_PACKET_INTERFACE_MSG = IP_PACKET_INTERFACE_SUBMODULE_BASE,
	ADD_IP_PACKET_INTERFACE_RESP_MSG,
	DELETE_IP_PACKET_INTERFACE_MSG,
	DELETE_IP_PACKET_INTERFACE_RESP_MSG,
	GET_IP_PACKET_INTERFACE_CONFIGURATION_MSG,
	GET_IP_PACKET_INTERFACE_CONFIGURATION_RESP_MSG,
	SET_IP_PACKET_INTERFACE_ENABLED_MSG,
	SET_IP_PACKET_INTERFACE_ENABLED_RESP_MSG,
	GET_IP_PACKET_INTERFACE_STATUS_MSG,
	GET_IP_PACKET_INTERFACE_STATUS_RESP_MSG,
	GET_IP_PACKET_INTERFACE_STATISTICS_MSG,
	GET_IP_PACKET_INTERFACE_STATISTICS_RESP_MSG,
	CHANGE_IP_PACKET_INTERFACE_MSG,
	CHANGE_IP_PACKET_INTERFACE_RESP_MSG,
	IP_PACKET_INTERFACE_SUBMODULE_END,

	SPI_BUS_SUBMODULE_BASE = IP_PACKET_INTERFACE_SUBMODULE_BASE + IP_PACKET_INTERFACE_SUBMODULE_MAX_MESSAGES,
	GET_SPI_BUS_STATISTICS_MSG = SPI_BUS_SUBMODULE_BASE,
	GET_SPI_BUS_STATISTICS_RESP_MSG,
	RESET_SPI_BUS_STATISTICS_MSG,
	RESET_SPI_BUS_STATISTICS_RESP_MSG,
	SPI_BUS_SUBMODULE_END,


	/* PTP Ports */
	PTP_PORTS_MODULE_GENERAL_BASE = SPI_BUS_SUBMODULE_BASE + SPI_BUS_SUBMODULE_MAX_MESSAGES,
	CONFIGURE_PTP_PORT_MSG = PTP_PORTS_MODULE_GENERAL_BASE,
	CONFIGURE_PTP_PORT_RESP_MSG,
	DECONFIGURE_PTP_PORT_MSG,
	DECONFIGURE_PTP_PORT_RESP_MSG,
	GET_PTP_PORT_CONFIGURATION_MSG,
	GET_PTP_PORT_CONFIGURATION_RESP_MSG,
	SET_PTP_PORT_ENABLED_MSG,
	SET_PTP_PORT_ENABLED_RESP_MSG,
	SET_SEMTECH_ENHANCEMENTS_ENABLED_MSG_UNUSED,
	SET_SEMTECH_ENHANCEMENTS_ENABLED_RESP_MSG_UNUSED,
	GET_SEMTECH_ENHANCEMENTS_ENABLED_MSG_UNUSED,
	GET_SEMTECH_ENHANCEMENTS_ENABLED_RESP_MSG_UNUSED,
	SET_PTP_PORT_STATE_MSG,
	SET_PTP_PORT_STATE_RESP_MSG,
	GET_PTP_PORT_STATE_MSG,
	GET_PTP_PORT_STATE_RESP_MSG,
	SET_V1_PAD_MSG,
	SET_V1_PAD_RESP_MSG,
	GET_V1_PAD_MSG,
	GET_V1_PAD_RESP_MSG,
	SET_PTP_NODE_ID_MSG,
	SET_PTP_NODE_ID_RESP_MSG,
	GET_PTP_NODE_ID_MSG,
	GET_PTP_NODE_ID_RESP_MSG,
	GET_DEFAULT_PTP_NODE_ID_MSG,
	GET_DEFAULT_PTP_NODE_ID_RESP_MSG,
	SET_ENABLE_PTP_PORT_MASTER_OPERATION_MSG,
	SET_ENABLE_PTP_PORT_MASTER_OPERATION_RESP_MSG,
	SET_ENABLE_PTP_PORT_SLAVE_OPERATION_MSG,
	SET_ENABLE_PTP_PORT_SLAVE_OPERATION_RESP_MSG,
	GET_ENABLE_PTP_PORT_MASTER_OPERATION_MSG,
	GET_ENABLE_PTP_PORT_MASTER_OPERATION_RESP_MSG,
	GET_ENABLE_PTP_PORT_SLAVE_OPERATION_MSG,
	GET_ENABLE_PTP_PORT_SLAVE_OPERATION_RESP_MSG,
	SET_PTP_PORT_ADDRESSING_MODE_MSG,
	SET_PTP_PORT_ADDRESSING_MODE_RESP_MSG,
	GET_PTP_PORT_ADDRESSING_MODE_MSG,
	GET_PTP_PORT_ADDRESSING_MODE_RESP_MSG,
	SET_FORCE_PTP_PORT_TWO_STEP_OPERATION_MSG,
	SET_FORCE_PTP_PORT_TWO_STEP_OPERATION_RESP_MSG,
	GET_FORCE_PTP_PORT_TWO_STEP_OPERATION_MSG,
	GET_FORCE_PTP_PORT_TWO_STEP_OPERATION_RESP_MSG,
	PTP_PORTS_MODULE_GENERAL_END,

	PTP_PORTS_MODULE_SLAVE_BASE = PTP_PORTS_MODULE_GENERAL_BASE + PTP_PORTS_MODULE_GENERAL_MAX_MESSAGES,
	SET_REQUESTED_ANNOUNCE_MSG_PERIOD_MSG = PTP_PORTS_MODULE_SLAVE_BASE,
	SET_REQUESTED_ANNOUNCE_MSG_PERIOD_RESP_MSG,
	GET_REQUESTED_ANNOUNCE_MSG_PERIOD_MSG,
	GET_REQUESTED_ANNOUNCE_MSG_PERIOD_RESP_MSG,
	SET_REQUESTED_SYNC_MSG_PERIOD_MSG,
	SET_REQUESTED_SYNC_MSG_PERIOD_RESP_MSG,
	GET_REQUESTED_SYNC_MSG_PERIOD_MSG,
	GET_REQUESTED_SYNC_MSG_PERIOD_RESP_MSG,
	SET_REQUESTED_DELAY_REQUEST_MSG_PERIOD_MSG,
	SET_REQUESTED_DELAY_REQUEST_MSG_PERIOD_RESP_MSG,
	GET_REQUESTED_DELAY_REQUEST_MSG_PERIOD_MSG,
	GET_REQUESTED_DELAY_REQUEST_MSG_PERIOD_RESP_MSG,
	SET_FILTER_BANDWIDTHS_MSG,
	SET_FILTER_BANDWIDTHS_RESP_MSG,
	GET_FILTER_BANDWIDTHS_MSG,
	GET_FILTER_BANDWIDTHS_RESP_MSG,
	SET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_MSG,
	SET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_RESP_MSG,
	GET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_MSG,
	GET_ACCEPTABLE_PARTNER_TABLE_REQUIRED_RESP_MSG,
	ADD_ACCEPTABLE_PARTNER_MSG,
	ADD_ACCEPTABLE_PARTNER_RESP_MSG,
	DELETE_ACCEPTABLE_PARTNER_MSG,
	DELETE_ACCEPTABLE_PARTNER_RESP_MSG,
	GET_ACCEPTABLE_PARTNER_TABLE_ENTRY_MSG,
	GET_ACCEPTABLE_PARTNER_TABLE_ENTRY_RESP_MSG,
	SET_DELAY_TO_USE_MSG,
	SET_DELAY_TO_USE_RESP_MSG,
	GET_DELAY_TO_USE_MSG,
	GET_DELAY_TO_USE_RESP_MSG,
	SET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_MSG,
	SET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_RESP_MSG,
	GET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_MSG,
	GET_NUMBER_OF_MISSING_ANNOUNCE_MESSAGES_TO_DECLARE_MASTER_FAILED_RESP_MSG,
	SET_MSG_PERIOD_MSG,
	SET_MSG_PERIOD_RESP_MSG,
	GET_MSG_PERIOD_MSG,
	GET_MSG_PERIOD_RESP_MSG,
	PTP_PORTS_MODULE_SLAVE_END,

	PTP_PORTS_MODULE_MASTER_BASE = PTP_PORTS_MODULE_SLAVE_BASE + PTP_PORTS_MODULE_SLAVE_MAX_MESSAGES,
	PTP_PORTS_MODULE_MASTER_END,

	/* Visible Masters */
	VISIBLE_MASTER_MODULE_BASE = PTP_PORTS_MODULE_MASTER_BASE + PTP_PORTS_MODULE_MASTER_MAX_MESSAGES,
	GET_MESSAGE_GRANT_STATUS_MSG = VISIBLE_MASTER_MODULE_BASE,
	GET_MESSAGE_GRANT_STATUS_RESP_MSG,
	GET_VISIBLE_MASTERS_MSG,
	GET_VISIBLE_MASTERS_RESP_MSG,
	GET_VISIBLE_MASTER_MSG,
	GET_VISIBLE_MASTER_RESP_MSG,
	GET_VISIBLE_MASTER_STATISTICS_MSG,
	GET_VISIBLE_MASTER_STATISTICS_RESP_MSG,
	RESET_VISIBLE_MASTER_STATISTICS_MSG,
	RESET_VISIBLE_MASTER_STATISTICS_RESP_MSG,
	GET_VISIBLE_MASTER_DELAY_STATISTICS_MSG,
	GET_VISIBLE_MASTER_DELAY_STATISTICS_RESP_MSG,
	GET_VISIBLE_MASTER_RECEIVED_MSG_STATUS_MSG,	 //now deprecated
	GET_VISIBLE_MASTER_RECEIVED_MSG_STATUS_RESP_MSG,
	GET_VISIBLE_MASTER_EXTENDED_STATISTICS_MSG,
	GET_VISIBLE_MASTER_EXTENDED_STATISTICS_RESP_MSG,
	VISIBLE_MASTER_MODULE_END,

	/* Current Master */
	CURRENT_MASTER_MODULE_BASE = VISIBLE_MASTER_MODULE_BASE + VISIBLE_MASTER_MODULE_MAX_MESSAGES,
	GET_CURRENT_MASTER_MSG = CURRENT_MASTER_MODULE_BASE,
	GET_CURRENT_MASTER_RESP_MSG,
	GET_CURRENT_MASTER_STATISTICS_MSG,
	GET_CURRENT_MASTER_STATISTICS_RESP_MSG,
	GET_TIMESTAMP_SNAPSHOT_MSG,
	GET_TIMESTAMP_SNAPSHOT_RESP_MSG,
	CURRENT_MASTER_MODULE_END,

	/* Time Reference Selector */
	TIME_REF_SELECTOR_MODULE_BASE = CURRENT_MASTER_MODULE_BASE + CURRENT_MASTER_MODULE_MAX_MESSAGES,
	SET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_MSG = TIME_REF_SELECTOR_MODULE_BASE,
	SET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_RESP_MSG,
	GET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_MSG,
	GET_OUTPUT_CLOCK_FREQ_SMOOTHER_ENABLE_RESP_MSG,
	SET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_MSG,
	SET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_RESP_MSG,
	GET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_MSG,
	GET_OUTPUT_CLOCK_FREQ_SMOOTHER_CONFIGURATION_RESP_MSG,
	GET_SELECTED_TIME_REFERENCE_SOURCE_MSG,
	GET_SELECTED_TIME_REFERENCE_SOURCE_RESP_MSG,
	GET_TIME_REF_SELECTOR_STATISTICS_MSG,
	GET_TIME_REF_SELECTOR_STATISTICS_RESP_MSG,
	SET_HOLDOVER_AVERAGING_PERIOD_MSG,
	SET_HOLDOVER_AVERAGING_PERIOD_RESP_MSG,
	GET_HOLDOVER_AVERAGING_PERIOD_MSG,
	GET_HOLDOVER_AVERAGING_PERIOD_RESP_MSG,
	SET_HOLDOVER_CALCULATION_MIN_LOCK_MSG,
	SET_HOLDOVER_CALCULATION_MIN_LOCK_RESP_MSG,
	GET_HOLDOVER_CALCULATION_MIN_LOCK_MSG,
	GET_HOLDOVER_CALCULATION_MIN_LOCK_RESP_MSG,
	SET_FORCE_HOLDOVER_MSG,
	SET_FORCE_HOLDOVER_RESP_MSG,
	GET_FORCE_HOLDOVER_MSG,
	GET_FORCE_HOLDOVER_RESP_MSG,
	RESET_HOLDOVER_DATA_MSG,
	RESET_HOLDOVER_DATA_RESP_MSG,
	SET_SUPPRESS_PHASE_JUMP_MSG,
	SET_SUPPRESS_PHASE_JUMP_RESP_MSG,
	GET_SUPPRESS_PHASE_JUMP_MSG,
	GET_SUPPRESS_PHASE_JUMP_RESP_MSG,
	SET_MAXIMUM_FREQUENCY_OFFSET_MSG,
	SET_MAXIMUM_FREQUENCY_OFFSET_RESP_MSG,
	GET_MAXIMUM_FREQUENCY_OFFSET_MSG,
	GET_MAXIMUM_FREQUENCY_OFFSET_RESP_MSG,
	SET_LOCKED_STATE_THRESHOLDS_MSG,
	SET_LOCKED_STATE_THRESHOLDS_RESP_MSG,
	GET_LOCKED_STATE_THRESHOLDS_MSG,
	GET_LOCKED_STATE_THRESHOLDS_RESP_MSG,
	SET_FORCE_LOCKED_UNLOCKED_STATE_MSG,
	SET_FORCE_LOCKED_UNLOCKED_STATE_RESP_MSG,
	GET_FORCE_LOCKED_UNLOCKED_STATE_MSG,
	GET_FORCE_LOCKED_UNLOCKED_STATE_RESP_MSG,
	GET_LOCKED_STATE_MSG,
	GET_LOCKED_STATE_RESP_MSG,
	SET_FREQUENCY_CONTROLLER_PARAMETERS_MSG,
	SET_FREQUENCY_CONTROLLER_PARAMETERS_RESP_MSG,
	GET_FREQUENCY_CONTROLLER_PARAMETERS_MSG,
	GET_FREQUENCY_CONTROLLER_PARAMETERS_RESP_MSG,
	GET_TOPSYNC_TIME_MSG,
	GET_TOPSYNC_TIME_RESP_MSG,
	SET_TOPSYNC_PARAMETER_MSG,
	SET_TOPSYNC_PARAMETER_RESP_MSG,
	GET_TOPSYNC_PARAMETER_MSG,
	GET_TOPSYNC_PARAMETER_RESP_MSG,
	SET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_MSG,
	SET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_RESP_MSG,
	GET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_MSG,
	GET_LOCK_DETECTOR_THRESHOLD_MULTIPLE_RESP_MSG,
	SET_HOLDOVER_DURATION_MSG,
	SET_HOLDOVER_DURATION_RESP_MSG,
	GET_HOLDOVER_DURATION_MSG,
	GET_HOLDOVER_DURATION_RESP_MSG,
	GET_NODE_UTC_OFFSET_MSG,
	GET_NODE_UTC_OFFSET_RESP_MSG,
	SET_REDUCTION_IN_CLOCK_STRATUM_MSG,
	SET_REDUCTION_IN_CLOCK_STRATUM_RESP_MSG,
	GET_REDUCTION_IN_CLOCK_STRATUM_MSG,
	GET_REDUCTION_IN_CLOCK_STRATUM_RESP_MSG,
	TIME_REF_SELECTOR_MODULE_END,

	/* Time Reference Source */
	TIME_REF_SOURCE_MODULE_BASE = TIME_REF_SELECTOR_MODULE_BASE + TIME_REF_SELECTOR_MODULE_MAX_MESSAGES,
	GET_TIME_REFERENCE_SOURCE_MSG = TIME_REF_SOURCE_MODULE_BASE,
	GET_TIME_REFERENCE_SOURCE_RESP_MSG,
	SET_TIME_REFERENCE_SOURCE_CONFIGURATION_MSG,
	SET_TIME_REFERENCE_SOURCE_CONFIGURATION_RESP_MSG,
	GET_TIME_REFERENCE_SOURCE_CONFIGURATION_MSG,
	GET_TIME_REFERENCE_SOURCE_CONFIGURATION_RESP_MSG,
	SET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_MSG,
	SET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_RESP_MSG,
	GET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_MSG,
	GET_INITIAL_FREQUENCY_MEASUREMENT_PARAMETERS_RESP_MSG,
	SET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_MSG,
	SET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_RESP_MSG,
	GET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_MSG,
	GET_MAX_PHASE_ERROR_BEFORE_PHASE_REALIGNMENT_RESP_MSG,
	SET_PROPORTIONAL_AND_INTEGRAL_GAINS_MSG,
	SET_PROPORTIONAL_AND_INTEGRAL_GAINS_RESP_MSG,
	GET_PROPORTIONAL_AND_INTEGRAL_GAINS_MSG,
	GET_PROPORTIONAL_AND_INTEGRAL_GAINS_RESP_MSG,
	SET_NOISE_ANALYSER_BANDWIDTHS_MSG,
	SET_NOISE_ANALYSER_BANDWIDTHS_RESP_MSG,
	GET_NOISE_ANALYSER_BANDWIDTHS_MSG,
	GET_NOISE_ANALYSER_BANDWIDTHS_RESP_MSG,
	SET_NOISE_ANALYSER_NUMBER_OF_FILTERS_MSG,
	SET_NOISE_ANALYSER_NUMBER_OF_FILTERS_RESP_MSG,
	GET_NOISE_ANALYSER_NUMBER_OF_FILTERS_MSG,
	GET_NOISE_ANALYSER_NUMBER_OF_FILTERS_RESP_MSG,
	SET_PHASE_ERROR_LIMIT_MSG,
	SET_PHASE_ERROR_LIMIT_RESP_MSG,
	GET_PHASE_ERROR_LIMIT_MSG,
	GET_PHASE_ERROR_LIMIT_RESP_MSG,
	SET_CONFIGURED_PHASE_OFFSET_MSG,
	SET_CONFIGURED_PHASE_OFFSET_RESP_MSG,
	GET_CONFIGURED_PHASE_OFFSET_MSG,
	GET_CONFIGURED_PHASE_OFFSET_RESP_MSG,
	SET_TIME_CORRECTION_CONFIGURATION_MSG,
	SET_TIME_CORRECTION_CONFIGURATION_RESP_MSG,
	GET_TIME_CORRECTION_CONFIGURATION_MSG,
	GET_TIME_CORRECTION_CONFIGURATION_RESP_MSG,
	SET_TIME_CORRECTION_DAMPING_FACTOR_MSG,
	SET_TIME_CORRECTION_DAMPING_FACTOR_RESP_MSG,
	GET_TIME_CORRECTION_DAMPING_FACTOR_MSG,
	GET_TIME_CORRECTION_DAMPING_FACTOR_RESP_MSG,
	GET_TIME_REFERENCE_SOURCE_UTC_OFFSET_MSG,
	GET_TIME_REFERENCE_SOURCE_UTC_OFFSET_RESP_MSG,
	SET_NOISE_ANALYSER_ALARM_THRESHOLD_MSG,
	SET_NOISE_ANALYSER_ALARM_THRESHOLD_RESP_MSG,
	GET_NOISE_ANALYSER_ALARM_THRESHOLD_MSG,
	GET_NOISE_ANALYSER_ALARM_THRESHOLD_RESP_MSG,
	SET_ACCEPTOR_QUANTILE_MSG_Unused,
	SET_ACCEPTOR_QUANTILE_RESP_MSG_Unused,
	GET_ACCEPTOR_QUANTILE_MSG_Unused,
	GET_ACCEPTOR_QUANTILE_RESP_MSG_Unused,
	SET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_MSG,
	SET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_RESP_MSG,
	GET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_MSG,
	GET_TIME_REFERENCE_SOURCE_PLL_BANDWIDTH_RESP_MSG,
	TIME_REF_SOURCE_MODULE_END,

	/* Local Oscillator */
	LOCAL_OSCILLATOR_MODULE_BASE = TIME_REF_SOURCE_MODULE_BASE + TIME_REF_SOURCE_MODULE_BASE_MAX_MESSAGES,
	SET_LOCAL_OSC_TYPE_MSG = LOCAL_OSCILLATOR_MODULE_BASE,
	SET_LOCAL_OSC_TYPE_RESP_MSG,
	GET_LOCAL_OSC_TYPE_MSG,
	GET_LOCAL_OSC_TYPE_RESP_MSG,
	SET_LOCAL_OSC_STRATUM_LEVEL_MSG,
	SET_LOCAL_OSC_STRATUM_LEVEL_RESP_MSG,
	GET_LOCAL_OSC_STRATUM_LEVEL_MSG,
	GET_LOCAL_OSC_STRATUM_LEVEL_RESP_MSG,
	SET_LOCAL_OSC_PHASE_NOISE_PAIRS_MSG,
	SET_LOCAL_OSC_PHASE_NOISE_PAIRS_RESP_MSG,
	GET_LOCAL_OSC_PHASE_NOISE_PAIRS_MSG,
	GET_LOCAL_OSC_PHASE_NOISE_PAIRS_RESP_MSG,
	LOCAL_OSCILLATOR_MODULE_END,

	/* System Management */
	SYSTEM_MANAGEMENT_MODULE_BASE = LOCAL_OSCILLATOR_MODULE_BASE + LOCAL_OSCILLATOR_MODULE_MAX_MESSAGES,
	GET_HARDWARE_VERSION_MSG = SYSTEM_MANAGEMENT_MODULE_BASE,
	GET_HARDWARE_VERSION_RESP_MSG,
	GET_SOFTWARE_VERSION_MSG,
	GET_SOFTWARE_VERSION_RESP_MSG,
	GET_TOPSYNC_PART_NUMBER_MSG,
	GET_TOPSYNC_PART_NUMBER_RESP_MSG,
	GET_SECONDS_SINCE_LAST_RESET_MSG,
	GET_SECONDS_SINCE_LAST_RESET_RESP_MSG,
	GET_TOPSYNC_LOCATION_MSG,
	GET_TOPSYNC_LOCATION_RESP_MSG,
	SET_INITIAL_SYSTEM_CONFIGURATION_MSG,
	SET_INITIAL_SYSTEM_CONFIGURATION_RESP_MSG,
	GET_INITIAL_SYSTEM_CONFIGURATION_MSG,
	GET_INITIAL_SYSTEM_CONFIGURATION_RESP_MSG,
	SET_TOPSYNC_PTP_SYSTEM_PARAMETERS_MSG,
	SET_TOPSYNC_PTP_SYSTEM_PARAMETERS_RESP_MSG,
	GET_TOPSYNC_PTP_SYSTEM_PARAMETERS_MSG,
	GET_TOPSYNC_PTP_SYSTEM_PARAMETERS_RESP_MSG,
	SET_TOPSYNC_UPLOAD_CONFIGURATION_MSG,
	SET_TOPSYNC_UPLOAD_CONFIGURATION_RESP_MSG,
	GET_TOPSYNC_UPLOAD_CONFIGURATION_MSG,
	GET_TOPSYNC_UPLOAD_CONFIGURATION_RESP_MSG,
	GET_SECURITY_KEY_MSG,
	GET_SECURITY_KEY_RESP_MSG,
	UPGRADE_FIRMWARE_MSG,
	UPGRADE_FIRMWARE_RESP_MSG,
	FIRMWARE_BURST_MSG,
	FIRMWARE_BURST_RESP_MSG,
	FIRMWARE_CRC_MSG,
	FIRMWARE_CRC_RESP_MSG,
	SET_ETHERNET_MAC_ADDRESS_MSG,
	SET_ETHERNET_MAC_ADDRESS_RESP_MSG,
	GET_SETS_SOFTWARE_VERSION_MSG,
	GET_SETS_SOFTWARE_VERSION_RESP_MSG,
	GET_APP_SOFTWARE_VERSION_MSG,
	GET_APP_SOFTWARE_VERSION_RESP_MSG,
	GET_SETS_HARDWARE_VERSION_MSG,
	GET_SETS_HARDWARE_VERSION_RESP_MSG,
	SYSTEM_MANAGEMENT_MODULE_END,

	/* System Exceptions */
	SYSTEM_EXCEPTIONS_MODULE_BASE = SYSTEM_MANAGEMENT_MODULE_BASE + SYSTEM_MANAGEMENT_MODULE_MAX_MESSAGES,
	GET_TOPSYNC_SYSTEM_EXCEPTIONS_MSG = SYSTEM_EXCEPTIONS_MODULE_BASE,
	GET_TOPSYNC_SYSTEM_EXCEPTIONS_RESP_MSG,
	SET_TOPSYNC_SYSTEM_EXCEPTIONS_CONFIGURATIONS_MSG,
	SET_TOPSYNC_SYSTEM_EXCEPTIONS_CONFIGURATIONS_RESP_MSG,
	SYSTEM_EXCEPTIONS_MODULE_END,

	/* Alarm Monitoring */
	ALARM_MONITORING_MODULE_BASE = SYSTEM_EXCEPTIONS_MODULE_BASE + SYSTEM_EXCEPTIONS_MODULE_MAX_MESSAGES,
	SET_ALARM_SRC_ENABLED_MSG = ALARM_MONITORING_MODULE_BASE,
	SET_ALARM_SRC_ENABLED_RESP_MSG,
	GET_ALARM_SRC_ENABLED_MSG,
	GET_ALARM_SRC_ENABLED_RESP_MSG,
	SET_ALARM_SRC_CLIENT_ID_ENABLED_MSG,
	SET_ALARM_SRC_CLIENT_ID_ENABLED_RESP_MSG,
	GET_ALARM_SRC_CLIENT_ID_ENABLED_MSG,
	GET_ALARM_SRC_CLIENT_ID_ENABLED_RESP_MSG,
	GET_ALARM_SET_MSG,
	GET_ALARM_SET_RESP_MSG,
	GET_ANY_ALARMS_SET_MSG,
	GET_ANY_ALARMS_SET_RESP_MSG,
	GET_ALARM_SET_ARRAY_MSG,
	GET_ALARM_SET_ARRAY_RESP_MSG,
	ALARM_MONITORING_MODULE_END,

	/* GUI Message Set. */
	GUI_MODULE_BASE = ALARM_MONITORING_MODULE_BASE + ALARM_MONITORING_MODULE_MAX_MESSAGES,
	DISCOVERY_MSG = GUI_MODULE_BASE,
	DISCOVERY_RESP_MSG,
	GET_LOCK_VALUE_MSG,
	GET_LOCK_VALUE_RESP_MSG,
	GET_PHASE_ERROR_MSG,
	GET_PHASE_ERROR_RESP_MSG,
	GET_CURRENT_MASTER_ADDRESS_MSG,
	GET_CURRENT_MASTER_ADDRESS_RESP_MSG,
	GET_NUMBER_OF_VISIBLE_MASTERS_MSG,
	GET_NUMBER_OF_VISIBLE_MASTERS_RESP_MSG,
	GET_PORT_STATE_MSG,
	GET_PORT_STATE_RESP_MSG,
	GET_CURRENT_MASTER_TO_SLAVE_FLIGHT_TIME_MSG,
	GET_CURRENT_MASTER_TO_SLAVE_FLIGHT_TIME_RESP_MSG,
	GET_SLAVE_TO_CURRENT_MASTER_FLIGHT_TIME_MSG,
	GET_SLAVE_TO_CURRENT_MASTER_FLIGHT_TIME_RESP_MSG,
	GET_CLOCK_QUALITY_MSG,
	GET_CLOCK_QUALITY_RESP_MSG,
	GET_CURRENT_MASTER_TO_SLAVE_NOISE_MSG,
	GET_CURRENT_MASTER_TO_SLAVE_NOISE_RESP_MSG,
	GET_SLAVE_TO_CURRENT_MASTER_NOISE_MSG,
	GET_SLAVE_TO_CURRENT_MASTER_NOISE_RESP_MSG,
	GET_CURRENT_MASTER_FREQ_ERROR_MSG,
	GET_CURRENT_MASTER_FREQ_ERROR_RESP_MSG,
	GET_CURRENT_MASTER_CLOCK_ID_MSG,
	GET_CURRENT_MASTER_CLOCK_ID_RESP_MSG,
	GET_MULTICAST_CONFIGURATION_MSG,
	GET_MULTICAST_CONFIGURATION_RESP_MSG,
	GET_LOCAL_CLOCK_STRATUM_MSG,
	GET_LOCAL_CLOCK_STRATUM_RESP_MSG,
	GET_IGNORE_PHASE_JUMPS_MSG,
	GET_IGNORE_PHASE_JUMPS_RESP_MSG,
	GET_IMPAIRMENT_CONFIGURATION_MSG,
	GET_IMPAIRMENT_CONFIGURATION_RESP_MSG,
	SET_IMPAIRMENT_CONFIGURATION_MSG,
	SET_IMPAIRMENT_CONFIGURATION_RESP_MSG,
	REQUEST_NEW_IMPAIRMENT_DATA_MSG,
	NEW_IMPAIRMENT_DATA_MSG,
	DEBUG_PRINT_UNACKNOWLEDGED_MSG,
	SET_DESIRED_PHASE_OFFSET_MSG,
	SET_DESIRED_PHASE_OFFSET_RESP_MSG,
	GET_DESIRED_PHASE_OFFSET_MSG,
	GET_DESIRED_PHASE_OFFSET_RESP_MSG,
	SET_SHORT_DELAY_REQUEST_RATE_MSG,
	SET_SHORT_DELAY_REQUEST_RATE_RESP_MSG,
	GET_SHORT_DELAY_REQUEST_RATE_MSG,
	GET_SHORT_DELAY_REQUEST_RATE_RESP_MSG,
	SET_SHORT_MESSAGE_ENABLED_MSG,
	SET_SHORT_MESSAGE_ENABLED_RESP_MSG,
	GET_SHORT_MESSAGE_ENABLED_MSG,
	GET_SHORT_MESSAGE_ENABLED_RESP_MSG,
	SET_TOPSYNC_CONNECTIVITY_MSG,
	SET_TOPSYNC_CONNECTIVITY_RESP_MSG,
	GET_TOPSYNC_CONNECTIVITY_MSG,
	GET_TOPSYNC_CONNECTIVITY_RESP_MSG,
	NOTIFICATION_MSG,
	DEBUG_PRINT_START_ACKNOWLEDGED_MSG,
	DEBUG_PRINT_START_ACKNOWLEDGED_RESP_MSG,
	DEBUG_PRINT_TERMINATE_ACKNOWLEDGED_MSG,
	DEBUG_PRINT_TERMINATE_ACKNOWLEDGED_RESP_MSG,
	GUI_MODULE_END,

	/* SETS Module. */
	SETS_MODULE_BASE = GUI_MODULE_BASE + GUI_MODULE_MAX_MESSAGES,
	READ_SETS_MSG,
	READ_SETS_RESP_MSG,
	WRITE_SETS_MSG,
	WRITE_SETS_RESP_MSG,
	SET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_MSG,
	SET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_RESP_MSG,
	GET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_MSG,
	GET_SETS_AUTOMATIC_CONFIGURATION_ENABLED_RESP_MSG,
	SETS_MODULE_END,

	/* MUX */
	MUX_MODULE_BASE = SETS_MODULE_BASE + SETS_MODULE_MAX_MESSAGES,
	SET_MUX_INPUT_MSG,
	SET_MUX_INPUT_RESP_MSG,
	GET_MUX_INPUT_MSG,
	GET_MUX_INPUT_RESP_MSG,
	MUX_MODULE_END,


	/*Physical Port*/
	PHYSICAL_PORT_MODULE_BASE = MUX_MODULE_BASE + MUX_MODULE_MAX_MESSAGES,
	SET_MASTER_LOAD_LIMIT_MSG = PHYSICAL_PORT_MODULE_BASE,
	SET_MASTER_LOAD_LIMIT_RESP_MSG,
	GET_MASTER_LOAD_LIMIT_MSG,
	GET_MASTER_LOAD_LIMIT_RESP_MSG,
	GET_ISSUED_GRANT_DETAILS_MSG,
	GET_ISSUED_GRANT_DETAILS_RESP_MSG,
	PHYSICAL_PORT_MODULE_END,

	/*Generic messages*/
	GENERIC_MODULE_BASE = PHYSICAL_PORT_MODULE_BASE + PHYSICAL_PORT_MODULE_MAX_MESSAGES,
	SET_GENERIC_PARAMETER_ZERO_ID_MSG = GENERIC_MODULE_BASE,  /*duplicate of GET_TOPSYNC_PARAMETER_MSG*/
	SET_GENERIC_PARAMETER_ZERO_ID_RESP_MSG,
	GET_GENERIC_PARAMETER_ZERO_ID_MSG,
	GET_GENERIC_PARAMETER_ZERO_ID_RESP_MSG,

	SET_GENERIC_PARAMETER_ONE_ID_MSG,
	SET_GENERIC_PARAMETER_ONE_ID_RESP_MSG,
	GET_GENERIC_PARAMETER_ONE_ID_MSG,
	GET_GENERIC_PARAMETER_ONE_ID_RESP_MSG,
	SET_GENERIC_PARAMETER_TWO_ID_MSG,
	SET_GENERIC_PARAMETER_TWO_ID_RESP_MSG,
	GET_GENERIC_PARAMETER_TWO_ID_MSG,
	GET_GENERIC_PARAMETER_TWO_ID_RESP_MSG,
	GENERIC_MODULE_END,

	/*Hardware interface messages ie I2C*/
	HARDWARE_MODULE_BASE = GENERIC_MODULE_BASE + GENERIC_MODULE_MAX_MESSAGES,
	WRITE_I2C_MSG = HARDWARE_MODULE_BASE,
	WRITE_I2C_RESP_MSG,
	READ_I2C_MSG,
	READ_I2C_RESP_MSG,
	HARDWARE_MODULE_END,

	/* Delay Replacement Modes. ToPSync modes 2 and 3 APIs */
	DELAY_REPLACEMENT_MODULE_BASE = HARDWARE_MODULE_BASE + HARDWARE_INTERFACE_MODULE_MAX_MESSAGES,
	SET_MODE2_CONFIGURATION_MSG = DELAY_REPLACEMENT_MODULE_BASE,
	SET_MODE2_CONFIGURATION_RESP_MSG,
	GET_MODE2_CONFIGURATION_MSG,
	GET_MODE2_CONFIGURATION_RESP_MSG,
	SET_MODE3_CONFIGURATION_MSG,
	SET_MODE3_CONFIGURATION_RESP_MSG,
	GET_MODE3_CONFIGURATION_MSG,
	GET_MODE3_CONFIGURATION_RESP_MSG,
	GET_DRM_STATISTICS_MSG,
	GET_DRM_STATISTICS_RESP_MSG,
	DELAY_REPLACEMENT_MODULE_END,

	/* mmAPI */
	MMAPI_MODULE_BASE = DELAY_REPLACEMENT_MODULE_BASE + DELAY_REPLACEMENT_MODULE_MAX_MESSAGES,
	SET_MMAPI_MSG = MMAPI_MODULE_BASE,
	SET_MMAPI_RESP_MSG,
	GET_MMAPI_MSG,
	GET_MMAPI_RESP_MSG,
	MMAPI_MODULE_END,

	NUMBER_OF_TOPSYNC_MSG_TYPES
} ToPSyncControlMsgType;


/*do error checks for limits*/
#if SYSTEM_STATE_MODULE_END > CLOCK_OUTPUTS_MODULE_BASE
#error SYSTEM_STATE_MODULE_END > CLOCK_OUTPUTS_MODULE_BASE
#endif

#if CLOCK_OUTPUTS_MODULE_END > ONEPPS_OUTPUT_CLOCK_MODULE_BASE
#error CLOCK_OUTPUTS_MODULE_END > ONEPPS_OUTPUT_CLOCK_MODULE_BASE
#endif


#if ONEPPS_OUTPUT_CLOCK_MODULE_END > PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_BASE
#error ONEPPS_OUTPUT_CLOCK_MODULE_END > PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_BASE
#endif

#if PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_END > CLOCK_INPUTS_MODULE_BASE
#error PHASE_ALIGNED_OUTPUT_CLOCK_MODULE_END > CLOCK_INPUTS_MODULE_BASE
#endif


#if CLOCK_INPUTS_MODULE_END > ONEPPS_INPUT_CLOCK_MODULE_BASE
#error CLOCK_INPUTS_MODULE_END > ONEPPS_INPUT_CLOCK_MODULE_BASE
#endif


#if ONEPPS_INPUT_CLOCK_MODULE_END > EXTERNAL_INTERFACES_MODULE_BASE
//#error ONEPPS_INPUT_CLOCK_MODULE_END > EXTERNAL_INTERFACES_MODULE_BASE
#endif


#if EXTERNAL_INTERFACES_MODULE_END > ETHERNET_INTERFACE_SUBMODULE_BASE
#error EXTERNAL_INTERFACES_MODULE_END > ETHERNET_INTERFACE_SUBMODULE_BASE
#endif


#if ETHERNET_INTERFACE_SUBMODULE_END > ETHERNET_PACKET_INTERFACE_SUBMODULE_BASE
#error ETHERNET_INTERFACE_SUBMODULE_END > ETHERNET_PACKET_INTERFACE_SUBMODULE_BASE
#endif

#if ETHERNET_PACKET_INTERFACE_SUBMODULE_END > IP_PACKET_INTERFACE_SUBMODULE_BASE
#error ETHERNET_PACKET_INTERFACE_SUBMODULE_END > IP_PACKET_INTERFACE_SUBMODULE_BASE
#endif


#if IP_PACKET_INTERFACE_SUBMODULE_END > SPI_BUS_SUBMODULE_BASE
#error IP_PACKET_INTERFACE_SUBMODULE_END > SPI_BUS_SUBMODULE_BASE
#endif


#if SPI_BUS_SUBMODULE_END > PTP_PORTS_MODULE_GENERAL_BASE
#error SPI_BUS_SUBMODULE_END > PTP_PORTS_MODULE_GENERAL_BASE
#endif


#if PTP_PORTS_MODULE_GENERAL_END > PTP_PORTS_MODULE_SLAVE_BASE
#error PTP_PORTS_MODULE_GENERAL_END > PTP_PORTS_MODULE_SLAVE_BASE
#endif


#if PTP_PORTS_MODULE_SLAVE_END > PTP_PORTS_MODULE_MASTER_BASE
#error PTP_PORTS_MODULE_SLAVE_END > PTP_PORTS_MODULE_MASTER_BASE
#endif

#if PTP_PORTS_MODULE_MASTER_END > VISIBLE_MASTER_MODULE_BASE
#error PTP_PORTS_MODULE_MASTER_END > VISIBLE_MASTER_MODULE_BASE
#endif


#if VISIBLE_MASTER_MODULE_END > CURRENT_MASTER_MODULE_BASE
#error VISIBLE_MASTER_MODULE_END > CURRENT_MASTER_MODULE_BASE
#endif


#if CURRENT_MASTER_MODULE_END > TIME_REF_SELECTOR_MODULE_BASE
#error CURRENT_MASTER_MODULE_END > TIME_REF_SELECTOR_MODULE_BASE
#endif


#if TIME_REF_SELECTOR_MODULE_END > TIME_REF_SOURCE_MODULE_BASE
#error TIME_REF_SELECTOR_MODULE_END > TIME_REF_SOURCE_MODULE_BASE
#endif

#if TIME_REF_SOURCE_MODULE_END > LOCAL_OSCILLATOR_MODULE_BASE
#error TIME_REF_SOURCE_MODULE_END > LOCAL_OSCILLATOR_MODULE_BASE
#endif

#if LOCAL_OSCILLATOR_MODULE_END > SYSTEM_MANAGEMENT_MODULE_BASE
#error LOCAL_OSCILLATOR_MODULE_END > SYSTEM_MANAGEMENT_MODULE_BASE
#endif


#if SYSTEM_MANAGEMENT_MODULE_END > SYSTEM_EXCEPTIONS_MODULE_BASE
#error SYSTEM_MANAGEMENT_MODULE_END > SYSTEM_EXCEPTIONS_MODULE_BASE
#endif


#if SYSTEM_EXCEPTIONS_MODULE_END > ALARM_MONITORING_MODULE_BASE
#error SYSTEM_EXCEPTIONS_MODULE_END > ALARM_MONITORING_MODULE_BASE
#endif


#if ALARM_MONITORING_MODULE_END > GUI_MODULE_BASE
#error ALARM_MONITORING_MODULE_END > GUI_MODULE_BASE
#endif


#if GUI_MODULE_END > SETS_MODULE_BASE
#error GUI_MODULE_END > SETS_MODULE_BASE
#endif


#if SETS_MODULE_END > MUX_MODULE_BASE
#error SETS_MODULE_END > MUX_MODULE_BASE
#endif


#if MUX_MODULE_END > PHYSICAL_PORT_MODULE_BASE
#error MUX_MODULE_END > PHYSICAL_PORT_MODULE_BASE
#endif


#if PHYSICAL_PORT_MODULE_END > GENERIC_MODULE_BASE
#error PHYSICAL_PORT_MODULE_END > GENERIC_MODULE_BASE
#endif

#if GENERIC_MODULE_END > HARDWARE_MODULE_BASE
#error GENERIC_MODULE_END > HARDWARE_MODULE_BASE
#endif


#if HARDWARE_MODULE_END > NUMBER_OF_TOPSYNC_MSG_TYPES
#error HARDWARE_MODULE_END > NUMBER_OF_TOPSYNC_MSG_TYPES
#endif


typedef struct
{
	ToPSyncMsgHeader header;
} ToPSyncDiscoveryMsg;


#ifndef USE_MMAPI_DISCOVERY_MESSAGE
typedef struct
{
	ToPSyncMsgHeader header;
} ToPSyncDiscoveryResponseMsg;

#else
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 mmAPIid;
} ToPSyncDiscoveryResponseMsg;

#endif


typedef struct
{
	ToPSyncMsgHeader header;
	float value;
} FloatingPointValueMsg;

typedef ToPSyncMsgHeader GetLockValueMsg;
typedef FloatingPointValueMsg GetLockValueResponseMsg;


typedef ToPSyncMsgHeader GetPhaseErrorMsg;
typedef FloatingPointValueMsg GetPhaseErrorResponseMsg;

typedef ToPSyncMsgHeader GetCurrentMasterIpAddressMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 ipAddress;
} GetCurrentMasterIpAddressResponseMsg;

typedef ToPSyncMsgHeader GetNumberOfVisibleMastersMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint16 visibleMasters;
} GetNumberOfVisibleMastersResponseMsg;

typedef ToPSyncMsgHeader GetPortStateMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	PTPPortState portState;
} GetPortStateResponseMsg;

typedef ToPSyncMsgHeader GetCurrentMasterToSlaveFlightTimeMsg;
typedef FloatingPointValueMsg GetCurrentMasterToSlaveFlightTimeResponseMsg;

typedef ToPSyncMsgHeader GetSlaveToCurrentMasterFlightTimeMsg;
typedef FloatingPointValueMsg GetSlaveToCurrentMasterFlightTimeResponseMsg;

typedef ToPSyncMsgHeader GetClockQualityMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	ClockQuality clockQuality;
} GetClockQualityResponseMsg;

typedef ToPSyncMsgHeader GetCurrentMasterToSlaveNoiseMsg;
typedef FloatingPointValueMsg GetCurrentMasterToSlaveNoiseResponseMsg;

typedef ToPSyncMsgHeader GetSlaveToCurrentMasterNoiseMsg;
typedef FloatingPointValueMsg GetSlaveToCurrentMasterNoiseResponseMsg;

typedef ToPSyncMsgHeader GetCurrentMasterClockIdMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	PortId currentMasterClockId;
} GetCurrentMasterClockIdResponseMsg;

/* ToPSync Initial System configuration message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	ToPSyncInitialSystemConfiguration systemConfiguration;
} InitialSystemConfigurationMsg;


/* Unacknowledge print debug message */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool   printTopLine;
	uint16 timeoutPeriod;
	uint32 printPeriodMs;
	uint32 printMask;
	uint8  printFormat;
} DebugPrintUnacknowledgedMsg;

/* Desired Phase Offset Messages.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	sint32 phaseOffset;
} DesiredPhaseLagMsg;

typedef DesiredPhaseLagMsg SetDesiredPhaseLagMsg;
typedef DesiredPhaseLagMsg SetDesiredPhaseLagResponseMsg;
typedef ToPSyncMsgHeader	  GetDesiredPhaseLagMsg;
typedef DesiredPhaseLagMsg GetDesiredPhaseLagResponseMsg;

/* Generic function */
void ReadDesiredPhaseLagMsg(uint8 const **data, DesiredPhaseLagMsg *msg);
void WriteDesiredPhaseLagMsg(uint8 **data, const DesiredPhaseLagMsg *msg);
void ReadSetDesiredPhaseLagMsg(uint8 const **data, SetDesiredPhaseLagMsg *msg);
void WriteSetDesiredPhaseLagResponseMsg(uint8 **data, const SetDesiredPhaseLagResponseMsg *msg);
void WriteGetDesiredPhaseLagResponseMsg(uint8 **data, const GetDesiredPhaseLagResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetDesiredPhaseLagMsg(uint8 **data, const SetDesiredPhaseLagMsg *msg);
void ReadSetDesiredPhaseLagResponseMsg(uint8 const **data, SetDesiredPhaseLagResponseMsg *msg);
void WriteGetDesiredPhaseLagMsg(uint8 **data, const GetDesiredPhaseLagMsg *msg);
void ReadGetDesiredPhaseLagResponseMsg(uint8 const **data, GetDesiredPhaseLagResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetDesiredPhaseLagMsg(uint8 const **data, GetDesiredPhaseLagMsg *msg);
#endif



/* Short Delay Request Rate Messages.
 */
typedef FloatingPointValueMsg SetShortDelayRequestRateMsg;
typedef FloatingPointValueMsg SetShortDelayRequestRateResponseMsg;
typedef ToPSyncMsgHeader	  GetShortDelayRequestRateMsg;
typedef FloatingPointValueMsg GetShortDelayRequestRateResponseMsg;

#ifdef SEMTECH_TARGET
//ade void WriteGetShortDelayRequestRateResponseMsg(uint8 **data, const GetShortDelayRequestRateResponseMsg *msg);
//ade void WriteSetShortDelayRequestRateResponseMsg(uint8 **data, const SetShortDelayRequestRateResponseMsg *msg);
//void ReadGetShortDelayRequestRateMsg(uint8 const **data, GetShortDelayRequestRateMsg *msg);
#else
void WriteSetShortDelayRequestRateMsg(uint8 **data, const SetShortDelayRequestRateMsg *msg);
void ReadSetShortDelayRequestRateResponseMsg(uint8 const **data, SetShortDelayRequestRateResponseMsg *msg);
void WriteGetShortDelayRequestRateMsg(uint8 **data, const GetShortDelayRequestRateMsg *msg);
void ReadGetShortDelayRequestRateResponseMsg(uint8 const **data, GetShortDelayRequestRateResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadSetShortDelayRequestRateMsg(uint8 const **data, SetShortDelayRequestRateMsg *msg);
#endif



/* Short Message Enabled Messages.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool enabled;
} ShortMessageEnabledMsg;

typedef ShortMessageEnabledMsg SetShortMessageEnabledMsg;
typedef ShortMessageEnabledMsg SetShortMessageEnabledResponseMsg;
typedef ToPSyncMsgHeader	   GetShortMessageEnabledMsg;
typedef ShortMessageEnabledMsg GetShortMessageEnabledResponseMsg;

/*generic*/


#ifdef SEMTECH_TARGET
//ade void WriteGetShortMessageEnabledResponseMsg(uint8 **data, const GetShortMessageEnabledResponseMsg *msg);
//void ReadGetShortMessageEnabledMsg(uint8 const **data, GetShortMessageEnabledMsg *msg);
#else
void WriteShortMessageEnabledMsg(uint8 **data, const ShortMessageEnabledMsg *msg);
void ReadShortMessageEnabledMsg(uint8 const **data, ShortMessageEnabledMsg *msg);
void WriteSetShortMessageEnabledMsg(uint8 **data, const SetShortMessageEnabledMsg *msg);
void ReadSetShortMessageEnabledResponseMsg(uint8 const **data, SetShortMessageEnabledResponseMsg *msg);
void WriteGetShortMessageEnabledMsg(uint8 **data, const GetShortMessageEnabledMsg *msg);
void ReadGetShortMessageEnabledResponseMsg(uint8 const **data, GetShortMessageEnabledResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadSetShortMessageEnabledMsg(uint8 const **data, SetShortMessageEnabledMsg *msg);
void WriteSetShortMessageEnabledResponseMsg(uint8 **data, const SetShortMessageEnabledResponseMsg *msg);
#endif





/* TopSync Connectivity messages
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool multicastEnabled;
	uint8 numberOfIpAddresses;
	uint32 ipAddressTable[MAX_UNICAST_TOPSYNCS];
} ToPSyncConnectivityMsg;

typedef ToPSyncConnectivityMsg SetToPSyncConnectivityMsg;
typedef ToPSyncConnectivityMsg SetToPSyncConnectivityResponseMsg;
typedef ToPSyncMsgHeader	   GetToPSyncConnectivityMsg;
typedef ToPSyncConnectivityMsg GetToPSyncConnectivityResponseMsg;

/* Generic */
void ReadToPSyncConnectivityMsg(uint8 const **data, ToPSyncConnectivityMsg *msg);
void WriteToPSyncConnectivityMsg(uint8 **data, const ToPSyncConnectivityMsg *msg);
void ReadSetToPSyncConnectivityMsg(uint8 const **data, SetToPSyncConnectivityMsg *msg);
void WriteSetToPSyncConnectivityResponseMsg(uint8 **data, const SetToPSyncConnectivityResponseMsg *msg);
void WriteGetToPSyncConnectivityResponseMsg(uint8 **data, const GetToPSyncConnectivityResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetToPSyncConnectivityMsg(uint8 **data, const SetToPSyncConnectivityMsg *msg);
void ReadSetToPSyncConnectivityResponseMsg(uint8 const **data, SetToPSyncConnectivityResponseMsg *msg);
void WriteGetToPSyncConnectivityMsg(uint8 **data, const GetToPSyncConnectivityMsg *msg);
void ReadGetToPSyncConnectivityResponseMsg(uint8 const **data, GetToPSyncConnectivityResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetToPSyncConnectivityMsg(uint8 const **data, GetToPSyncConnectivityMsg *msg);
#endif


/*******************************************************************************
 * NEW API MESSAGE SET
 ******************************************************************************/

/********************************
 * Clock Outputs.
 *******************************/

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 clockId;
} GenericClockGetMsg;

void ReadGenericClockGetMsg(uint8 const **data, GenericClockGetMsg *msg);


/* Output Clock Frequency Message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8  output;
	uint32 frequencyInHertz;
} OutputClockFrequencyMsg;

typedef OutputClockFrequencyMsg   SetOutputClockFrequencyMsg;
typedef OutputClockFrequencyMsg   SetOutputClockFrequencyResponseMsg;
typedef GenericClockGetMsg		  GetOutputClockFrequencyMsg;
typedef OutputClockFrequencyMsg   GetOutputClockFrequencyResponseMsg;

/* Generic function */
void ReadOutputClockFrequencyMsg(uint8 const **data, OutputClockFrequencyMsg *msg);
void WriteOutputClockFrequencyMsg(uint8 **data, const OutputClockFrequencyMsg *msg);
void ReadSetOutputClockFrequencyMsg(uint8 const **data, SetOutputClockFrequencyMsg *msg);
void WriteSetOutputClockFrequencyResponseMsg(uint8 **data, const SetOutputClockFrequencyResponseMsg *msg);
void WriteGetOutputClockFrequencyResponseMsg(uint8 **data, const GetOutputClockFrequencyResponseMsg *msg);

#define ReadGetOutputClockFrequencyMsg ReadGenericClockGetMsg

#ifdef SEMTECH_TARGET
#else
void WriteGenericClockGetMsg(uint8 **data, const GenericClockGetMsg *msg);
void WriteSetOutputClockFrequencyMsg(uint8 **data, const SetOutputClockFrequencyMsg *msg);
void ReadSetOutputClockFrequencyResponseMsg(uint8 const **data, SetOutputClockFrequencyResponseMsg *msg);
#define WriteGetOutputClockFrequencyMsg WriteGenericClockGetMsg
void ReadGetOutputClockFrequencyResponseMsg(uint8 const **data, GetOutputClockFrequencyResponseMsg *msg);
#endif




/* Output Clock Frequency Enabled message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	Bool enabled;
} OutputClockFrequencyEnabledMsg;

typedef OutputClockFrequencyEnabledMsg SetOutputClockFrequencyEnabledMsg;
typedef OutputClockFrequencyEnabledMsg SetOutputClockFrequencyEnabledResponseMsg;
typedef GenericClockGetMsg			   GetOutputClockFrequencyEnabledMsg;
typedef OutputClockFrequencyEnabledMsg GetOutputClockFrequencyEnabledResponseMsg;

/* Generic function */
void ReadOutputClockFrequencyEnabledMsg(uint8 const **data, OutputClockFrequencyEnabledMsg *msg);
void WriteOutputClockFrequencyEnabledMsg(uint8 **data, const OutputClockFrequencyEnabledMsg *msg);
void ReadSetOutputClockFrequencyEnabledMsg(uint8 const **data, SetOutputClockFrequencyEnabledMsg *msg);
void WriteSetOutputClockFrequencyEnabledResponseMsg(uint8 **data, const SetOutputClockFrequencyEnabledResponseMsg *msg);
void WriteGetOutputClockFrequencyEnabledResponseMsg(uint8 **data, const GetOutputClockFrequencyEnabledResponseMsg *msg);

#define ReadGetOutputClockFrequencyEnabledMsg ReadGenericClockGetMsg

#ifdef SEMTECH_TARGET
#else
void WriteSetOutputClockFrequencyEnabledMsg(uint8 **data, const SetOutputClockFrequencyEnabledMsg *msg);
void ReadSetOutputClockFrequencyEnabledResponseMsg(uint8 const **data, SetOutputClockFrequencyEnabledResponseMsg *msg);
#define WriteGetOutputClockFrequencyEnabledMsg WriteGenericClockGetMsg
void ReadGetOutputClockFrequencyEnabledResponseMsg(uint8 const **data, GetOutputClockFrequencyEnabledResponseMsg *msg);
#endif



/* 1PPS Output Clock Enabled Message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	Bool  enabled;
} OnePPSClockEnabledMsg;

typedef OnePPSClockEnabledMsg		SetOnePPSOutputClockEnabledMsg;
typedef OnePPSClockEnabledMsg		SetOnePPSOutputClockEnabledResponseMsg;
typedef GenericClockGetMsg			GetOnePPSOutputClockEnabledMsg;
typedef OnePPSClockEnabledMsg		GetOnePPSOutputClockEnabledResponseMsg;

/* Generic function */
void ReadOnePPSClockEnabledMsg(uint8 const **data, OnePPSClockEnabledMsg *msg);
void WriteOnePPSClockEnabledMsg(uint8 **data, const OnePPSClockEnabledMsg *msg);
#define ReadSetOnePPSOutputClockEnabledMsg ReadOnePPSClockEnabledMsg
#define WriteSetOnePPSOutputClockEnabledResponseMsg WriteOnePPSClockEnabledMsg
#define ReadGetOnePPSOutputClockEnabledMsg ReadGenericClockGetMsg
#define WriteGetOnePPSOutputClockEnabledResponseMsg WriteOnePPSClockEnabledMsg

#ifdef SEMTECH_TARGET
#else
#define WriteSetOnePPSOutputClockEnabledMsg WriteOnePPSClockEnabledMsg
#define ReadSetOnePPSOutputClockEnabledResponseMsg ReadOnePPSClockEnabledMsg
#define WriteGetOnePPSOutputClockEnabledMsg WriteGenericClockGetMsg
#define ReadGetOnePPSOutputClockEnabledResponseMsg ReadOnePPSClockEnabledMsg
#endif



/* 1PPS Output Clock Pulse Width message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	uint32 pulseWidth;
} OnePPSOutputClockPulseWidthMsg;

typedef OnePPSOutputClockPulseWidthMsg SetOnePPSOutputClockPulseWidthMsg;
typedef OnePPSOutputClockPulseWidthMsg SetOnePPSOutputClockPulseWidthResponseMsg;
typedef GenericClockGetMsg			   GetOnePPSOutputClockPulseWidthMsg;
typedef OnePPSOutputClockPulseWidthMsg GetOnePPSOutputClockPulseWidthResponseMsg;

/* Generic function */
void ReadOnePPSOutputClockPulseWidthMsg(uint8 const **data, OnePPSOutputClockPulseWidthMsg *msg);
void WriteOnePPSOutputClockPulseWidthMsg(uint8 **data, const OnePPSOutputClockPulseWidthMsg *msg);
void ReadSetOnePPSOutputClockPulseWidthMsg(uint8 const **data, SetOnePPSOutputClockPulseWidthMsg *msg);
void WriteSetOnePPSOutputClockPulseWidthResponseMsg(uint8 **data, const SetOnePPSOutputClockPulseWidthResponseMsg *msg);
void WriteGetOnePPSOutputClockPulseWidthResponseMsg(uint8 **data, const GetOnePPSOutputClockPulseWidthResponseMsg *msg);

#define ReadGetOnePPSOutputClockPulseWidthMsg ReadGenericClockGetMsg


#ifdef SEMTECH_TARGET
#else
void WriteSetOnePPSOutputClockPulseWidthMsg(uint8 **data, const SetOnePPSOutputClockPulseWidthMsg *msg);
void ReadSetOnePPSOutputClockPulseWidthResponseMsg(uint8 const **data, SetOnePPSOutputClockPulseWidthResponseMsg *msg);
#define WriteGetOnePPSOutputClockPulseWidthMsg WriteGenericClockGetMsg
void ReadGetOnePPSOutputClockPulseWidthResponseMsg(uint8 const **data, GetOnePPSOutputClockPulseWidthResponseMsg *msg);
#endif




/* Phase Aligned Output Clock Frequency Message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	uint32 divisor;
} SetPhaseAlignedOutputClockFreqMsg;
typedef SetPhaseAlignedOutputClockFreqMsg SetPhaseAlignedOutputClockFreqResponseMsg;

typedef GenericClockGetMsg GetPhaseAlignedOutputClockFreqMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	uint32 divisor;
	uint32 frequencyInHertz;
} GetPhaseAlignedOutputClockFreqResponseMsg;

void ReadSetPhaseAlignedOutputClockFreqMsg(uint8 const **data, SetPhaseAlignedOutputClockFreqMsg *msg);
void WriteSetPhaseAlignedOutputClockFreqMsg(uint8 **data, const SetPhaseAlignedOutputClockFreqMsg *msg);
void WriteSetPhaseAlignedOutputClockFreqResponseMsg(uint8 **data, const SetPhaseAlignedOutputClockFreqResponseMsg *msg);
#define ReadGetPhaseAlignedOutputClockFreqMsg ReadGenericClockGetMsg
void WriteGetPhaseAlignedOutputClockFreqResponseMsg(uint8 **data, const GetPhaseAlignedOutputClockFreqResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadSetPhaseAlignedOutputClockFreqResponseMsg(uint8 const **data, SetPhaseAlignedOutputClockFreqResponseMsg *msg);
#define WriteGetPhaseAlignedOutputClockFreqMsg WriteGenericClockGetMsg
void ReadGetPhaseAlignedOutputClockFreqResponseMsg(uint8 const **data, GetPhaseAlignedOutputClockFreqResponseMsg *msg);
#endif




/* TOD output configuration message */
/* Generics first */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	uint8 uart;
} GetTODConfigurationMsg;

//generic
void ReadGetTODConfigurationMsg(uint8 const **data, GetTODConfigurationMsg *msg);
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	uint8 uart;
	Bool enabled;
	TODTimeCode timeCode;
	UartBaudRate baudRate;
} GenericTODConfigurationMsg;

typedef GenericTODConfigurationMsg GetTODConfigurationResponseMsg;
typedef GenericTODConfigurationMsg SetTODConfigurationMsg;
typedef GenericTODConfigurationMsg SetTODConfigurationResponseMsg;

//generic
void ReadGenericTODConfigurationMsg(uint8 const **data, GenericTODConfigurationMsg *msg);
void WriteGenericTODConfigurationMsg(uint8 **data, const GenericTODConfigurationMsg *msg);
#define WriteGetTODConfigurationResponseMsg WriteGenericTODConfigurationMsg
#define ReadSetTODConfigurationMsg ReadGenericTODConfigurationMsg
#define WriteSetTODConfigurationResponseMsg WriteGenericTODConfigurationMsg

#ifdef SEMTECH_TARGET
#else
void WriteGetTODConfigurationMsg(uint8 **data, const GetTODConfigurationMsg *msg);
#define ReadGetTODConfigurationResponseMsg ReadGenericTODConfigurationMsg
#define WriteSetTODConfigurationMsg WriteGenericTODConfigurationMsg
#define ReadSetTODConfigurationResponseMsg ReadGenericTODConfigurationMsg
#endif



/* TOD Outputs */
typedef GetTODConfigurationMsg GetTODOutputConfigurationMsg;
typedef GetTODConfigurationResponseMsg GetTODOutputConfigurationResponseMsg;

typedef SetTODConfigurationMsg SetTODOutputConfigurationMsg;
typedef SetTODConfigurationResponseMsg SetTODOutputConfigurationResponseMsg;

#define ReadGetTODOutputConfigurationMsg ReadGetTODConfigurationMsg
#define WriteGetTODOutputConfigurationResponseMsg WriteGetTODConfigurationResponseMsg
#define ReadSetTODOutputConfigurationMsg ReadSetTODConfigurationMsg
#define WriteSetTODOutputConfigurationResponseMsg WriteSetTODConfigurationResponseMsg

#ifdef SEMTECH_TARGET
#else
#define WriteGetTODOutputConfigurationMsg WriteGetTODConfigurationMsg
#define ReadGetTODOutputConfigurationResponseMsg ReadGetTODConfigurationResponseMsg
#define WriteSetTODOutputConfigurationMsg WriteSetTODConfigurationMsg
#define ReadSetTODOutputConfigurationResponseMsg ReadSetTODConfigurationResponseMsg
#endif



/* Set/Get output period*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	uint8 outputPeriod;
} PPSOutputPeriodMsg;

//generic
void ReadPPSOutputPeriodMsg(uint8 const **data, PPSOutputPeriodMsg *msg);
void WritePPSOutputPeriodMsg(uint8 **data, const PPSOutputPeriodMsg *msg);

typedef PPSOutputPeriodMsg SetPPSOutputPeriodMsg;
typedef PPSOutputPeriodMsg SetPPSOutputPeriodResponseMsg;
typedef PPSOutputPeriodMsg GetPPSOutputPeriodResponseMsg;

#define ReadSetPPSOutputPeriodMsg ReadPPSOutputPeriodMsg
#define WriteSetPPSOutputPeriodResponseMsg WritePPSOutputPeriodMsg
#define WriteGetPPSOutputPeriodResponseMsg WritePPSOutputPeriodMsg

#ifdef SEMTECH_TARGET
#else
#define WriteSetPPSOutputPeriodMsg WritePPSOutputPeriodMsg
#define ReadSetPPSOutputPeriodResponseMsg ReadPPSOutputPeriodMsg
#define ReadGetPPSOutputPeriodResponseMsg ReadPPSOutputPeriodMsg
#endif






typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
} GetPPSOutputPeriodMsg;

/* Set/Get output source*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
	PLLid source;
} PPSOutputSourceMsg;

//generic
void ReadPPSOutputSourceMsg(uint8 const **data, PPSOutputSourceMsg *msg);
void WritePPSOutputSourceMsg(uint8 **data, const PPSOutputSourceMsg *msg);

typedef PPSOutputSourceMsg SetPPSOutputSourceMsg;
typedef PPSOutputSourceMsg SetPPSOutputSourceResponseMsg;
typedef PPSOutputSourceMsg GetPPSOutputSourceResponseMsg;
#define ReadSetPPSOutputSourceMsg ReadPPSOutputSourceMsg
#define WriteSetPPSOutputSourceResponseMsg WritePPSOutputSourceMsg
#define WriteGetPPSOutputSourceResponseMsg WritePPSOutputSourceMsg
void ReadGetPPSOutputPeriodMsg(uint8 const **data, GetPPSOutputPeriodMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetPPSOutputPeriodMsg(uint8 **data, const GetPPSOutputPeriodMsg *msg);
#define ReadSetPPSOutputSourceResponseMsg ReadPPSOutputSourceMsg
#define ReadGetPPSOutputSourceResponseMsg ReadPPSOutputSourceMsg
#define WriteSetPPSOutputSourceMsg WritePPSOutputSourceMsg
#endif





typedef struct
{
	ToPSyncMsgHeader header;
	uint8 output;
} GetPPSOutputSourceMsg;
void ReadGetPPSOutputSourceMsg(uint8 const **data, GetPPSOutputSourceMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetPPSOutputSourceMsg(uint8 **data, const GetPPSOutputSourceMsg *msg);
#endif





/*
 * Clock inputs
 */

/* TOD inputs */
typedef GetTODConfigurationMsg GetTODInputConfigurationMsg;
typedef GetTODConfigurationResponseMsg GetTODInputConfigurationResponseMsg;

typedef SetTODConfigurationMsg SetTODInputConfigurationMsg;
typedef SetTODConfigurationResponseMsg SetTODInputConfigurationResponseMsg;

#define ReadSetTODInputConfigurationMsg ReadSetTODConfigurationMsg
#define WriteSetTODInputConfigurationResponseMsg WriteSetTODConfigurationResponseMsg
#define ReadGetTODInputConfigurationMsg ReadGetTODConfigurationMsg
#define WriteGetTODInputConfigurationResponseMsg WriteGetTODConfigurationResponseMsg

#ifdef SEMTECH_TARGET
#else
#define WriteGetTODInputConfigurationMsg WriteGetTODConfigurationMsg
#define ReadGetTODInputConfigurationResponseMsg ReadGetTODConfigurationResponseMsg
#define WriteSetTODInputConfigurationMsg WriteSetTODConfigurationMsg
#define ReadSetTODInputConfigurationResponseMsg ReadSetTODConfigurationResponseMsg
#endif




/* TOD input status */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 uart;
}GetTODInputStatusMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 uart;
	TODInputStatus status;
}GetTODInputStatusResponseMsg;

void ReadGetTODInputStatusMsg(uint8 const **data, GetTODInputStatusMsg *msg);
void WriteGetTODInputStatusResponseMsg(uint8 **data, const GetTODInputStatusResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetTODInputStatusMsg(uint8 **data, const GetTODInputStatusMsg *msg);
void ReadGetTODInputStatusResponseMsg(uint8 const **data, GetTODInputStatusResponseMsg *msg);
#endif




/* UTC offset and leap seconds messages */
typedef GenericClockGetMsg	GetUTCOffsetMsg;
#define ReadGetUTCOffsetMsg ReadGenericClockGetMsg

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	sint16 utcOffset;
	Bool isValid;
}GenericUTCOffsetMsg;

//generic
void ReadGenericUTCOffsetMsg(uint8 const **data, GenericUTCOffsetMsg *msg);
void WriteGenericUTCOffsetMsg(uint8 **data, const GenericUTCOffsetMsg *msg);

typedef GenericUTCOffsetMsg GetUTCOffsetResponseMsg;
typedef GenericUTCOffsetMsg SetUTCOffsetMsg;
typedef GenericUTCOffsetMsg SetUTCOffsetResponseMsg;
#define ReadSetUTCOffsetMsg ReadGenericUTCOffsetMsg
#define WriteSetUTCOffsetResponseMsg WriteGenericUTCOffsetMsg
#define WriteGetUTCOffsetResponseMsg WriteGenericUTCOffsetMsg


#ifdef SEMTECH_TARGET
#else
#define WriteGetUTCOffsetMsg WriteGenericClockGetMsg
#define WriteSetUTCOffsetMsg WriteGenericUTCOffsetMsg
#define ReadSetUTCOffsetResponseMsg ReadGenericUTCOffsetMsg
#define ReadGetUTCOffsetResponseMsg ReadGenericUTCOffsetMsg
#endif




typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	Bool set;
	uint16 daysToLeapSecond;
	Bool positive;
}GenericImpendingLeapSecondMsg;

typedef GenericImpendingLeapSecondMsg SetImpendingLeapSecondMsg;
typedef GenericImpendingLeapSecondMsg SetImpendingLeapSecondResponseMsg;
typedef GenericClockGetMsg	GetDaysToLeapSecondMsg;

//generic
void ReadGenericImpendingLeapSecondMsg(uint8 const **data, GenericImpendingLeapSecondMsg *msg);
void WriteGenericImpendingLeapSecondMsg(uint8 **data, const GenericImpendingLeapSecondMsg *msg);
#define ReadSetImpendingLeapSecondMsg			ReadGenericImpendingLeapSecondMsg
#define WriteSetImpendingLeapSecondResponseMsg	WriteGenericImpendingLeapSecondMsg
#define ReadGetDaysToLeapSecondMsg ReadGenericClockGetMsg


#ifdef SEMTECH_TARGET
#else
#define WriteSetImpendingLeapSecondMsg			WriteGenericImpendingLeapSecondMsg
#define ReadSetImpendingLeapSecondResponseMsg	ReadGenericImpendingLeapSecondMsg
#define WriteGetDaysToLeapSecondMsg WriteGenericClockGetMsg
#endif

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 onePPS;
	sint16 daysToLeapSecond;   //-1 indicates no leap second is expected
	Bool positive;
}GetDaysToLeapSecondResponseMsg;

void WriteGetDaysToLeapSecondResponseMsg(uint8 **data, const GetDaysToLeapSecondResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void ReadGetDaysToLeapSecondResponseMsg(uint8 const **data, GetDaysToLeapSecondResponseMsg *msg);
#endif




/*get leap second node*/
typedef ToPSyncMsgHeader GetDaysToLeapSecondNodeMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	sint16 daysToLeapSecond;
	Bool positive;
}GetDaysToLeapSecondNodeResponseMsg;


void ReadGetDaysToLeapSecondNodeMsg(uint8 const **data, GetDaysToLeapSecondNodeMsg *msg);
void WriteGetDaysToLeapSecondNodeResponseMsg(uint8 **data, const GetDaysToLeapSecondNodeResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetDaysToLeapSecondNodeMsg(uint8 **data, const GetDaysToLeapSecondNodeMsg *msg);
void ReadGetDaysToLeapSecondNodeResponseMsg(uint8 const **data, GetDaysToLeapSecondNodeResponseMsg *msg);
#endif



//get leap second source
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
}GetDaysToLeapSecondSourceMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	sint16 daysToLeapSecond;
	Bool positive;
}GetDaysToLeapSecondSourceResponseMsg;


void ReadGetDaysToLeapSecondSourceMsg(uint8 const **data,GetDaysToLeapSecondSourceMsg *msg);
void WriteGetDaysToLeapSecondSourceResponseMsg(uint8 **data, const GetDaysToLeapSecondSourceResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetDaysToLeapSecondSourceMsg(uint8 **data, const GetDaysToLeapSecondSourceMsg *msg);
void ReadGetDaysToLeapSecondSourceResponseMsg(uint8 const **data, GetDaysToLeapSecondSourceResponseMsg *msg);
#endif









/* clock inputs */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpInputClock;
}GenericPtpInputClockMsg;

//generic
void ReadGenericPtpInputClockMsg(uint8 const **data, GenericPtpInputClockMsg *msg);
void WriteGenericPtpInputClockMsg(uint8 **data, const GenericPtpInputClockMsg *msg);

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpInputClock;
	uint32 frequencyInHertz;
}SetPtpInputClockFrequencyMsg;

#define SetPtpInputClockFrequencyResponseMsg SetPtpInputClockFrequencyMsg
#define GetPtpInputClockFrequencyMsg GenericPtpInputClockMsg
#define GetPtpInputClockFrequencyResponseMsg SetPtpInputClockFrequencyMsg
#define WriteSetPtpInputClockFrequencyResponseMsg WriteSetPtpInputClockFrequencyMsg
#define ReadGetPtpInputClockFrequencyMsg ReadGenericPtpInputClockMsg
#define WriteGetPtpInputClockFrequencyResponseMsg WriteSetPtpInputClockFrequencyMsg

/*generic*/
void ReadSetPtpInputClockFrequencyMsg(uint8 const **data, SetPtpInputClockFrequencyMsg *msg);
void WriteSetPtpInputClockFrequencyMsg(uint8 **data, const SetPtpInputClockFrequencyMsg *msg);

#ifdef SEMTECH_TARGET
#define WriteGenericPtpInputClockResponseMsg WriteGenericPtpInputClockMsg
#else
#define ReadGenericPtpInputClockResponseMsg ReadGenericPtpInputClockMsg
#define ReadSetPtpInputClockFrequencyResponseMsg ReadSetPtpInputClockFrequencyMsg
#define WriteGetPtpInputClockFrequencyMsg WriteGenericPtpInputClockMsg
#define ReadGetPtpInputClockFrequencyResponseMsg ReadSetPtpInputClockFrequencyMsg
#endif




/*SetPtpInputClockEnabledMsg*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpInputClock;
	Bool enabled;
}SetPtpInputClockEnabledMsg;

#define SetPtpInputClockEnabledResponseMsg SetPtpInputClockEnabledMsg
#define GetPtpInputClockEnabledMsg GenericPtpInputClockMsg
#define GetPtpInputClockEnabledResponseMsg SetPtpInputClockEnabledMsg
#define SetPtpInputClockSelectedResponseMsg SetPtpInputClockSelectedMsg
#define WriteSetPtpInputClockEnabledResponseMsg WriteSetPtpInputClockEnabledMsg
#define ReadGetPtpInputClockEnabledMsg ReadGenericPtpInputClockMsg
#define WriteGetPtpInputClockEnabledResponseMsg WriteSetPtpInputClockEnabledMsg
#define ReadSetPtpInputClockSelectedMsg ReadGenericPtpInputClockMsg
#define WriteSetPtpInputClockSelectedResponseMsg WriteGenericPtpInputClockMsg

typedef GenericPtpInputClockMsg SetPtpInputClockSelectedMsg;

/* generic */
void ReadSetPtpInputClockEnabledMsg(uint8 const **data, SetPtpInputClockEnabledMsg *msg);
void WriteSetPtpInputClockEnabledMsg(uint8 **data, const SetPtpInputClockEnabledMsg *msg);

#ifdef SEMTECH_TARGET
#else
#define ReadSetPtpInputClockEnabledResponseMsg ReadSetPtpInputClockEnabledMsg
#define WriteGetPtpInputClockEnabledMsg WriteGenericPtpInputClockMsg
#define ReadGetPtpInputClockEnabledResponseMsg ReadSetPtpInputClockEnabledMsg
#define WriteSetPtpInputClockSelectedMsg WriteGenericPtpInputClockMsg
#define ReadSetPtpInputClockSelectedResponseMsg ReadGenericPtpInputClockMsg
#endif


/*get ptp input selected*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpInputClock;
	Bool enabled;
}GetPtpInputClockSelectedResponseMsg;


#define GetPtpInputClockSelectedMsg ToPSyncMsgHeader
#define ReadGetPtpInputClockSelectedMsg ReadToPSyncMessageHeader
void WriteGetPtpInputClockSelectedResponseMsg(uint8 **data, const GetPtpInputClockSelectedResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
#define WriteGetPtpInputClockSelectedMsg WriteToPSyncMessageHeader
void ReadGetPtpInputClockSelectedResponseMsg(uint8 const **data, GetPtpInputClockSelectedResponseMsg *msg);
#endif


/* Get External Interfaces message.
 */
typedef ToPSyncMsgHeader GetExternalInterfacesMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 numberOfExternalInterfaces;
	ExternalInterface externalInterfaces[MAXIMUM_EXTERNAL_INTERFACES];
} GetExternalInterfacesResponseMsg;

void ReadGetExternalInterfacesMsg(uint8 const **data, GetExternalInterfacesMsg *msg);
void WriteGetExternalInterfacesResponseMsg(uint8 **data, const GetExternalInterfacesResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetExternalInterfacesMsg(uint8 **data, const GetExternalInterfacesMsg *msg);
void ReadGetExternalInterfacesResponseMsg(uint8 const **data, GetExternalInterfacesResponseMsg *msg);
#endif






/* Reset Network Interface statistics message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	ResetStatisticsMask mask;
} ResetNetworkInterfaceStatisticsMsg;
typedef ResetNetworkInterfaceStatisticsMsg ResetNetworkInterfaceStatisticsResponseMsg;
void ReadResetNetworkInterfaceStatisticsMsg(uint8 const **data, ResetNetworkInterfaceStatisticsMsg *msg);
void WriteResetNetworkInterfaceStatisticsMsg(uint8 **data, const ResetNetworkInterfaceStatisticsMsg *msg);
void WriteResetNetworkInterfaceStatisticsResponseMsg(uint8 **data, const ResetNetworkInterfaceStatisticsResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void ReadResetNetworkInterfaceStatisticsResponseMsg(uint8 const **data, ResetNetworkInterfaceStatisticsResponseMsg *msg);
#endif



/* Default Ethernet MAC Address Message
 */
typedef GetEthernetMacAddressMsg		 GetDefaultEthernetMacAddressMsg;
typedef GetEthernetMacAddressResponseMsg GetDefaultEthernetMacAddressResponseMsg;
void ReadGetDefaultEthernetMacAddressMsg(uint8 const **data, GetDefaultEthernetMacAddressMsg *msg);
void WriteGetDefaultEthernetMacAddressResponseMsg(uint8 **data, const GetDefaultEthernetMacAddressResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetDefaultEthernetMacAddressMsg(uint8 **data, const GetDefaultEthernetMacAddressMsg *msg);
void ReadGetDefaultEthernetMacAddressResponseMsg(uint8 const **data, GetDefaultEthernetMacAddressResponseMsg *msg);
#endif




/* Default MDIO Link Availability
 */
typedef GenericExternalInterfacesGetMsg GetMDIOLinkAvailabilityMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool  mdioIsAvailable;
} GetMDIOLinkAvailabilityResponseMsg;

void ReadGetMDIOLinkAvailabilityMsg(uint8 const **data, GetMDIOLinkAvailabilityMsg *msg);
void WriteGetMDIOLinkAvailabilityResponseMsg(uint8 **data, const GetMDIOLinkAvailabilityResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetMDIOLinkAvailabilityMsg(uint8 **data, const GetMDIOLinkAvailabilityMsg *msg);
void ReadGetMDIOLinkAvailabilityResponseMsg(uint8 const **data, GetMDIOLinkAvailabilityResponseMsg *msg);
#endif



/* Ethernet Link Speed and Duplex Mode.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	LinkSpeedDuplexMode linkSpeedDuplexMode;
} EthernetLinkSpeedAndDuplexModeMsg;

typedef EthernetLinkSpeedAndDuplexModeMsg SetEthernetLinkSpeedAndDuplexModeMsg;
typedef EthernetLinkSpeedAndDuplexModeMsg SetEthernetLinkSpeedAndDuplexModeResponseMsg;
typedef GenericExternalInterfacesGetMsg   GetEthernetLinkSpeedAndDuplexModeMsg;
typedef EthernetLinkSpeedAndDuplexModeMsg GetEthernetLinkSpeedAndDuplexModeResponseMsg;

/* Generic function */
void ReadEthernetLinkSpeedAndDuplexModeMsg(uint8 const **data, EthernetLinkSpeedAndDuplexModeMsg *msg);
void WriteEthernetLinkSpeedAndDuplexModeMsg(uint8 **data, const EthernetLinkSpeedAndDuplexModeMsg *msg);

void ReadSetEthernetLinkSpeedAndDuplexModeMsg(uint8 const **data, SetEthernetLinkSpeedAndDuplexModeMsg *msg);
void WriteSetEthernetLinkSpeedAndDuplexModeResponseMsg(uint8 **data, const SetEthernetLinkSpeedAndDuplexModeResponseMsg *msg);
void ReadGetEthernetLinkSpeedAndDuplexModeMsg(uint8 const **data, GetEthernetLinkSpeedAndDuplexModeMsg *msg);
void WriteGetEthernetLinkSpeedAndDuplexModeResponseMsg(uint8 **data, const GetEthernetLinkSpeedAndDuplexModeResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetEthernetLinkSpeedAndDuplexModeMsg(uint8 **data, const SetEthernetLinkSpeedAndDuplexModeMsg *msg);
void ReadSetEthernetLinkSpeedAndDuplexModeResponseMsg(uint8 const **data, SetEthernetLinkSpeedAndDuplexModeResponseMsg *msg);
void WriteGetEthernetLinkSpeedAndDuplexModeMsg(uint8 **data, const GetEthernetLinkSpeedAndDuplexModeMsg *msg);
void ReadGetEthernetLinkSpeedAndDuplexModeResponseMsg(uint8 const **data, GetEthernetLinkSpeedAndDuplexModeResponseMsg *msg);
#endif





/* Restart Auto-negotiation message.
 */
typedef GenericExternalInterfacesGetMsg RestartAutonegotiationMsg;
typedef GenericExternalInterfacesGetMsg RestartAutonegotiationResponseMsg;

void ReadRestartAutonegotiationMsg(uint8 const **data, RestartAutonegotiationMsg *msg);
void WriteRestartAutonegotiationResponseMsg(uint8 **data, const RestartAutonegotiationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteRestartAutonegotiationMsg(uint8 **data, const RestartAutonegotiationMsg *msg);
void ReadRestartAutonegotiationResponseMsg(uint8 const **data, RestartAutonegotiationResponseMsg *msg);
#endif




/* Ethernet Interface enabled.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool  enabled;
} EthernetInterfaceEnabledMsg;

typedef EthernetInterfaceEnabledMsg SetEthernetInterfaceEnabledMsg;
typedef EthernetInterfaceEnabledMsg SetEthernetInterfaceEnabledResponseMsg;

/* Generic functions */
void ReadEthernetInterfaceEnabledMsg(uint8 const **data, EthernetInterfaceEnabledMsg *msg);
void WriteEthernetInterfaceEnabledMsg(uint8 **data, const EthernetInterfaceEnabledMsg *msg);
void ReadSetEthernetInterfaceEnabledMsg(uint8 const **data, SetEthernetInterfaceEnabledMsg *msg);
void WriteSetEthernetInterfaceEnabledResponseMsg(uint8 **data, const SetEthernetInterfaceEnabledResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetEthernetInterfaceEnabledMsg(uint8 **data, const SetEthernetInterfaceEnabledMsg *msg);
void ReadSetEthernetInterfaceEnabledResponseMsg(uint8 const **data, SetEthernetInterfaceEnabledResponseMsg *msg);
#endif





/* Ethernet Link Status
 */
typedef GenericExternalInterfacesGetMsg GetEthernetLinkStatusMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
	Bool linkUpState;
	LinkSpeedDuplexMode linkSpeedDuplexMode;
} GetEthernetLinkStatusResponseMsg;

void ReadGetEthernetLinkStatusMsg(uint8 const **data, GetEthernetLinkStatusMsg *msg);
void WriteGetEthernetLinkStatusResponseMsg(uint8 **data, const GetEthernetLinkStatusResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetEthernetLinkStatusMsg(uint8 **data, const GetEthernetLinkStatusMsg *msg);
void ReadGetEthernetLinkStatusResponseMsg(uint8 const **data, GetEthernetLinkStatusResponseMsg *msg);
#endif




/* Mac Address Filtering Enabled message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
} MacAddressFilteringEnabledMsg;

typedef MacAddressFilteringEnabledMsg	SetMacAddressFilteringEnabledMsg;
typedef MacAddressFilteringEnabledMsg	SetMacAddressFilteringEnabledResponseMsg;
typedef GenericExternalInterfacesGetMsg GetMacAddressFilteringEnabledMsg;
typedef MacAddressFilteringEnabledMsg	GetMacAddressFilteringEnabledResponseMsg;

/* Generic functions */
void ReadMacAddressFilteringEnabledMsg(uint8 const **data, MacAddressFilteringEnabledMsg *msg);
void WriteMacAddressFilteringEnabledMsg(uint8 **data, const MacAddressFilteringEnabledMsg *msg);

void ReadSetMacAddressFilteringEnabledMsg(uint8 const **data, SetMacAddressFilteringEnabledMsg *msg);
void WriteSetMacAddressFilteringEnabledResponseMsg(uint8 **data, const SetMacAddressFilteringEnabledResponseMsg *msg);
void ReadGetMacAddressFilteringEnabledMsg(uint8 const **data, GetMacAddressFilteringEnabledMsg *msg);
void WriteGetMacAddressFilteringEnabledResponseMsg(uint8 **data, const GetMacAddressFilteringEnabledResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetMacAddressFilteringEnabledMsg(uint8 **data, const SetMacAddressFilteringEnabledMsg *msg);
void ReadSetMacAddressFilteringEnabledResponseMsg(uint8 const **data, SetMacAddressFilteringEnabledResponseMsg *msg);
void WriteGetMacAddressFilteringEnabledMsg(uint8 **data, const GetMacAddressFilteringEnabledMsg *msg);
void ReadGetMacAddressFilteringEnabledResponseMsg(uint8 const **data, GetMacAddressFilteringEnabledResponseMsg *msg);
#endif




/* Permitted Mac Addresses message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	uint8 numberOfMacAddresses;
	EthernetAddress macAddresses[MAX_PERMITTED_MAC_ADDRESSES];
} PermittedMacAddressesMsg;

typedef PermittedMacAddressesMsg SetPermittedMacAddressesMsg;
typedef PermittedMacAddressesMsg SetPermittedMacAddressesResponseMsg;
typedef GenericExternalInterfacesGetMsg  GetPermittedMacAddressesMsg;
typedef PermittedMacAddressesMsg GetPermittedMacAddressesResponseMsg;

/* Generic functions */
void ReadPermittedMacAddressesMsg(uint8 const **data, PermittedMacAddressesMsg *msg);
void WritePermittedMacAddressesMsg(uint8 **data, const PermittedMacAddressesMsg *msg);

void ReadSetPermittedMacAddressesMsg(uint8 const **data, SetPermittedMacAddressesMsg *msg);
void WriteSetPermittedMacAddressesResponseMsg(uint8 **data, const SetPermittedMacAddressesResponseMsg *msg);
void ReadGetPermittedMacAddressesMsg(uint8 const **data, GetPermittedMacAddressesMsg *msg);
void WriteGetPermittedMacAddressesResponseMsg(uint8 **data, const GetPermittedMacAddressesResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetPermittedMacAddressesMsg(uint8 **data, const SetPermittedMacAddressesMsg *msg);
void ReadSetPermittedMacAddressesResponseMsg(uint8 const **data, SetPermittedMacAddressesResponseMsg *msg);
void WriteGetPermittedMacAddressesMsg(uint8 **data, const GetPermittedMacAddressesMsg *msg);
void ReadGetPermittedMacAddressesResponseMsg(uint8 const **data, GetPermittedMacAddressesResponseMsg *msg);
#endif




/* Ethernet Statistics message.
 */
typedef GenericExternalInterfacesGetMsg GetEthernetInterfaceStatisticsMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	EthernetInterfaceStatistics statistics;
} GetEthernetInterfaceStatisticsResponseMsg;

void ReadGetEthernetInterfaceStatisticsMsg(uint8 const **data, GetEthernetInterfaceStatisticsMsg *msg);
void WriteGetEthernetInterfaceStatisticsResponseMsg(uint8 **data, const GetEthernetInterfaceStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetEthernetInterfaceStatisticsMsg(uint8 **data, const GetEthernetInterfaceStatisticsMsg *msg);
void ReadGetEthernetInterfaceStatisticsResponseMsg(uint8 const **data, GetEthernetInterfaceStatisticsResponseMsg *msg);
#endif



/* Set/Get MDIO Data
*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	uint8 phyAddr;
	uint8 reg;
	uint16 data;
} MDIOData;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	uint8 phyAddr;
	uint8 reg;
} GetMDIOData;

typedef MDIOData SetMDIODataMsg;
typedef MDIOData SetMDIODataResponseMsg;
typedef GetMDIOData GetMDIODataMsg;
typedef MDIOData GetMDIODataResponseMsg;

/* Generic functions */
void ReadMDIODataMsg(uint8 const **data, MDIOData *msg);
void WriteMDIODataMsg(uint8 **data, const MDIOData *msg);
void ReadGetMDIODataMsg(uint8 const **data, GetMDIOData *msg);
#define ReadSetMDIODataMsg	ReadMDIODataMsg
#define WriteSetMDIODataResponseMsg WriteMDIODataMsg
#define WriteGetMDIODataResponseMsg WriteMDIODataMsg

#ifdef SEMTECH_TARGET
#else
void WriteGetMDIODataMsg(uint8 **data, const GetMDIOData *msg);
#define WriteSetMDIODataMsg WriteMDIODataMsg
#define ReadSetMDIODataResponseMsg ReadMDIODataMsg
#define ReadGetMDIODataResponseMsg ReadMDIODataMsg
#endif



/****************************
 * Ethernet Packet Interfaces
 ****************************/

/* Add Ethernet Packet Interface message.
 */
typedef GenericExternalInterfacesGetMsg AddEthernetPacketInterfaceMsg;
typedef GenericExternalInterfacesGetMsg AddEthernetPacketInterfaceResponseMsg;


/* Delete Ethernet Packet Interface message.
 */
typedef GenericExternalInterfacesGetMsg DeleteEthernetPacketInterfaceMsg;
typedef GenericExternalInterfacesGetMsg DeleteEthernetPacketInterfaceResponseMsg;

void ReadAddEthernetPacketInterfaceMsg(uint8 const **data, AddEthernetPacketInterfaceMsg *msg);
void WriteAddEthernetPacketInterfaceResponseMsg(uint8 **data, const AddEthernetPacketInterfaceResponseMsg *msg);
void ReadDeleteEthernetPacketInterfaceMsg(uint8 const **data, DeleteEthernetPacketInterfaceMsg *msg);
void WriteDeleteEthernetPacketInterfaceResponseMsg(uint8 **data, const DeleteEthernetPacketInterfaceResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteAddEthernetPacketInterfaceMsg(uint8 **data, const AddEthernetPacketInterfaceMsg *msg);
void ReadAddEthernetPacketInterfaceResponseMsg(uint8 const **data, AddEthernetPacketInterfaceResponseMsg *msg);
void WriteDeleteEthernetPacketInterfaceMsg(uint8 **data, const DeleteEthernetPacketInterfaceMsg *msg);
void ReadDeleteEthernetPacketInterfaceResponseMsg(uint8 const **data, DeleteEthernetPacketInterfaceResponseMsg *msg);
#endif




/* Ethernet Packet Interface Enabled message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
} EthernetPacketInterfaceEnabledMsg;

typedef EthernetPacketInterfaceEnabledMsg SetEthernetPacketInterfaceEnabledMsg;
typedef EthernetPacketInterfaceEnabledMsg SetEthernetPacketInterfaceEnabledResponseMsg;

/* Generic functions */
void ReadEthernetPacketInterfaceEnabledMsg(uint8 const **data, EthernetPacketInterfaceEnabledMsg *msg);
void WriteEthernetPacketInterfaceEnabledMsg(uint8 **data, const EthernetPacketInterfaceEnabledMsg *msg);

void ReadSetEthernetPacketInterfaceEnabledMsg(uint8 const **data, SetEthernetPacketInterfaceEnabledMsg *msg);
void WriteSetEthernetPacketInterfaceEnabledResponseMsg(uint8 **data, const SetEthernetPacketInterfaceEnabledResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetEthernetPacketInterfaceEnabledMsg(uint8 **data, const SetEthernetPacketInterfaceEnabledMsg *msg);
void ReadSetEthernetPacketInterfaceEnabledResponseMsg(uint8 const **data, SetEthernetPacketInterfaceEnabledResponseMsg *msg);
#endif




/* Ethernet Packet Interface Status message.
 */
typedef GenericExternalInterfacesGetMsg GetEthernetPacketInterfaceStatusMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
	Bool linkUpStatus;
} GetEthernetPacketInterfaceStatusResponseMsg;

void ReadGetEthernetPacketInterfaceStatusMsg(uint8 const **data, GetEthernetPacketInterfaceStatusMsg *msg);
void WriteGetEthernetPacketInterfaceStatusResponseMsg(uint8 **data, const GetEthernetPacketInterfaceStatusResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetEthernetPacketInterfaceStatusMsg(uint8 **data, const GetEthernetPacketInterfaceStatusMsg *msg);
void ReadGetEthernetPacketInterfaceStatusResponseMsg(uint8 const **data, GetEthernetPacketInterfaceStatusResponseMsg *msg);
#endif






/* Ethernet Packet Interface Statistics message.
 */
typedef GenericExternalInterfacesGetMsg GetEthernetPacketInterfaceStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	EthernetPacketInterfaceStatistics statistics;
} GetEthernetPacketInterfaceStatisticsResponseMsg;

void ReadGetEthernetPacketInterfaceStatisticsMsg(uint8 const **data, GetEthernetPacketInterfaceStatisticsMsg *msg);
void WriteGetEthernetPacketInterfaceStatisticsResponseMsg(uint8 **data, const GetEthernetPacketInterfaceStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetEthernetPacketInterfaceStatisticsMsg(uint8 **data, const GetEthernetPacketInterfaceStatisticsMsg *msg);
void ReadGetEthernetPacketInterfaceStatisticsResponseMsg(uint8 const **data, GetEthernetPacketInterfaceStatisticsResponseMsg *msg);
#endif



/*********************
 * IP Packet Interface
 *********************/
/* IP Packet Interface Configuration message.
 */
typedef GenericExternalInterfacesGetMsg GetIpPacketInterfaceConfigurationMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	IpPacketInterfaceConfiguration ipInterfaceConfiguration;
} GetIpPacketInterfaceConfigurationResponseMsg;


/* Add IP Packet Interface message.
   Reuse existing structure as it has precisely the fields needed
 */
typedef GetIpPacketInterfaceConfigurationResponseMsg AddIpPacketInterfaceMsg;
typedef GetIpPacketInterfaceConfigurationResponseMsg AddIpPacketInterfaceResponseMsg;

void ReadAddIpPacketInterfaceMsg(uint8 const **data, AddIpPacketInterfaceMsg *msg);
void WriteAddIpPacketInterfaceResponseMsg(uint8 **data, AddIpPacketInterfaceResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteAddIpPacketInterfaceMsg(uint8 **data,AddIpPacketInterfaceMsg *msg);
void ReadAddIpPacketInterfaceResponseMsg(uint8	const **data, AddIpPacketInterfaceResponseMsg *msg);
#endif


/* Change IP Packet Interface message.
   Reuse existing structure as it has precisely the fields needed
 */
typedef GetIpPacketInterfaceConfigurationResponseMsg ChangeIpPacketInterfaceMsg;
typedef GetIpPacketInterfaceConfigurationResponseMsg ChangeIpPacketInterfaceResponseMsg;

void ReadChangeIpPacketInterfaceMsg(uint8 const **data, ChangeIpPacketInterfaceMsg *msg);
void WriteChangeIpPacketInterfaceResponseMsg(uint8 **data, ChangeIpPacketInterfaceResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteChangeIpPacketInterfaceMsg(uint8 **data,ChangeIpPacketInterfaceMsg *msg);
void ReadChangeIpPacketInterfaceResponseMsg(uint8	const **data, ChangeIpPacketInterfaceResponseMsg *msg);
#endif



/* Delete IP Packet Interface message.
 */
typedef GenericExternalInterfacesGetMsg DeleteIpPacketInterfaceMsg;
typedef GenericExternalInterfacesGetMsg DeleteIpPacketInterfaceResponseMsg;

void ReadDeleteIpPacketInterfaceMsg(uint8 const **data, DeleteIpPacketInterfaceMsg *msg);
void WriteDeleteIpPacketInterfaceResponseMsg(uint8 **data, const DeleteIpPacketInterfaceResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteDeleteIpPacketInterfaceMsg(uint8 **data, const DeleteIpPacketInterfaceMsg *msg);
void ReadDeleteIpPacketInterfaceResponseMsg(uint8 const **data, DeleteIpPacketInterfaceResponseMsg *msg);
#endif




/* IP Packet Interface Configuration message.
 */

/* generic*/
void ReadGetIpPacketInterfaceConfigurationResponseMsg(uint8 const **data, GetIpPacketInterfaceConfigurationResponseMsg *msg);
void WriteGetIpPacketInterfaceConfigurationResponseMsg(uint8 **data, GetIpPacketInterfaceConfigurationResponseMsg *msg);
#define ReadIpPacketInterfaceMsg (ReadGetIpPacketInterfaceConfigurationResponseMsg)
#define WriteIpPacketInterfaceMsg (WriteGetIpPacketInterfaceConfigurationResponseMsg)
void ReadGetIpPacketInterfaceConfigurationMsg(uint8 const **data, GetIpPacketInterfaceConfigurationMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetIpPacketInterfaceConfigurationMsg(uint8 **data,const GetIpPacketInterfaceConfigurationMsg *msg);
#endif




/* IP Packet Interface Enabled message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
} IpPacketInterfaceEnabledMsg;

typedef IpPacketInterfaceEnabledMsg SetIpPacketInterfaceEnabledMsg;
typedef IpPacketInterfaceEnabledMsg SetIpPacketInterfaceEnabledResponseMsg;

/* Generic functions */
void ReadIpPacketInterfaceEnabledMsg(uint8 const **data, IpPacketInterfaceEnabledMsg *msg);
void WriteIpPacketInterfaceEnabledMsg(uint8 **data, const IpPacketInterfaceEnabledMsg *msg);

void ReadSetIpPacketInterfaceEnabledMsg(uint8 const **data, SetIpPacketInterfaceEnabledMsg *msg);
void WriteSetIpPacketInterfaceEnabledResponseMsg(uint8 **data, const SetIpPacketInterfaceEnabledResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetIpPacketInterfaceEnabledMsg(uint8 **data, const SetIpPacketInterfaceEnabledMsg *msg);
void ReadSetIpPacketInterfaceEnabledResponseMsg(uint8 const **data, SetIpPacketInterfaceEnabledResponseMsg *msg);
#endif




/* IP Packet Interface Status message.
 */
typedef GenericExternalInterfacesGetMsg GetIpPacketInterfaceStatusMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	Bool enabled;
	Bool upDownStatus;
} GetIpPacketInterfaceStatusResponseMsg;

void ReadGetIpPacketInterfaceStatusMsg(uint8 const **data, GetIpPacketInterfaceStatusMsg *msg);
void WriteGetIpPacketInterfaceStatusResponseMsg(uint8 **data, const GetIpPacketInterfaceStatusResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetIpPacketInterfaceStatusMsg(uint8 **data, const GetIpPacketInterfaceStatusMsg *msg);
void ReadGetIpPacketInterfaceStatusResponseMsg(uint8 const **data, GetIpPacketInterfaceStatusResponseMsg *msg);
#endif




/* IP Packet Interface Statistics message.
 */
typedef GenericExternalInterfacesGetMsg GetIpPacketInterfaceStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	IpPacketInterfaceStatistics statistics;
} GetIpPacketInterfaceStatisticsResponseMsg;

void ReadGetIpPacketInterfaceStatisticsMsg(uint8 const **data, GetIpPacketInterfaceStatisticsMsg *msg);
void WriteGetIpPacketInterfaceStatisticsResponseMsg(uint8 **data, const GetIpPacketInterfaceStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetIpPacketInterfaceStatisticsMsg(uint8 **data, const GetIpPacketInterfaceStatisticsMsg *msg);
void ReadGetIpPacketInterfaceStatisticsResponseMsg(uint8 const **data, GetIpPacketInterfaceStatisticsResponseMsg *msg);
#endif




/*******************
 * SPI Bus Interface
 *******************/

/* SPI Bus Statistics message.
 */
typedef ToPSyncMsgHeader GetSPIBusStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	SpiInterfaceStatistics statistics;
} GetSPIBusStatisticsResponseMsg;
void ReadGetSPIBusStatisticsMsg(uint8 const **data, GetSPIBusStatisticsMsg *msg);
void WriteGetSPIBusStatisticsResponseMsg(uint8 **data, const GetSPIBusStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetSPIBusStatisticsMsg(uint8 **data, const GetSPIBusStatisticsMsg *msg);
void ReadGetSPIBusStatisticsResponseMsg(uint8 const **data, GetSPIBusStatisticsResponseMsg *msg);
#endif


/* Reset SPI Bus statistics message.
 */
typedef ToPSyncMsgHeader ResetSPIBusStatisticsMsg;
typedef ToPSyncMsgHeader ResetSPIBusStatisticsResponseMsg;

void ReadResetSPIBusStatisticsMsg(uint8 const **data, ResetSPIBusStatisticsMsg *msg);
void WriteResetSPIBusStatisticsResponseMsg(uint8 **data, const ResetSPIBusStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteResetSPIBusStatisticsMsg(uint8 **data, const ResetSPIBusStatisticsMsg *msg);
void ReadResetSPIBusStatisticsResponseMsg(uint8 const **data, ResetSPIBusStatisticsResponseMsg *msg);
#endif




/********************************
 * PTP Ports
 *******************************/

/* PTP Ports Generic Get message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
} GenericPtpPortsGetMessage;

void ReadGenericPtpPortsGetMessage(uint8 const **data, GenericPtpPortsGetMessage *msg);
void WriteGenericPtpPortsGetMessage(uint8 **data, const GenericPtpPortsGetMessage *msg);




/*******************
 * General
 *******************/

/* Configure PTP Port message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	PtpPortConfiguration ptpPort;
} ConfigurePtpPortMsg;

typedef ConfigurePtpPortMsg ConfigurePtpPortResponseMsg;
void ReadConfigurePtpPortMsg(uint8 const **data, ConfigurePtpPortMsg *msg);
void WriteConfigurePtpPortMsg(uint8 **data, const ConfigurePtpPortMsg *msg);

void WriteConfigurePtpPortResponseMsg(uint8 **data, const ConfigurePtpPortResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadConfigurePtpPortResponseMsg(uint8 const **data, ConfigurePtpPortResponseMsg *msg);
#endif




/* Configure PTP Port message
 */
typedef GenericPtpPortsGetMessage DeconfigurePtpPortMsg;
typedef GenericPtpPortsGetMessage DeconfigurePtpPortResponseMsg;

void ReadDeconfigurePtpPortMsg(uint8 const **data, DeconfigurePtpPortMsg *msg);
void WriteDeconfigurePtpPortResponseMsg(uint8 **data, const DeconfigurePtpPortResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteDeconfigurePtpPortMsg(uint8 **data, const DeconfigurePtpPortMsg *msg);
void ReadDeconfigurePtpPortResponseMsg(uint8 const **data, DeconfigurePtpPortResponseMsg *msg);
#endif



/* Get PTP Port Configuration message.
 */
typedef GenericPtpPortsGetMessage GetPtpPortConfigurationMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	PtpPortConfiguration ptpPort;
} GetPtpPortConfigurationResponseMsg;

void ReadGetPtpPortConfigurationMsg(uint8 const **data, GetPtpPortConfigurationMsg *msg);
void WriteGetPtpPortConfigurationResponseMsg(uint8 **data, const GetPtpPortConfigurationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetPtpPortConfigurationMsg(uint8 **data, const GetPtpPortConfigurationMsg *msg);
void ReadGetPtpPortConfigurationResponseMsg(uint8 const **data, GetPtpPortConfigurationResponseMsg *msg);
#endif




/* Set PTP Port Enabled message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Bool enabled;
} SetPtpPortEnabledMsg;
typedef SetPtpPortEnabledMsg SetPtpPortEnabledResponseMsg;

void ReadSetPtpPortEnabledMsg(uint8 const **data, SetPtpPortEnabledMsg *msg);
void WriteSetPtpPortEnabledMsg(uint8 **data, const SetPtpPortEnabledMsg *msg);
void WriteSetPtpPortEnabledResponseMsg(uint8 **data, const SetPtpPortEnabledResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadSetPtpPortEnabledResponseMsg(uint8 const **data, SetPtpPortEnabledResponseMsg *msg);
#endif






/* PTP Port State message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	PTPPortState ptpPortState;
} PtpPortStateMsg;

typedef PtpPortStateMsg 		  SetPtpPortStateMsg;
typedef PtpPortStateMsg 		  SetPtpPortStateResponseMsg;
typedef GenericPtpPortsGetMessage GetPtpPortStateMsg;
typedef PtpPortStateMsg 		  GetPtpPortStateResponseMsg;

/* Generic functions */
void ReadPtpPortStateMsg(uint8 const **data, PtpPortStateMsg *msg);
void WritePtpPortStateMsg(uint8 **data, const PtpPortStateMsg *msg);
void ReadSetPtpPortStateMsg(uint8 const **data, SetPtpPortStateMsg *msg);
void WriteSetPtpPortStateResponseMsg(uint8 **data, const SetPtpPortStateResponseMsg *msg);
void ReadGetPtpPortStateMsg(uint8 const **data, GetPtpPortStateMsg *msg);
void WriteGetPtpPortStateResponseMsg(uint8 **data, const GetPtpPortStateResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetPtpPortStateMsg(uint8 **data, const SetPtpPortStateMsg *msg);
void ReadSetPtpPortStateResponseMsg(uint8 const **data, SetPtpPortStateResponseMsg *msg);
void WriteGetPtpPortStateMsg(uint8 **data, const GetPtpPortStateMsg *msg);
void ReadGetPtpPortStateResponseMsg(uint8 const **data, GetPtpPortStateResponseMsg *msg);
#endif



/* V1 pad message
 */
typedef GenericPtpPortsGetMessage GetV1PadMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Bool enable;
	Bool active;	//this field is referred to as 'forced' in the set message
}GenericV1PadMsg;

typedef GenericV1PadMsg GetV1PadResponseMsg;
typedef GenericV1PadMsg SetV1PadMsg;
typedef GenericV1PadMsg SetV1PadResponseMsg;

/* Read/Write Generic */
void ReadGenericV1PadMsg(uint8 const **data, GenericV1PadMsg *msg);
void WriteGenericV1PadMsg(uint8 **data, const GenericV1PadMsg *msg);

#define ReadGetV1PadMsg ReadGenericPtpPortsGetMessage
#define WriteGetV1PadResponseMsg WriteGenericV1PadMsg
#define ReadSetV1PadMsg ReadGenericV1PadMsg
#define WriteSetV1PadResponseMsg WriteGenericV1PadMsg

#ifdef SEMTECH_TARGET
#else
#define WriteGetV1PadMsg WriteGenericPtpPortsGetMessage
#define ReadGetV1PadResponseMsg ReadGenericV1PadMsg
#define WriteSetV1PadMsg WriteGenericV1PadMsg
#define ReadSetV1PadResponseMsg ReadGenericV1PadMsg
#endif




/* Set Node ID message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	NodeId id;
} PtpNodeIdMsg;

typedef PtpNodeIdMsg		SetPtpNodeIdMsg;
typedef PtpNodeIdMsg		SetPtpNodeIdResponseMsg;
typedef ToPSyncMsgHeader	GetPtpNodeIdMsg;
typedef PtpNodeIdMsg		GetPtpNodeIdResponseMsg;
typedef ToPSyncMsgHeader	GetDefaultPtpNodeIdMsg;
typedef PtpNodeIdMsg		GetDefaultPtpNodeIdResponseMsg;

void ReadPtpNodeIdMsg(uint8 const **data, PtpNodeIdMsg *msg);
void WritePtpNodeIdMsg(uint8 **data, const PtpNodeIdMsg *msg);

#define ReadSetPtpNodeIdMsg 				ReadPtpNodeIdMsg
#define WriteSetPtpNodeIdResponseMsg		WritePtpNodeIdMsg
#define ReadGetPtpNodeIdMsg 				ReadToPSyncMessageHeader
#define WriteGetPtpNodeIdResponseMsg		WritePtpNodeIdMsg
#define ReadGetDefaultPtpNodeIdMsg			ReadToPSyncMessageHeader
#define WriteGetDefaultPtpNodeIdResponseMsg WritePtpNodeIdMsg

#ifdef SEMTECH_TARGET
#else
#define WriteSetPtpNodeIdMsg				WritePtpNodeIdMsg
#define ReadSetPtpNodeIdResponseMsg 		ReadPtpNodeIdMsg
#define WriteGetPtpNodeIdMsg				WriteToPSyncMessageHeader
#define ReadGetPtpNodeIdResponseMsg 		ReadPtpNodeIdMsg
#define WriteGetDefaultPtpNodeIdMsg 		WriteToPSyncMessageHeader
#define ReadGetDefaultPtpNodeIdResponseMsg	ReadPtpNodeIdMsg
#endif





/* Set/Get Master/Slave enable.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Bool enable;
} EnablePtpPortOperationMsg;

typedef EnablePtpPortOperationMsg SetEnablePtpPortMasterOperationMsg;
typedef EnablePtpPortOperationMsg SetEnablePtpPortMasterOperationResponseMsg;
typedef EnablePtpPortOperationMsg SetEnablePtpPortSlaveOperationMsg;
typedef EnablePtpPortOperationMsg SetEnablePtpPortSlaveOperationResponseMsg;

/*generic*/
void ReadEnablePtpPortOperationMsg(uint8 const **data, EnablePtpPortOperationMsg *msg);
void WriteEnablePtpPortOperationMsg(uint8 **data, const EnablePtpPortOperationMsg *msg);

/*for the get response part we can reuse the struct and code above
*/
typedef EnablePtpPortOperationMsg GetEnablePtpPortSlaveOperationResponseMsg;
typedef EnablePtpPortOperationMsg GetEnablePtpPortMasterOperationResponseMsg;


/*for the get req we need to create new struct
*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
} GetEnablePtpPortOperationMsg;


typedef GetEnablePtpPortOperationMsg GetEnablePtpPortMasterOperationMsg;
typedef GetEnablePtpPortOperationMsg GetEnablePtpPortSlaveOperationMsg;

/*generic*/
void ReadGetEnablePtpPortOperationMsg(uint8 const **data, GetEnablePtpPortOperationMsg *msg);

#define ReadSetEnablePtpPortMasterOperationMsg	ReadEnablePtpPortOperationMsg
#define WriteSetEnablePtpPortMasterOperationResponseMsg WriteEnablePtpPortOperationMsg
#define ReadSetEnablePtpPortSlaveOperationMsg	ReadEnablePtpPortOperationMsg
#define WriteSetEnablePtpPortSlaveOperationResponseMsg WriteEnablePtpPortOperationMsg
#define WriteGetEnablePtpPortMasterOperationResponseMsg WriteEnablePtpPortOperationMsg
#define WriteGetEnablePtpPortSlaveOperationResponseMsg WriteEnablePtpPortOperationMsg
#define ReadGetEnablePtpPortMasterOperationMsg	ReadGetEnablePtpPortOperationMsg
#define ReadGetEnablePtpPortSlaveOperationMsg	ReadGetEnablePtpPortOperationMsg

#ifdef SEMTECH_TARGET
#else
void WriteGetEnablePtpPortOperationMsg(uint8 **data, const GetEnablePtpPortOperationMsg *msg);
#define WriteSetEnablePtpPortMasterOperationMsg WriteEnablePtpPortOperationMsg
#define ReadSetEnablePtpPortMasterOperationResponseMsg	ReadEnablePtpPortOperationMsg
#define WriteSetEnablePtpPortSlaveOperationMsg	WriteEnablePtpPortOperationMsg
#define ReadSetEnablePtpPortSlaveOperationResponseMsg	ReadEnablePtpPortOperationMsg
#define WriteGetEnablePtpPortMasterOperationMsg WriteGetEnablePtpPortOperationMsg
#define WriteGetEnablePtpPortSlaveOperationMsg	WriteGetEnablePtpPortOperationMsg
#define ReadGetEnablePtpPortMasterOperationResponseMsg	ReadEnablePtpPortOperationMsg
#define ReadGetEnablePtpPortSlaveOperationResponseMsg	ReadEnablePtpPortOperationMsg
#endif

/* Set/Get Master/Slave enable.
 */

/* Set PTP Port configured timestamp value */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	MessageType msgType;
	ToPSyncTime timestampValue;
} SetPtpPortTimestampValueMsg;

typedef ToPSyncMsgHeader SetPtpPortTimestampValueResponseMsg;


/*******************
 * Slave
 *******************/
/* Set Requested Announce Message Period message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	LogMessagePeriod logPeriod;
	uint32 grantDuration;
} RequestedAnnounceMessagePeriodMsg;

typedef RequestedAnnounceMessagePeriodMsg SetRequestedAnnounceMessagePeriodMsg;
typedef RequestedAnnounceMessagePeriodMsg SetRequestedAnnounceMessagePeriodResponseMsg;
typedef GenericPtpPortsGetMessage		  GetRequestedAnnounceMessagePeriodMsg;
typedef RequestedAnnounceMessagePeriodMsg GetRequestedAnnounceMessagePeriodResponseMsg;

/* Generic functions */
void ReadRequestedAnnounceMessagePeriodMsg(uint8 const **data, RequestedAnnounceMessagePeriodMsg *msg);
void WriteRequestedAnnounceMessagePeriodMsg(uint8 **data, const RequestedAnnounceMessagePeriodMsg *msg);

void ReadSetRequestedAnnounceMessagePeriodMsg(uint8 const **data, SetRequestedAnnounceMessagePeriodMsg *msg);
void WriteSetRequestedAnnounceMessagePeriodResponseMsg(uint8 **data, const SetRequestedAnnounceMessagePeriodResponseMsg *msg);
void ReadGetRequestedAnnounceMessagePeriodMsg(uint8 const **data, GetRequestedAnnounceMessagePeriodMsg *msg);
void WriteGetRequestedAnnounceMessagePeriodResponseMsg(uint8 **data, const GetRequestedAnnounceMessagePeriodResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetRequestedAnnounceMessagePeriodMsg(uint8 **data, const SetRequestedAnnounceMessagePeriodMsg *msg);
void ReadSetRequestedAnnounceMessagePeriodResponseMsg(uint8 const **data, SetRequestedAnnounceMessagePeriodResponseMsg *msg);
void WriteGetRequestedAnnounceMessagePeriodMsg(uint8 **data, const GetRequestedAnnounceMessagePeriodMsg *msg);
void ReadGetRequestedAnnounceMessagePeriodResponseMsg(uint8 const **data, GetRequestedAnnounceMessagePeriodResponseMsg *msg);
#endif

/* Requested Sync Message Period mesage.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	LogMessagePeriod logPeriod;
	uint32 grantDuration;
} RequestedSyncMessagePeriodMsg;

typedef RequestedSyncMessagePeriodMsg SetRequestedSyncMessagePeriodMsg;
typedef RequestedSyncMessagePeriodMsg SetRequestedSyncMessagePeriodResponseMsg;
typedef GenericPtpPortsGetMessage	  GetRequestedSyncMessagePeriodMsg;
typedef RequestedSyncMessagePeriodMsg GetRequestedSyncMessagePeriodResponseMsg;

/* Generic functions */
void ReadRequestedSyncMessagePeriodMsg(uint8 const **data, RequestedSyncMessagePeriodMsg *msg);
void WriteRequestedSyncMessagePeriodMsg(uint8 **data, const RequestedSyncMessagePeriodMsg *msg);

void ReadSetRequestedSyncMessagePeriodMsg(uint8 const **data, SetRequestedSyncMessagePeriodMsg *msg);
void WriteSetRequestedSyncMessagePeriodResponseMsg(uint8 **data, const SetRequestedSyncMessagePeriodResponseMsg *msg);
void ReadGetRequestedSyncMessagePeriodMsg(uint8 const **data, GetRequestedSyncMessagePeriodMsg *msg);
void WriteGetRequestedSyncMessagePeriodResponseMsg(uint8 **data, const GetRequestedSyncMessagePeriodResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetRequestedSyncMessagePeriodMsg(uint8 **data, const SetRequestedSyncMessagePeriodMsg *msg);
void ReadSetRequestedSyncMessagePeriodResponseMsg(uint8 const **data, SetRequestedSyncMessagePeriodResponseMsg *msg);
void WriteGetRequestedSyncMessagePeriodMsg(uint8 **data, const GetRequestedSyncMessagePeriodMsg *msg);
void ReadGetRequestedSyncMessagePeriodResponseMsg(uint8 const **data, GetRequestedSyncMessagePeriodResponseMsg *msg);
#endif
/* Requested Delay Request Message Period message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	LogMessagePeriod logPeriod;
	uint32 grantDuration;
} RequestedDelayRequestMessagePeriodMsg;

typedef RequestedDelayRequestMessagePeriodMsg SetRequestedDelayRequestMessagePeriodMsg;
typedef RequestedDelayRequestMessagePeriodMsg SetRequestedDelayRequestMessagePeriodResponseMsg;
typedef GenericPtpPortsGetMessage			  GetRequestedDelayRequestMessagePeriodMsg;
typedef RequestedDelayRequestMessagePeriodMsg GetRequestedDelayRequestMessagePeriodResponseMsg;

/* Generic functions */
void ReadRequestedDelayRequestMessagePeriodMsg(uint8 const **data, RequestedDelayRequestMessagePeriodMsg *msg);
void WriteRequestedDelayRequestMessagePeriodMsg(uint8 **data, const RequestedDelayRequestMessagePeriodMsg *msg);

void ReadSetRequestedDelayRequestMessagePeriodMsg(uint8 const **data, SetRequestedDelayRequestMessagePeriodMsg *msg);
void WriteSetRequestedDelayRequestMessagePeriodResponseMsg(uint8 **data, const SetRequestedDelayRequestMessagePeriodResponseMsg *msg);
void ReadGetRequestedDelayRequestMessagePeriodMsg(uint8 const **data, GetRequestedDelayRequestMessagePeriodMsg *msg);
void WriteGetRequestedDelayRequestMessagePeriodResponseMsg(uint8 **data, const GetRequestedDelayRequestMessagePeriodResponseMsg *msg);
#ifdef SEMTECH_TARGET
#else
void WriteSetRequestedDelayRequestMessagePeriodMsg(uint8 **data, const SetRequestedDelayRequestMessagePeriodMsg *msg);
void ReadSetRequestedDelayRequestMessagePeriodResponseMsg(uint8 const **data, SetRequestedDelayRequestMessagePeriodResponseMsg *msg);
void WriteGetRequestedDelayRequestMessagePeriodMsg(uint8 **data, const GetRequestedDelayRequestMessagePeriodMsg *msg);
void ReadGetRequestedDelayRequestMessagePeriodResponseMsg(uint8 const **data, GetRequestedDelayRequestMessagePeriodResponseMsg *msg);
#endif


/* Set Message Period message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	MessageType messageType;
	Bool multicast;
	Bool required;
	LogMessagePeriod logPeriod;
	uint32 grantDuration;
} MessagePeriodMsg;

typedef MessagePeriodMsg SetMessagePeriodMsg;
typedef MessagePeriodMsg SetMessagePeriodResponseMsg;

/* Generic functions */
void ReadMessagePeriodMsg(uint8 const **data, MessagePeriodMsg *msg);
void WriteMessagePeriodMsg(uint8 **data, const MessagePeriodMsg *msg);

#define WriteSetMessagePeriodResponseMsg	WriteMessagePeriodMsg
#define ReadSetMessagePeriodMsg				ReadMessagePeriodMsg

#ifdef SEMTECH_TARGET
#else
#define WriteSetMessagePeriodMsg			WriteMessagePeriodMsg
#define ReadSetMessagePeriodResponseMsg		ReadMessagePeriodMsg
#endif


/* Get Message Period message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	MessageType messageType;
	Bool multicast;
	Bool required;
} GetMessagePeriodMsg;

/*from the Set.. above*/
typedef MessagePeriodMsg GetMessagePeriodResponseMsg;

/* Generic functions */
void ReadGetMessagePeriodMsg(uint8 const **data, GetMessagePeriodMsg *msg);
#define WriteGetMessagePeriodResponseMsg	WriteMessagePeriodMsg  //from 'set' above

#ifdef SEMTECH_TARGET
#else
void WriteGetMessagePeriodMsg(uint8 **data, const GetMessagePeriodMsg *msg);
#define ReadGetMessagePeriodResponseMsg	ReadMessagePeriodMsg  //from 'set' above
#endif







/* Acceptable Master Address Table Enabled message.
 */

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Bool enabled;
	Bool slave;
} AcceptablePartnerTableRequiredMsg; //was AcceptableMasterTableRequiredMsg;

/*previous way of doing things- keep until deprecated*/
typedef GenericPtpPortsGetMessage		 GetAcceptableMasterTableRequiredMsg;

/*new way*/
typedef AcceptablePartnerTableRequiredMsg SetAcceptablePartnerTableRequiredMsg;
typedef AcceptablePartnerTableRequiredMsg SetAcceptablePartnerTableRequiredResponseMsg;
typedef AcceptablePartnerTableRequiredMsg GetAcceptablePartnerTableRequiredMsg;
typedef AcceptablePartnerTableRequiredMsg GetAcceptablePartnerTableRequiredResponseMsg;


/* Generic functions - changed to 'Partner'*/
void ReadAcceptablePartnerTableRequiredMsg(uint8 const **data, AcceptablePartnerTableRequiredMsg *msg);
void WriteAcceptablePartnerTableRequiredMsg(uint8 **data, const AcceptablePartnerTableRequiredMsg *msg);

/*for 'partner way */
void ReadSetAcceptablePartnerTableRequiredMsg(uint8 const **data, SetAcceptablePartnerTableRequiredMsg *msg);
void WriteSetAcceptablePartnerTableRequiredResponseMsg(uint8 **data, const SetAcceptablePartnerTableRequiredResponseMsg *msg);
void ReadGetAcceptablePartnerTableRequiredMsg(uint8 const **data, GetAcceptablePartnerTableRequiredMsg *msg);
void WriteGetAcceptablePartnerTableRequiredResponseMsg(uint8 **data, const GetAcceptablePartnerTableRequiredResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
/*new way*/
void WriteSetAcceptablePartnerTableRequiredMsg(uint8 **data, const SetAcceptablePartnerTableRequiredMsg *msg);
void ReadSetAcceptablePartnerTableRequiredResponseMsg(uint8 const **data, SetAcceptablePartnerTableRequiredResponseMsg *msg);
void WriteGetAcceptablePartnerTableRequiredMsg(uint8 **data, const GetAcceptablePartnerTableRequiredMsg *msg);
void ReadGetAcceptablePartnerTableRequiredResponseMsg(uint8 const **data, GetAcceptablePartnerTableRequiredResponseMsg *msg);
#endif




/* Add Acceptable Master Address message.
 */


typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	TransmissionProtocolAddress address;
	PortId portId;
	uint8 priority1;
	uint8 priority2;
	Bool requestUnicastAnnounceFromMaster;
	Bool slave;
} AddAcceptablePartnerMsg; //was  AddAcceptableMasterMsg

typedef AddAcceptablePartnerMsg AddAcceptablePartnerResponseMsg;

//generic
void ReadAddAcceptablePartnerMsg(uint8 const **data, AddAcceptablePartnerMsg *msg);
void WriteAddAcceptablePartnerMsg(uint8 **data, const AddAcceptablePartnerMsg *msg);

//new way
void WriteAddAcceptablePartnerResponseMsg(uint8 **data, const AddAcceptablePartnerResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
//new way
void ReadAddAcceptablePartnerResponseMsg(uint8 const **data, AddAcceptablePartnerResponseMsg *msg);
#endif





/* Delete Acceptable Master Address message
 */


typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	PortId			portId;
	TransmissionProtocolAddress address;
	/* either portId OR address may be NULL (portId == all zero), address has zero length*/
	Bool slave;
} DeleteAcceptablePartnerMsg;

//new way
typedef DeleteAcceptablePartnerMsg DeleteAcceptablePartnerResponseMsg;

//generic
void WriteDeleteAcceptablePartnerMsg(uint8 **data, const DeleteAcceptablePartnerMsg *msg);
void ReadDeleteAcceptablePartnerMsg(uint8 const **data, DeleteAcceptablePartnerMsg *msg);

//new
void WriteDeleteAcceptablePartnerResponseMsg(uint8 **data, const DeleteAcceptablePartnerResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
//new
void ReadDeleteAcceptablePartnerResponseMsg(uint8 const **data, DeleteAcceptablePartnerResponseMsg *msg);
#endif




/* Get Acceptable Master Address Table message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	uint8 entryNumber;
	Bool slave;
}GetAcceptablePartnerTableEntryMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	uint8 entryNumber;
	Bool  slave;
	uint8 numberOfTableEntries;
	AcceptablePartnerTableEntry acceptablePartnerTableEntry;
} GetAcceptablePartnerTableEntryResponseMsg;



//generic
void ReadGetAcceptablePartnerTableEntryMsg(uint8 const **data, GetAcceptablePartnerTableEntryMsg *msg);
void WriteGetAcceptablePartnerTableEntryResponseMsg(uint8 **data, const GetAcceptablePartnerTableEntryResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
//new
void WriteGetAcceptablePartnerTableEntryMsg(uint8 **data, const GetAcceptablePartnerTableEntryMsg  *msg);
void ReadGetAcceptablePartnerTableEntryResponseMsg(uint8 const **data, GetAcceptablePartnerTableEntryResponseMsg *msg);

#endif



/* Delay to Use message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Bool masterToSlaveDelayUsed;
	Bool slaveToMasterDelayUsed;
} DelayToUseMsg;

typedef DelayToUseMsg			  SetDelayToUseMsg;
typedef DelayToUseMsg			  SetDelayToUseResponseMsg;
typedef GenericPtpPortsGetMessage GetDelayToUseMsg;
typedef DelayToUseMsg			  GetDelayToUseResponseMsg;

/* Generic functions */
void ReadDelayToUseMsg(uint8 const **data, DelayToUseMsg *msg);
void WriteDelayToUseMsg(uint8 **data, const DelayToUseMsg *msg);
void ReadSetDelayToUseMsg(uint8 const **data, SetDelayToUseMsg *msg);
void WriteSetDelayToUseResponseMsg(uint8 **data, const SetDelayToUseResponseMsg *msg);
void ReadGetDelayToUseMsg(uint8 const **data, GetDelayToUseMsg *msg);
void WriteGetDelayToUseResponseMsg(uint8 **data, const GetDelayToUseResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetDelayToUseMsg(uint8 **data, const SetDelayToUseMsg *msg);
void ReadSetDelayToUseResponseMsg(uint8 const **data, SetDelayToUseResponseMsg *msg);
void WriteGetDelayToUseMsg(uint8 **data, const GetDelayToUseMsg *msg);
void ReadGetDelayToUseResponseMsg(uint8 const **data, GetDelayToUseResponseMsg *msg);
#endif




/* Number of Missing Announce Messages To Declare Master Failed.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	uint16 numberOfAnnounceMessages;
} SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg;

typedef SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg	SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg;
typedef GenericPtpPortsGetMessage									GetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg;
typedef SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg	GetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg;

/*generic*/
void ReadSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg(uint8 const **data, SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg *msg);
void WriteSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg(uint8 **data, const SetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg *msg);
#define WriteSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg WriteSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg
#define ReadGetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg			ReadGenericPtpPortsGetMessage
#define WriteGetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg WriteSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg

#ifdef SEMTECH_TARGET
#else
#define ReadSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg	ReadSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg
#define WriteGetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg 		WriteGenericPtpPortsGetMessage
#define ReadGetNumberOfMissingAnnounceMessagesToDeclareMasterFailedResponseMsg	ReadSetNumberOfMissingAnnounceMessagesToDeclareMasterFailedMsg
#endif



/********************************
 * Visible Masters
 *******************************/

/* Generic Visible Masters Get message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 visibleMasterId;
} GenericVisibleMastersGetMsg;

/* Read/Write */
void ReadGenericVisibleMastersGetMsg(uint8 const **data, GenericVisibleMastersGetMsg *msg);
void WriteGenericVisibleMastersGetMsg(uint8 **data, const GenericVisibleMastersGetMsg *msg);


/* Get Message Grant Status message.
 */
typedef GenericVisibleMastersGetMsg GetMessageGrantStatusMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	MessageGrantStatus messageGrantStatus;
	uint8 visibleMasterId;
} GetMessageGrantStatusResponseMsg;

void ReadGetMessageGrantStatusMsg(uint8 const **data, GetMessageGrantStatusMsg *msg);
void WriteGetMessageGrantStatusResponseMsg(uint8 **data, const GetMessageGrantStatusResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetMessageGrantStatusMsg(uint8 **data, const GetMessageGrantStatusMsg *msg);
void ReadGetMessageGrantStatusResponseMsg(uint8 const **data, GetMessageGrantStatusResponseMsg *msg);
#endif



/* Get Visible masters message.
 */
typedef ToPSyncMsgHeader GetVisibleMastersMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 visibleMastersMask;
} GetVisibleMastersResponseMsg;

void WriteGetVisibleMastersResponseMsg(uint8 **data, const GetVisibleMastersResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadGetVisibleMastersResponseMsg(uint8 const **data, GetVisibleMastersResponseMsg *msg);
void WriteGetVisibleMastersMsg(uint8 **data, const GetVisibleMastersMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetVisibleMastersMsg(uint8 const **data, GetVisibleMastersMsg *msg);
#endif



/* Get Visible Master Details message.
 */
typedef GenericVisibleMastersGetMsg GetVisibleMasterMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	VisibleMasterStatus visibleMaster;
} GetVisibleMasterResponseMsg;
void ReadGetVisibleMasterMsg(uint8 const **data, GetVisibleMasterMsg *msg);
void WriteGetVisibleMasterResponseMsg(uint8 **data, const GetVisibleMasterResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetVisibleMasterMsg(uint8 **data, const GetVisibleMasterMsg *msg);
void ReadGetVisibleMasterResponseMsg(uint8 const **data, GetVisibleMasterResponseMsg *msg);
#endif



/* Get Visible Master Statistics message.
 */
typedef GenericVisibleMastersGetMsg GetVisibleMasterStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 visibleMasterId;
	VisibleMasterStatistics  data;
} GetVisibleMasterStatisticsResponseMsg;
void ReadGetVisibleMasterStatisticsMsg(uint8 const **data, GetVisibleMasterStatisticsMsg *msg);
void WriteGetVisibleMasterStatisticsResponseMsg(uint8 **data, const GetVisibleMasterStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetVisibleMasterStatisticsMsg(uint8 **data, const GetVisibleMasterStatisticsMsg *msg);
void ReadGetVisibleMasterStatisticsResponseMsg(uint8 const **data, GetVisibleMasterStatisticsResponseMsg *msg);
#endif

/* Get Visible Master Extended (Modes 2 & 3) Statistics message.
 */
typedef GenericVisibleMastersGetMsg GetVisibleMasterExtendedStatisticsMsg;
typedef struct
{
	GenericVisibleMastersGetMsg header;
	ExtendedVisibleMasterStatistics data;
} GetVisibleMasterExtendedStatisticsResponseMsg;

#ifdef SEMTECH_TARGET
#else
void WriteGetExtendedVisibleMasterStatisticsMsg(uint8 **data, const GetVisibleMasterExtendedStatisticsMsg *msg);
void ReadGetExtendedVisibleMasterStatisticsResponseMsg(uint8 const **data, GetVisibleMasterExtendedStatisticsResponseMsg *msg);
#endif


/* Reset Visible Master Statistics message
 */
typedef GenericVisibleMastersGetMsg ResetVisibleMasterStatisticsMsg;
typedef GenericVisibleMastersGetMsg ResetVisibleMasterStatisticsResponseMsg;
void ReadResetVisibleMasterStatisticsMsg(uint8 const **data, ResetVisibleMasterStatisticsMsg *msg);
void WriteResetVisibleMasterStatisticsResponseMsg(uint8 **data, const ResetVisibleMasterStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteResetVisibleMasterStatisticsMsg(uint8 **data, const ResetVisibleMasterStatisticsMsg *msg);
void ReadResetVisibleMasterStatisticsResponseMsg(uint8 const **data, ResetVisibleMasterStatisticsResponseMsg *msg);
#endif



/* Get Visible Master Delay Statistics message.
 */
typedef GenericVisibleMastersGetMsg GetVisibleMasterDelayStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 visibleMasterId;
	VisibleMasterDelayStatistics visibleMasterDelayStatistics;
} GetVisibleMasterDelayStatisticsResponseMsg;

void ReadGetVisibleMasterDelayStatisticsMsg(uint8 const **data, GetVisibleMasterDelayStatisticsMsg *msg);
void WriteGetVisibleMasterDelayStatisticsResponseMsg(uint8 **data, const GetVisibleMasterDelayStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetVisibleMasterDelayStatisticsMsg(uint8 **data, const GetVisibleMasterDelayStatisticsMsg *msg);
void ReadGetVisibleMasterDelayStatisticsResponseMsg(uint8 const **data, GetVisibleMasterDelayStatisticsResponseMsg *msg);
#endif



/********************************
 * Current Master
 *******************************/

/* Get Current Master message.
 */
typedef ToPSyncMsgHeader GetCurrentMasterMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	Bool currentMasterExists;
	CurrentMasterDetails currentMaster;
} GetCurrentMasterResponseMsg;
void WriteGetCurrentMasterResponseMsg(uint8 **data, const GetCurrentMasterResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetCurrentMasterMsg(uint8 **data, const GetCurrentMasterMsg *msg);
void ReadGetCurrentMasterResponseMsg(uint8 const **data, GetCurrentMasterResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetCurrentMasterMsg(uint8 const **data, GetCurrentMasterMsg *msg);
#endif


/* Get Current Master Timestamp Statistics Message.
 */
typedef ToPSyncMsgHeader GetTimestampSnapshotMsg;
typedef struct  
{
	ToPSyncMsgHeader header;
	ToPSyncTime      timestamps[4];
	sint32           correctionFields[2];
} GetTimestampSnapshotResponseMsg;


#ifdef SEMTECH_TARGET
#else
void WriteGetTimestampSnapshotMsg(uint8 **data, const GetTimestampSnapshotMsg *msg);
void ReadGetTimestampSnapshotResponseMsg(uint8 const **data, GetTimestampSnapshotResponseMsg *msg);
#endif


/********************************
 * Time Reference Selector
 *******************************/

/* Ouput Clock Frequency Smoother enable message
*/

typedef struct
{
	ToPSyncMsgHeader header;
	Bool enabled;
} OutputClockFrequencySmootherEnableMsg;

typedef OutputClockFrequencySmootherEnableMsg SetOutputClockFrequencySmootherEnableMsg;
typedef OutputClockFrequencySmootherEnableMsg SetOutputClockFrequencySmootherEnableResponseMsg;
typedef ToPSyncMsgHeader				GetOutputClockFrequencySmootherEnableMsg;
typedef OutputClockFrequencySmootherEnableMsg GetOutputClockFrequencySmootherEnableResponseMsg;

/* Generic function */
void ReadOutputClockFrequencySmootherEnableMsg(uint8 const **data, OutputClockFrequencySmootherEnableMsg *msg);
void WriteOutputClockFrequencySmootherEnableMsg(uint8 **data, const OutputClockFrequencySmootherEnableMsg *msg);

void ReadSetOutputClockFrequencySmootherEnableMsg(uint8 const **data, SetOutputClockFrequencySmootherEnableMsg *msg);
void WriteSetOutputClockFrequencySmootherEnableResponseMsg(uint8 **data, const SetOutputClockFrequencySmootherEnableResponseMsg *msg);
void WriteGetOutputClockFrequencySmootherEnableResponseMsg(uint8 **data, const GetOutputClockFrequencySmootherEnableResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetOutputClockFrequencySmootherEnableMsg(uint8 **data, const SetOutputClockFrequencySmootherEnableMsg *msg);
void ReadSetOutputClockFrequencySmootherEnableResponseMsg(uint8 const **data, SetOutputClockFrequencySmootherEnableResponseMsg *msg);
void WriteGetOutputClockFrequencySmootherEnableMsg(uint8 **data, const GetOutputClockFrequencySmootherEnableMsg *msg);
void ReadGetOutputClockFrequencySmootherEnableResponseMsg(uint8 const **data, GetOutputClockFrequencySmootherEnableResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetOutputClockFrequencySmootherEnableMsg(uint8 const **data, GetOutputClockFrequencySmootherEnableMsg *msg);
#endif





/* Output Clock Frequency Smoother configure message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Frequency lockedBandwidth;
	Frequency unlockedBandwidth;
} OutputClockFrequencySmootherConfigurationMsg;

typedef OutputClockFrequencySmootherConfigurationMsg SetOutputClockFrequencySmootherConfigurationMsg;
typedef OutputClockFrequencySmootherConfigurationMsg SetOutputClockFrequencySmootherConfigurationResponseMsg;
typedef ToPSyncMsgHeader				GetOutputClockFrequencySmootherConfigurationMsg;
typedef OutputClockFrequencySmootherConfigurationMsg GetOutputClockFrequencySmootherConfigurationResponseMsg;

/* Generic function */
void ReadOutputClockFrequencySmootherConfigurationMsg(uint8 const **data, OutputClockFrequencySmootherConfigurationMsg *msg);
void WriteOutputClockFrequencySmootherConfigurationMsg(uint8 **data, const OutputClockFrequencySmootherConfigurationMsg *msg);

void ReadSetOutputClockFrequencySmootherConfigurationMsg(uint8 const **data, SetOutputClockFrequencySmootherConfigurationMsg *msg);
void WriteSetOutputClockFrequencySmootherConfigurationResponseMsg(uint8 **data, const SetOutputClockFrequencySmootherConfigurationResponseMsg *msg);
void WriteGetOutputClockFrequencySmootherConfigurationResponseMsg(uint8 **data, const GetOutputClockFrequencySmootherConfigurationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetOutputClockFrequencySmootherConfigurationMsg(uint8 **data, const SetOutputClockFrequencySmootherConfigurationMsg *msg);
void ReadSetOutputClockFrequencySmootherConfigurationResponseMsg(uint8 const **data, SetOutputClockFrequencySmootherConfigurationResponseMsg *msg);
void WriteGetOutputClockFrequencySmootherConfigurationMsg(uint8 **data, const GetOutputClockFrequencySmootherConfigurationMsg *msg);
void ReadGetOutputClockFrequencySmootherConfigurationResponseMsg(uint8 const **data, GetOutputClockFrequencySmootherConfigurationResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetOutputClockFrequencySmootherConfigurationMsg(uint8 const **data, GetOutputClockFrequencySmootherConfigurationMsg *msg);
#endif






/* Get Selected Time Reference Source message
 */
typedef ToPSyncMsgHeader GetSelectedTimeReferenceSourceMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id; // if viaPacketNetwork, id = ptpPortIndex, if viaWire, id = 1PPS input id
} GenericTimeReferenceSourceMsg;

/* Read/Write Get Response */
void ReadGenericTimeReferenceSourceMsg(uint8 const **data, GenericTimeReferenceSourceMsg *msg);
void WriteGenericTimeReferenceSourceMsg(uint8 **data, const GenericTimeReferenceSourceMsg *msg);

typedef GenericTimeReferenceSourceMsg GetSelectedTimeReferenceSourceResponseMsg;
#define WriteGetSelectedTimeReferenceSourceResponseMsg WriteGenericTimeReferenceSourceMsg

/* Read/Write Get */
#ifdef SEMTECH_TARGET
#else
void WriteGetSelectedTimeReferenceSourceMsg(uint8 **data, const GetSelectedTimeReferenceSourceMsg *msg);
#define ReadGetSelectedTimeReferenceSourceResponseMsg ReadGenericTimeReferenceSourceMsg
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetSelectedTimeReferenceSourceMsg(uint8 const **data, GetSelectedTimeReferenceSourceMsg *msg);
#endif






/* Get Time Reference Selector Statistics message
 */
typedef ToPSyncMsgHeader GetTimeReferenceSelectorStatisticsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	TimeReferenceSelectorStatistics statistics;
} GetTimeReferenceSelectorStatisticsResponseMsg;

void WriteGetTimeReferenceSelectorStatisticsResponseMsg(uint8 **data, const GetTimeReferenceSelectorStatisticsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetTimeReferenceSelectorStatisticsMsg(uint8 **data, const GetTimeReferenceSelectorStatisticsMsg *msg);
void ReadGetTimeReferenceSelectorStatisticsResponseMsg(uint8 const **data, GetTimeReferenceSelectorStatisticsResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetTimeReferenceSelectorStatisticsMsg(uint8 const **data, GetTimeReferenceSelectorStatisticsMsg *msg);
#endif


/* Holdover Averaging Period message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 holdoverAveragingPeriod;
} HoldoverAveragingPeriodMsg;

typedef HoldoverAveragingPeriodMsg SetHoldoverAveragingPeriodMsg;
typedef HoldoverAveragingPeriodMsg SetHoldoverAveragingPeriodResponseMsg;
typedef ToPSyncMsgHeader		   GetHoldoverAveragingPeriodMsg;
typedef HoldoverAveragingPeriodMsg GetHoldoverAveragingPeriodResponseMsg;


/* Generic function */
void ReadHoldoverAveragingPeriodMsg(uint8 const **data, HoldoverAveragingPeriodMsg *msg);
void WriteHoldoverAveragingPeriodMsg(uint8 **data, const HoldoverAveragingPeriodMsg *msg);

void ReadSetHoldoverAveragingPeriodMsg(uint8 const **data, SetHoldoverAveragingPeriodMsg *msg);
void WriteSetHoldoverAveragingPeriodResponseMsg(uint8 **data, const SetHoldoverAveragingPeriodResponseMsg *msg);
void WriteGetHoldoverAveragingPeriodResponseMsg(uint8 **data, const GetHoldoverAveragingPeriodResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetHoldoverAveragingPeriodMsg(uint8 **data, const SetHoldoverAveragingPeriodMsg *msg);
void ReadSetHoldoverAveragingPeriodResponseMsg(uint8 const **data, SetHoldoverAveragingPeriodResponseMsg *msg);
void WriteGetHoldoverAveragingPeriodMsg(uint8 **data, const GetHoldoverAveragingPeriodMsg *msg);
void ReadGetHoldoverAveragingPeriodResponseMsg(uint8 const **data, GetHoldoverAveragingPeriodResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetHoldoverAveragingPeriodMsg(uint8 const **data, GetHoldoverAveragingPeriodMsg *msg);
#endif








/* Holdover Duration */
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 holdoverDuration;
} HoldoverDurationMsg;

typedef HoldoverDurationMsg SetHoldoverDurationMsg;
typedef HoldoverDurationMsg SetHoldoverDurationResponseMsg;
typedef ToPSyncMsgHeader	GetHoldoverDurationMsg;
typedef HoldoverDurationMsg GetHoldoverDurationResponseMsg;

/* Generic function */
void ReadHoldoverDurationMsg(uint8 const **data, HoldoverDurationMsg *msg);
void WriteHoldoverDurationMsg(uint8 **data, const HoldoverDurationMsg *msg);

void ReadSetHoldoverDurationMsg(uint8 const **data, SetHoldoverDurationMsg *msg);
void WriteSetHoldoverDurationResponseMsg(uint8 **data, const SetHoldoverDurationResponseMsg *msg);
void WriteGetHoldoverDurationResponseMsg(uint8 **data, const GetHoldoverDurationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetHoldoverDurationMsg(uint8 **data, const SetHoldoverDurationMsg *msg);
void ReadSetHoldoverDurationResponseMsg(uint8 const **data, SetHoldoverDurationResponseMsg *msg);
void WriteGetHoldoverDurationMsg(uint8 **data, const GetHoldoverDurationMsg *msg);
void ReadGetHoldoverDurationResponseMsg(uint8 const **data, GetHoldoverDurationResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetHoldoverDurationMsg(uint8 const **data, GetHoldoverDurationMsg *msg);
#endif




/* Force Holdover message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool time; /* TRUE means time output is forced, FALSE means frequency output is forced */
	Bool forceHoldover;
} ForceHoldoverMsg;

typedef ForceHoldoverMsg SetForceHoldoverMsg;
typedef ForceHoldoverMsg SetForceHoldoverResponseMsg;
typedef ForceHoldoverMsg GetForceHoldoverMsg; /* forceHoldover field not used */
typedef ForceHoldoverMsg GetForceHoldoverResponseMsg;

/* Generic function */
void ReadForceHoldoverMsg(uint8 const **data, ForceHoldoverMsg *msg);
void WriteForceHoldoverMsg(uint8 **data, const ForceHoldoverMsg *msg);

void ReadSetForceHoldoverMsg(uint8 const **data, SetForceHoldoverMsg *msg);
void WriteSetForceHoldoverResponseMsg(uint8 **data, const SetForceHoldoverResponseMsg *msg);
void ReadGetForceHoldoverMsg(uint8 const **data, GetForceHoldoverMsg *msg);
void WriteGetForceHoldoverResponseMsg(uint8 **data, const GetForceHoldoverResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetForceHoldoverMsg(uint8 **data, const SetForceHoldoverMsg *msg);
void ReadSetForceHoldoverResponseMsg(uint8 const **data, SetForceHoldoverResponseMsg *msg);
void WriteGetForceHoldoverMsg(uint8 **data, const GetForceHoldoverMsg *msg);
void ReadGetForceHoldoverResponseMsg(uint8 const **data, GetForceHoldoverResponseMsg *msg);
#endif








/* Reset Holdover Data
 */
typedef ToPSyncMsgHeader ResetHoldoverDataMsg;
typedef ToPSyncMsgHeader ResetHoldoverDataResponseMsg;
void WriteResetHoldoverDataResponseMsg(uint8 **data, const ResetHoldoverDataResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteResetHoldoverDataMsg(uint8 **data, const ResetHoldoverDataMsg *msg);
void ReadResetHoldoverDataResponseMsg(uint8 const **data, ResetHoldoverDataResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadResetHoldoverDataMsg(uint8 const **data, ResetHoldoverDataMsg *msg);
#endif







/* Suppress Phase Jump message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool phaseJumpSuppressionEnabled;
} SuppressPhaseJumpMsg;

typedef SuppressPhaseJumpMsg SetSuppressPhaseJumpMsg;
typedef SuppressPhaseJumpMsg SetSuppressPhaseJumpResponseMsg;
typedef ToPSyncMsgHeader	 GetSuppressPhaseJumpMsg;
typedef SuppressPhaseJumpMsg GetSuppressPhaseJumpResponseMsg;

/* Generic function */
void ReadSuppressPhaseJumpMsg(uint8 const **data, SuppressPhaseJumpMsg *msg);
void WriteSuppressPhaseJumpMsg(uint8 **data, const SuppressPhaseJumpMsg *msg);

//void ReadSetSuppressPhaseJumpMsg(uint8 const **data, SetSuppressPhaseJumpMsg *msg);
//void WriteSetSuppressPhaseJumpResponseMsg(uint8 **data, const SetSuppressPhaseJumpResponseMsg *msg);
//ade void ReadGetSuppressPhaseJumpMsg(uint8 const **data, GetSuppressPhaseJumpMsg *msg);
void WriteGetSuppressPhaseJumpResponseMsg(uint8 **data, const GetSuppressPhaseJumpResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetSuppressPhaseJumpMsg(uint8 **data, const SetSuppressPhaseJumpMsg *msg);
void ReadSetSuppressPhaseJumpResponseMsg(uint8 const **data, SetSuppressPhaseJumpResponseMsg *msg);
void WriteGetSuppressPhaseJumpMsg(uint8 **data, const GetSuppressPhaseJumpMsg *msg);
void ReadGetSuppressPhaseJumpResponseMsg(uint8 const **data, GetSuppressPhaseJumpResponseMsg *msg);
#endif







/* Maximum Frequency Offset message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	float maximumFrequencyOffset;
} MaximumFrequencyOffsetMsg;

typedef MaximumFrequencyOffsetMsg SetMaximumFrequencyOffsetMsg;
typedef MaximumFrequencyOffsetMsg SetMaximumFrequencyOffsetResponseMsg;
typedef ToPSyncMsgHeader		  GetMaximumFrequencyOffsetMsg;
typedef MaximumFrequencyOffsetMsg GetMaximumFrequencyOffsetResponseMsg;

/* Generic function */
void ReadMaximumFrequencyOffsetMsg(uint8 const **data, MaximumFrequencyOffsetMsg *msg);
void WriteMaximumFrequencyOffsetMsg(uint8 **data, const MaximumFrequencyOffsetMsg *msg);
void ReadSetMaximumFrequencyOffsetMsg(uint8 const **data, SetMaximumFrequencyOffsetMsg *msg);
void WriteSetMaximumFrequencyOffsetResponseMsg(uint8 **data, const SetMaximumFrequencyOffsetResponseMsg *msg);
void WriteGetMaximumFrequencyOffsetResponseMsg(uint8 **data, const GetMaximumFrequencyOffsetResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetMaximumFrequencyOffsetMsg(uint8 **data, const SetMaximumFrequencyOffsetMsg *msg);
void ReadSetMaximumFrequencyOffsetResponseMsg(uint8 const **data, SetMaximumFrequencyOffsetResponseMsg *msg);
void WriteGetMaximumFrequencyOffsetMsg(uint8 **data, const GetMaximumFrequencyOffsetMsg *msg);
void ReadGetMaximumFrequencyOffsetResponseMsg(uint8 const **data, GetMaximumFrequencyOffsetResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetMaximumFrequencyOffsetMsg(uint8 const **data, GetMaximumFrequencyOffsetMsg *msg);
#endif





/* Locked State Thresholds message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	LockedStateThresholds lockedStateThresholds;
} LockedStateThresholdsMsg;

typedef LockedStateThresholdsMsg SetLockedStateThresholdsMsg;
typedef LockedStateThresholdsMsg SetLockedStateThresholdsResponseMsg;
typedef ToPSyncMsgHeader		 GetLockedStateThresholdsMsg;
typedef LockedStateThresholdsMsg GetLockedStateThresholdsResponseMsg;

/* Generic function */
void ReadLockedStateThresholdsMsg(uint8 const **data, LockedStateThresholdsMsg *msg);
void WriteLockedStateThresholdsMsg(uint8 **data, const LockedStateThresholdsMsg *msg);
void ReadSetLockedStateThresholdsMsg(uint8 const **data, SetLockedStateThresholdsMsg *msg);
void WriteSetLockedStateThresholdsResponseMsg(uint8 **data, const SetLockedStateThresholdsResponseMsg *msg);
void WriteGetLockedStateThresholdsResponseMsg(uint8 **data, const GetLockedStateThresholdsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetLockedStateThresholdsMsg(uint8 **data, const SetLockedStateThresholdsMsg *msg);
void ReadSetLockedStateThresholdsResponseMsg(uint8 const **data, SetLockedStateThresholdsResponseMsg *msg);
void WriteGetLockedStateThresholdsMsg(uint8 **data, const GetLockedStateThresholdsMsg *msg);
void ReadGetLockedStateThresholdsResponseMsg(uint8 const **data, GetLockedStateThresholdsResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetLockedStateThresholdsMsg(uint8 const **data, GetLockedStateThresholdsMsg *msg);
#endif






/* Get Locked State message.
 */
typedef ToPSyncMsgHeader GetLockedStateMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	Bool isLocked;
} GetLockedStateResponseMsg;

void WriteGetLockedStateResponseMsg(uint8 **data, const GetLockedStateResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetLockedStateMsg(uint8 **data, const GetLockedStateMsg *msg);
void ReadGetLockedStateResponseMsg(uint8 const **data, GetLockedStateResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetLockedStateMsg(uint8 const **data, GetLockedStateMsg *msg);
#endif




/* Force locked Unlocked State message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	ForceLockedUnlockedState forceLockedUnlockedState;
} ForceLockedUnlockedStateMsg;

typedef ForceLockedUnlockedStateMsg SetForceLockedUnlockedStateMsg;
typedef ForceLockedUnlockedStateMsg SetForceLockedUnlockedStateResponseMsg;
typedef ToPSyncMsgHeader			GetForceLockedUnlockedStateMsg;
typedef ForceLockedUnlockedStateMsg GetForceLockedUnlockedStateResponseMsg;

/* Generic function */
void ReadForceLockedUnlockedStateMsg(uint8 const **data, ForceLockedUnlockedStateMsg *msg);
void WriteForceLockedUnlockedStateMsg(uint8 **data, const ForceLockedUnlockedStateMsg *msg);
void ReadSetForceLockedUnlockedStateMsg(uint8 const **data, SetForceLockedUnlockedStateMsg *msg);
void WriteSetForceLockedUnlockedStateResponseMsg(uint8 **data, const SetForceLockedUnlockedStateResponseMsg *msg);
void WriteGetForceLockedUnlockedStateResponseMsg(uint8 **data, const GetForceLockedUnlockedStateResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetForceLockedUnlockedStateMsg(uint8 **data, const SetForceLockedUnlockedStateMsg *msg);
void ReadSetForceLockedUnlockedStateResponseMsg(uint8 const **data, SetForceLockedUnlockedStateResponseMsg *msg);
void WriteGetForceLockedUnlockedStateMsg(uint8 **data, const GetForceLockedUnlockedStateMsg *msg);
void ReadGetForceLockedUnlockedStateResponseMsg(uint8 const **data, GetForceLockedUnlockedStateResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetForceLockedUnlockedStateMsg(uint8 const **data, GetForceLockedUnlockedStateMsg *msg);
#endif





/* Frequency Controller Parameters message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	FrequencyControllerParameters frequencyControllerParameters;
} FrequencyControllerParametersMsg;

typedef FrequencyControllerParametersMsg SetFrequencyControllerParametersMsg;
typedef FrequencyControllerParametersMsg SetFrequencyControllerParametersResponseMsg;
typedef ToPSyncMsgHeader				 GetFrequencyControllerParametersMsg;
typedef FrequencyControllerParametersMsg GetFrequencyControllerParametersResponseMsg;

/* Generic function */
void ReadFrequencyControllerParametersMsg(uint8 const **data, FrequencyControllerParametersMsg *msg);
void WriteFrequencyControllerParametersMsg(uint8 **data, const FrequencyControllerParametersMsg *msg);
void ReadSetFrequencyControllerParametersMsg(uint8 const **data, SetFrequencyControllerParametersMsg *msg);
void WriteSetFrequencyControllerParametersResponseMsg(uint8 **data, const SetFrequencyControllerParametersResponseMsg *msg);
void WriteGetFrequencyControllerParametersResponseMsg(uint8 **data, const GetFrequencyControllerParametersResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetFrequencyControllerParametersMsg(uint8 **data, const SetFrequencyControllerParametersMsg *msg);
void ReadSetFrequencyControllerParametersResponseMsg(uint8 const **data, SetFrequencyControllerParametersResponseMsg *msg);
void WriteGetFrequencyControllerParametersMsg(uint8 **data, const GetFrequencyControllerParametersMsg *msg);
void ReadGetFrequencyControllerParametersResponseMsg(uint8 const **data, GetFrequencyControllerParametersResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetFrequencyControllerParametersMsg(uint8 const **data, GetFrequencyControllerParametersMsg *msg);
#endif






typedef ToPSyncMsgHeader GetToPSyncTimeMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	ToPSyncTime time;
}GetToPSyncTimeResponseMsg;

void WriteGetToPSyncTimeResponseMsg(uint8 **data, const GetToPSyncTimeResponseMsg *msg);


#ifdef SEMTECH_TARGET
#define ReadGetToPSyncTimeMsg ReadToPSyncMessageHeader
#else
#define WriteGetToPSyncTimeMsg WriteToPSyncMessageHeader
void ReadGetToPSyncTimeResponseMsg(uint8 const **data, GetToPSyncTimeResponseMsg *msg);
#endif









/* ToPSync Parameter message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint16 parameterNumber;
	float parameterValue;
}ToPSyncParameterMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint16 parameterNumber;
}GetToPSyncParameterMsg;

typedef ToPSyncParameterMsg SetToPSyncParameterMsg;
typedef ToPSyncParameterMsg SetToPSyncParameterResponseMsg;
typedef ToPSyncParameterMsg GetToPSyncParameterResponseMsg;

/*generic*/
void ReadToPSyncParameterMsg(uint8 const **data, ToPSyncParameterMsg *msg);
void WriteToPSyncParameterMsg(uint8 **data, const ToPSyncParameterMsg *msg);
#define ReadSetToPSyncParameterMsg ReadToPSyncParameterMsg
#define WriteSetToPSyncParameterResponseMsg WriteToPSyncParameterMsg
#define WriteGetToPSyncParameterResponseMsg WriteToPSyncParameterMsg
void ReadGetToPSyncParameterMsg(uint8 const **data, GetToPSyncParameterMsg *msg);

#ifdef SEMTECH_TARGET
#else
#define ReadSetToPSyncParameterResponseMsg ReadToPSyncParameterMsg
#define WriteSetToPSyncParameterMsg WriteToPSyncParameterMsg
#define ReadGetToPSyncParameterResponseMsg ReadToPSyncParameterMsg
void WriteGetToPSyncParameterMsg(uint8 **data, const GetToPSyncParameterMsg *msg);
#endif


/* ToPSync Parameter message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8  id;
	uint16 parameterNumber;
	float parameterValue;
}GenericParameter1IdMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8  id;
	uint16 parameterNumber;
}GetGenericParameter1IdMsg;

typedef GenericParameter1IdMsg SetGenericParameter1IdMsg;
typedef GenericParameter1IdMsg SetGenericParameter1IdResponseMsg;
typedef GenericParameter1IdMsg GetGenericParameter1IdResponseMsg;


void ReadGenericParameter1IdMsg(uint8 const **data, GenericParameter1IdMsg *msg);
void WriteGenericParameter1IdMsg(uint8 **data, const GenericParameter1IdMsg *msg);
void ReadGetGenericParameter1IdMsg(uint8 const **data, GetGenericParameter1IdMsg *msg);

#define ReadSetGenericParameter1IdMsg ReadGenericParameter1IdMsg
#define WriteSetGenericParameter1IdResponseMsg WriteGenericParameter1IdMsg
#define WriteGetGenericParameter1IdResponseMsg WriteGenericParameter1IdMsg


#ifdef SEMTECH_TARGET
#else
#define ReadSetGenericParameter1IdResponseMsg ReadGenericParameter1IdMsg
#define WriteSetGenericParameter1IdMsg WriteGenericParameter1IdMsg
#define ReadGetGenericParameter1IdResponseMsg ReadGenericParameter1IdMsg

void WriteGetGenericParameter1IdMsg(uint8 **data, const GetGenericParameter1IdMsg *msg);
#endif




/* ToPSync 2 ID 1 Parameter message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8  id1;
	uint8 id2;
	uint16 parameterNumber;
	float parameterValue;
}GenericParameter2IdMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8  id1;
	uint8 id2;
	uint16 parameterNumber;
}GetGenericParameter2IdMsg;

typedef GenericParameter2IdMsg SetGenericParameter2IdMsg;
typedef GenericParameter2IdMsg SetGenericParameter2IdResponseMsg;
typedef GenericParameter2IdMsg GetGenericParameter2IdResponseMsg;


void ReadGenericParameter2IdMsg(uint8 const **data, GenericParameter2IdMsg *msg);
void WriteGenericParameter2IdMsg(uint8 **data, const GenericParameter2IdMsg *msg);
void ReadGetGenericParameter2IdMsg(uint8 const **data, GetGenericParameter2IdMsg *msg);

#define ReadSetGenericParameter2IdMsg ReadGenericParameter2IdMsg
#define WriteSetGenericParameter2IdResponseMsg WriteGenericParameter2IdMsg
#define WriteGetGenericParameter2IdResponseMsg WriteGenericParameter2IdMsg


#ifdef SEMTECH_TARGET
#else
#define ReadSetGenericParameter2IdResponseMsg ReadGenericParameter2IdMsg
#define WriteSetGenericParameter2IdMsg WriteGenericParameter2IdMsg
#define ReadGetGenericParameter2IdResponseMsg ReadGenericParameter2IdMsg

void WriteGetGenericParameter2IdMsg(uint8 **data, const GetGenericParameter2IdMsg *msg);
#endif



/* Lock Detector Threshold Multiple message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	float multiple;
}LockDetectorThresholdMultipleMsg;

typedef LockDetectorThresholdMultipleMsg SetLockDetectorThresholdMultipleMsg;
typedef LockDetectorThresholdMultipleMsg SetLockDetectorThresholdMultipleResponseMsg;
typedef LockDetectorThresholdMultipleMsg GetLockDetectorThresholdMultipleResponseMsg;
typedef ToPSyncMsgHeader GetLockDetectorThresholdMultipleMsg;

/*generic*/
void ReadLockDetectorThresholdMultipleMsg(uint8 const **data, LockDetectorThresholdMultipleMsg *msg);
void WriteLockDetectorThresholdMultipleMsg(uint8 **data, const LockDetectorThresholdMultipleMsg *msg);
#define ReadSetLockDetectorThresholdMultipleMsg ReadLockDetectorThresholdMultipleMsg
#define WriteSetLockDetectorThresholdMultipleResponseMsg WriteLockDetectorThresholdMultipleMsg
#define WriteGetLockDetectorThresholdMultipleResponseMsg WriteLockDetectorThresholdMultipleMsg
#define ReadGetLockDetectorThresholdMultipleMsg ReadToPSyncMessageHeader

#ifdef SEMTECH_TARGET
#else
#define ReadSetLockDetectorThresholdMultipleResponseMsg ReadLockDetectorThresholdMultipleMsg
#define WriteSetLockDetectorThresholdMultipleMsg WriteLockDetectorThresholdMultipleMsg
#define ReadGetLockDetectorThresholdMultipleResponseMsg ReadLockDetectorThresholdMultipleMsg
#define WriteGetLockDetectorThresholdMultipleMsg WriteToPSyncMessageHeader
#endif







/* GET NODE UTC OFFSET
 */
typedef struct
{
	ToPSyncMsgHeader header;
	sint16 offset;
}NodeUTCOffsetMsg;


typedef NodeUTCOffsetMsg GetNodeUTCOffsetResponseMsg;
typedef ToPSyncMsgHeader GetNodeUTCOffsetMsg;

void WriteNodeUTCOffsetMsg(uint8 **data, const NodeUTCOffsetMsg *msg);
#define WriteGetNodeUTCOffsetResponseMsg WriteNodeUTCOffsetMsg
#define ReadGetNodeUTCOffsetMsg ReadToPSyncMessageHeader

#ifdef SEMTECH_TARGET
#else
void ReadNodeUTCOffsetMsg(uint8 const **data, NodeUTCOffsetMsg *msg);
#define ReadGetNodeUTCOffsetResponseMsg ReadNodeUTCOffsetMsg
#define WriteGetNodeUTCOffsetMsg WriteToPSyncMessageHeader
#endif




/* Get / Set Reduction In Clock Stratum
*/
typedef struct
{
	ToPSyncMsgHeader header;
	ClockStratum reductionInClockStratum;
}ReductionInClockStratumMsg;


typedef ReductionInClockStratumMsg SetReductionInClockStratumMsg;
typedef ReductionInClockStratumMsg SetReductionInClockStratumResponseMsg;

typedef ToPSyncMsgHeader GetReductionInClockStratumMsg;
typedef ReductionInClockStratumMsg GetReductionInClockStratumResponseMsg;

/*generic*/
void ReadReductionInClockStratumMsg(uint8 const **data, ReductionInClockStratumMsg *msg);
void WriteReductionInClockStratumMsg(uint8 **data, const ReductionInClockStratumMsg *msg);

#define ReadSetReductionInClockStratumMsg ReadReductionInClockStratumMsg
#define WriteSetReductionInClockStratumResponseMsg WriteReductionInClockStratumMsg
#define ReadGetReductionInClockStratumMsg ReadToPSyncMessageHeader
#define WriteGetReductionInClockStratumResponseMsg WriteReductionInClockStratumMsg

#ifdef SEMTECH_TARGET
#else
#define WriteSetReductionInClockStratumMsg WriteReductionInClockStratumMsg
#define ReadSetReductionInClockStratumResponseMsg ReadReductionInClockStratumMsg
#define WriteGetReductionInClockStratumMsg WriteToPSyncMessageHeader
#define ReadGetReductionInClockStratumResponseMsg ReadReductionInClockStratumMsg
#endif






/********************************
 * Time Reference Source
 *******************************/

/* Get Time Reference Source message.
 */
typedef GenericTimeReferenceSourceMsg GetTimeReferenceSourceMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	TimeReferenceSourceDetails timeReferenceSourceDetails;
} GetTimeReferenceSourceResponseMsg;

void ReadGetTimeReferenceSourceMsg(uint8 const **data, GetTimeReferenceSourceMsg *msg);
void WriteGetTimeReferenceSourceResponseMsg(uint8 **data, const GetTimeReferenceSourceResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetTimeReferenceSourceMsg(uint8 **data, const GetTimeReferenceSourceMsg *msg);
void ReadGetTimeReferenceSourceResponseMsg(uint8 const **data, GetTimeReferenceSourceResponseMsg *msg);
#endif











/* Get Time Reference Source Configuration message.
 */
typedef GenericTimeReferenceSourceMsg GetTimeReferenceConfigurationMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	ReferenceClockConfiguration configuration;
} TimeReferenceConfigurationMsg;

typedef TimeReferenceConfigurationMsg GetTimeReferenceConfigurationResponseMsg;
typedef TimeReferenceConfigurationMsg SetTimeReferenceConfigurationMsg;
typedef TimeReferenceConfigurationMsg SetTimeReferenceConfigurationResponseMsg;

/* genericRead/Write Get */
void ReadTimeReferenceConfigurationMsg(uint8 const **data, TimeReferenceConfigurationMsg *msg);
void WriteTimeReferenceConfigurationMsg(uint8 **data, const TimeReferenceConfigurationMsg *msg);

#define ReadGetTimeReferenceConfigurationMsg ReadGenericTimeReferenceSourceMsg
#define WriteGetTimeReferenceConfigurationResponseMsg WriteTimeReferenceConfigurationMsg
#define ReadSetTimeReferenceConfigurationMsg ReadTimeReferenceConfigurationMsg
#define WriteSetTimeReferenceConfigurationResponseMsg WriteTimeReferenceConfigurationMsg

#ifdef SEMTECH_TARGET
#else
#define WriteGetTimeReferenceConfigurationMsg WriteGenericTimeReferenceSourceMsg
#define ReadGetTimeReferenceConfigurationResponseMsg ReadTimeReferenceConfigurationMsg
#define WriteSetTimeReferenceConfigurationMsg WriteTimeReferenceConfigurationMsg
#define ReadSetTimeReferenceConfigurationResponseMsg ReadTimeReferenceConfigurationMsg
#endif










/* Filter Bandwidths message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	Frequency lockedMasterToSlaveFilterBandwidth;
	Frequency lockedSlaveToMasterFilterBandwidth;
	Frequency unlockedMasterToSlaveFilterBandwidth;
	Frequency unlockedSlaveToMasterFilterBandwidth;
} FilterBandwidthsMsg;

typedef FilterBandwidthsMsg 	  SetFilterBandwidthsMsg;
typedef FilterBandwidthsMsg 	  SetFilterBandwidthsResponseMsg;
typedef GenericTimeReferenceSourceMsg GetFilterBandwidthsMsg;
typedef FilterBandwidthsMsg 	  GetFilterBandwidthsResponseMsg;

/* Generic functions */
void ReadFilterBandwidthsMsg(uint8 const **data, FilterBandwidthsMsg *msg);
void WriteFilterBandwidthsMsg(uint8 **data, const FilterBandwidthsMsg *msg);
void ReadSetFilterBandwidthsMsg(uint8 const **data, SetFilterBandwidthsMsg *msg);
void WriteSetFilterBandwidthsResponseMsg(uint8 **data, const SetFilterBandwidthsResponseMsg *msg);
void ReadGetFilterBandwidthsMsg(uint8 const **data, GetFilterBandwidthsMsg *msg);
void WriteGetFilterBandwidthsResponseMsg(uint8 **data, const GetFilterBandwidthsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetFilterBandwidthsMsg(uint8 **data, const SetFilterBandwidthsMsg *msg);
void ReadSetFilterBandwidthsResponseMsg(uint8 const **data, SetFilterBandwidthsResponseMsg *msg);
void WriteGetFilterBandwidthsMsg(uint8 **data, const GetFilterBandwidthsMsg *msg);
void ReadGetFilterBandwidthsResponseMsg(uint8 const **data, GetFilterBandwidthsResponseMsg *msg);
#endif







/* Initial Frequency Measurement Parameters message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	uint16 initialFrequencyMeasurementDuration; /* in seconds */
	uint16 minimumFrequencyMeasurementSamples;
} InitialFrequencyMeasurementParametersMsg;

typedef InitialFrequencyMeasurementParametersMsg SetInitialFrequencyMeasurementParametersMsg;
typedef InitialFrequencyMeasurementParametersMsg SetInitialFrequencyMeasurementParametersResponseMsg;
typedef GenericTimeReferenceSourceMsg			 GetInitialFrequencyMeasurementParametersMsg;
typedef InitialFrequencyMeasurementParametersMsg GetInitialFrequencyMeasurementParametersResponseMsg;

/* Generic function */
void ReadInitialFrequencyMeasurementParametersMsg(uint8 const **data, InitialFrequencyMeasurementParametersMsg *msg);
void WriteInitialFrequencyMeasurementParametersMsg(uint8 **data, const InitialFrequencyMeasurementParametersMsg *msg);
void ReadSetInitialFrequencyMeasurementParametersMsg(uint8 const **data, SetInitialFrequencyMeasurementParametersMsg *msg);
void WriteSetInitialFrequencyMeasurementParametersResponseMsg(uint8 **data, const SetInitialFrequencyMeasurementParametersResponseMsg *msg);
void ReadGetInitialFrequencyMeasurementParametersMsg(uint8 const **data, GetInitialFrequencyMeasurementParametersMsg *msg);
void WriteGetInitialFrequencyMeasurementParametersResponseMsg(uint8 **data, const GetInitialFrequencyMeasurementParametersResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetInitialFrequencyMeasurementParametersMsg(uint8 **data, const SetInitialFrequencyMeasurementParametersMsg *msg);
void ReadSetInitialFrequencyMeasurementParametersResponseMsg(uint8 const **data, SetInitialFrequencyMeasurementParametersResponseMsg *msg);
void WriteGetInitialFrequencyMeasurementParametersMsg(uint8 **data, const GetInitialFrequencyMeasurementParametersMsg *msg);
void ReadGetInitialFrequencyMeasurementParametersResponseMsg(uint8 const **data, GetInitialFrequencyMeasurementParametersResponseMsg *msg);
#endif










/* Maximum Phase Error Before Phase Realignment message;
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	ElapsedTime maximumPhaseError;
} MaxPhaseErrorBeforePhaseRealignmentMsg;

typedef MaxPhaseErrorBeforePhaseRealignmentMsg SetMaxPhaseErrorBeforePhaseRealignmentMsg;
typedef MaxPhaseErrorBeforePhaseRealignmentMsg SetMaxPhaseErrorBeforePhaseRealignmentResponseMsg;
typedef GenericTimeReferenceSourceMsg		   GetMaxPhaseErrorBeforePhaseRealignmentMsg;
typedef MaxPhaseErrorBeforePhaseRealignmentMsg GetMaxPhaseErrorBeforePhaseRealignmentResponseMsg;

/* Generic function */
void ReadMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 const **data, MaxPhaseErrorBeforePhaseRealignmentMsg *msg);
void WriteMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 **data, const MaxPhaseErrorBeforePhaseRealignmentMsg *msg);

void ReadSetMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 const **data, SetMaxPhaseErrorBeforePhaseRealignmentMsg *msg);
void WriteSetMaxPhaseErrorBeforePhaseRealignmentResponseMsg(uint8 **data, const SetMaxPhaseErrorBeforePhaseRealignmentResponseMsg *msg);
void ReadGetMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 const **data, GetMaxPhaseErrorBeforePhaseRealignmentMsg *msg);
void WriteGetMaxPhaseErrorBeforePhaseRealignmentResponseMsg(uint8 **data, const GetMaxPhaseErrorBeforePhaseRealignmentResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 **data, const SetMaxPhaseErrorBeforePhaseRealignmentMsg *msg);
void ReadSetMaxPhaseErrorBeforePhaseRealignmentResponseMsg(uint8 const **data, SetMaxPhaseErrorBeforePhaseRealignmentResponseMsg *msg);
void WriteGetMaxPhaseErrorBeforePhaseRealignmentMsg(uint8 **data, const GetMaxPhaseErrorBeforePhaseRealignmentMsg *msg);
void ReadGetMaxPhaseErrorBeforePhaseRealignmentResponseMsg(uint8 const **data, GetMaxPhaseErrorBeforePhaseRealignmentResponseMsg *msg);
#endif






/* Proportional and Integral Gains message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	float unlockedProportionalGain;
	float lockedProportionalGain;
	float unlockedIntegralGain;
	float lockedIntegralGain;
} ProportionalAndIntegralGainsMsg;

typedef ProportionalAndIntegralGainsMsg  SetProportionalAndIntegralGainsMsg;
typedef ProportionalAndIntegralGainsMsg  SetProportionalAndIntegralGainsResponseMsg;
typedef GenericTimeReferenceSourceMsg	 GetProportionalAndIntegralGainsMsg;
typedef ProportionalAndIntegralGainsMsg  GetProportionalAndIntegralGainsResponseMsg;

/* Generic function */
void ReadProportionalAndIntegralGainsMsg(uint8 const **data, ProportionalAndIntegralGainsMsg *msg);
void WriteProportionalAndIntegralGainsMsg(uint8 **data, const ProportionalAndIntegralGainsMsg *msg);
void ReadSetProportionalAndIntegralGainsMsg(uint8 const **data, SetProportionalAndIntegralGainsMsg *msg);
void WriteSetProportionalAndIntegralGainsResponseMsg(uint8 **data, const SetProportionalAndIntegralGainsResponseMsg *msg);
void ReadGetProportionalAndIntegralGainsMsg(uint8 const **data, GetProportionalAndIntegralGainsMsg *msg);
void WriteGetProportionalAndIntegralGainsResponseMsg(uint8 **data, const GetProportionalAndIntegralGainsResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetProportionalAndIntegralGainsMsg(uint8 **data, const SetProportionalAndIntegralGainsMsg *msg);
void ReadSetProportionalAndIntegralGainsResponseMsg(uint8 const **data, SetProportionalAndIntegralGainsResponseMsg *msg);
void WriteGetProportionalAndIntegralGainsMsg(uint8 **data, const GetProportionalAndIntegralGainsMsg *msg);
void ReadGetProportionalAndIntegralGainsResponseMsg(uint8 const **data, GetProportionalAndIntegralGainsResponseMsg *msg);
#endif




/* Noise Analyser Bandwidths message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	Frequency noiseAnalyserOpenBandwidth;
	Frequency noiseAnalyserClosedBandwidth;
} NoiseAnalyserBandwidthsMsg;

typedef NoiseAnalyserBandwidthsMsg		 SetNoiseAnalyserBandwidthsMsg;
typedef NoiseAnalyserBandwidthsMsg		 SetNoiseAnalyserBandwidthsResponseMsg;
typedef GenericTimeReferenceSourceMsg	 GetNoiseAnalyserBandwidthsMsg;
typedef NoiseAnalyserBandwidthsMsg		 GetNoiseAnalyserBandwidthsResponseMsg;

/* Generic function */
void ReadNoiseAnalyserBandwidthsMsg(uint8 const **data, NoiseAnalyserBandwidthsMsg *msg);
void WriteNoiseAnalyserBandwidthsMsg(uint8 **data, const NoiseAnalyserBandwidthsMsg *msg);
void ReadSetNoiseAnalyserBandwidthsMsg(uint8 const **data, SetNoiseAnalyserBandwidthsMsg *msg);
void WriteSetNoiseAnalyserBandwidthsResponseMsg(uint8 **data, const SetNoiseAnalyserBandwidthsResponseMsg *msg);
void ReadGetNoiseAnalyserBandwidthsMsg(uint8 const **data, GetNoiseAnalyserBandwidthsMsg *msg);
void WriteGetNoiseAnalyserBandwidthsResponseMsg(uint8 **data, const GetNoiseAnalyserBandwidthsResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetNoiseAnalyserBandwidthsMsg(uint8 **data, const SetNoiseAnalyserBandwidthsMsg *msg);
void ReadSetNoiseAnalyserBandwidthsResponseMsg(uint8 const **data, SetNoiseAnalyserBandwidthsResponseMsg *msg);
void WriteGetNoiseAnalyserBandwidthsMsg(uint8 **data, const GetNoiseAnalyserBandwidthsMsg *msg);
void ReadGetNoiseAnalyserBandwidthsResponseMsg(uint8 const **data, GetNoiseAnalyserBandwidthsResponseMsg *msg);
#endif







/* Noise Analyser Number Of Filters message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	uint8 numberOfFilters;
} NoiseAnalyserNumberOfFiltersMsg;

typedef NoiseAnalyserNumberOfFiltersMsg  SetNoiseAnalyserNumberOfFiltersMsg;
typedef NoiseAnalyserNumberOfFiltersMsg  SetNoiseAnalyserNumberOfFiltersResponseMsg;
typedef GenericTimeReferenceSourceMsg	 GetNoiseAnalyserNumberOfFiltersMsg;
typedef NoiseAnalyserNumberOfFiltersMsg  GetNoiseAnalyserNumberOfFiltersResponseMsg;

/* Generic function */
void ReadNoiseAnalyserNumberOfFiltersMsg(uint8 const **data, NoiseAnalyserNumberOfFiltersMsg *msg);
void WriteNoiseAnalyserNumberOfFiltersMsg(uint8 **data, const NoiseAnalyserNumberOfFiltersMsg *msg);
void ReadSetNoiseAnalyserNumberOfFiltersMsg(uint8 const **data, SetNoiseAnalyserNumberOfFiltersMsg *msg);
void WriteSetNoiseAnalyserNumberOfFiltersResponseMsg(uint8 **data, const SetNoiseAnalyserNumberOfFiltersResponseMsg *msg);
void ReadGetNoiseAnalyserNumberOfFiltersMsg(uint8 const **data, GetNoiseAnalyserNumberOfFiltersMsg *msg);
void WriteGetNoiseAnalyserNumberOfFiltersResponseMsg(uint8 **data, const GetNoiseAnalyserNumberOfFiltersResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetNoiseAnalyserNumberOfFiltersMsg(uint8 **data, const SetNoiseAnalyserNumberOfFiltersMsg *msg);
void ReadSetNoiseAnalyserNumberOfFiltersResponseMsg(uint8 const **data, SetNoiseAnalyserNumberOfFiltersResponseMsg *msg);
void WriteGetNoiseAnalyserNumberOfFiltersMsg(uint8 **data, const GetNoiseAnalyserNumberOfFiltersMsg *msg);
void ReadGetNoiseAnalyserNumberOfFiltersResponseMsg(uint8 const **data, GetNoiseAnalyserNumberOfFiltersResponseMsg *msg);
#endif





/* Configured Phase Offset message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	float configuredPhaseLag;
} ConfiguredPhaseLagMsg;

typedef ConfiguredPhaseLagMsg SetConfiguredPhaseLagMsg;
typedef ConfiguredPhaseLagMsg SetConfiguredPhaseLagResponseMsg;
typedef GenericTimeReferenceSourceMsg  GetConfiguredPhaseLagMsg;
typedef ConfiguredPhaseLagMsg GetConfiguredPhaseLagResponseMsg;

/* Generic function */
void ReadConfiguredPhaseLagMsg(uint8 const **data, ConfiguredPhaseLagMsg *msg);
void WriteConfiguredPhaseLagMsg(uint8 **data, const ConfiguredPhaseLagMsg *msg);
void ReadSetConfiguredPhaseLagMsg(uint8 const **data, SetConfiguredPhaseLagMsg *msg);
void WriteSetConfiguredPhaseLagResponseMsg(uint8 **data, const SetConfiguredPhaseLagResponseMsg *msg);
void ReadGetConfiguredPhaseLagMsg(uint8 const **data, GetConfiguredPhaseLagMsg *msg);
void WriteGetConfiguredPhaseLagResponseMsg(uint8 **data, const GetConfiguredPhaseLagResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetConfiguredPhaseLagMsg(uint8 **data, const SetConfiguredPhaseLagMsg *msg);
void ReadSetConfiguredPhaseLagResponseMsg(uint8 const **data, SetConfiguredPhaseLagResponseMsg *msg);
void WriteGetConfiguredPhaseLagMsg(uint8 **data, const GetConfiguredPhaseLagMsg *msg);
void ReadGetConfiguredPhaseLagResponseMsg(uint8 const **data, GetConfiguredPhaseLagResponseMsg *msg);
#endif







/* Port Time Correction Configuration
*/

typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	Bool enabled;
	uint32 monitoringPeriod;
} TimeCorrectionConfigurationMsg;

typedef TimeCorrectionConfigurationMsg SetTimeCorrectionConfigurationMsg;
typedef TimeCorrectionConfigurationMsg SetTimeCorrectionConfigurationResponseMsg;
typedef GenericTimeReferenceSourceMsg  GetTimeCorrectionConfigurationMsg;
typedef TimeCorrectionConfigurationMsg GetTimeCorrectionConfigurationResponseMsg;

/* Generic function */
void ReadTimeCorrectionConfigurationMsg(uint8 const **data, TimeCorrectionConfigurationMsg *msg);
void WriteTimeCorrectionConfigurationMsg(uint8 **data, const TimeCorrectionConfigurationMsg *msg);
//void ReadSetTimeCorrectionConfigurationMsg(uint8 const **data, SetTimeCorrectionConfigurationMsg *msg);
//void WriteSetTimeCorrectionConfigurationResponseMsg(uint8 **data, const SetTimeCorrectionConfigurationResponseMsg *msg);
//void ReadGetTimeCorrectionConfigurationMsg(uint8 const **data, GetTimeCorrectionConfigurationMsg *msg);
void WriteGetTimeCorrectionConfigurationResponseMsg(uint8 **data, const GetTimeCorrectionConfigurationResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetTimeCorrectionConfigurationMsg(uint8 **data, const SetTimeCorrectionConfigurationMsg *msg);
void ReadSetTimeCorrectionConfigurationResponseMsg(uint8 const **data, SetTimeCorrectionConfigurationResponseMsg *msg);
void WriteGetTimeCorrectionConfigurationMsg(uint8 **data, const GetTimeCorrectionConfigurationMsg *msg);
void ReadGetTimeCorrectionConfigurationResponseMsg(uint8 const **data, GetTimeCorrectionConfigurationResponseMsg *msg);
#endif


















/* Port Time Correction Damping Factor
*/

typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	float dampingFactor;
} TimeCorrectionDampingFactorMsg;

typedef TimeCorrectionDampingFactorMsg SetTimeCorrectionDampingFactorMsg;
typedef TimeCorrectionDampingFactorMsg SetTimeCorrectionDampingFactorResponseMsg;
typedef GenericTimeReferenceSourceMsg  GetTimeCorrectionDampingFactorMsg;
typedef TimeCorrectionDampingFactorMsg GetTimeCorrectionDampingFactorResponseMsg;

/* Generic function */
void ReadTimeCorrectionDampingFactorMsg(uint8 const **data, TimeCorrectionDampingFactorMsg *msg);
void WriteTimeCorrectionDampingFactorMsg(uint8 **data, const TimeCorrectionDampingFactorMsg *msg);
//void ReadSetTimeCorrectionDampingFactorMsg(uint8 const **data, SetTimeCorrectionDampingFactorMsg *msg);
//void WriteSetTimeCorrectionDampingFactorResponseMsg(uint8 **data, const SetTimeCorrectionDampingFactorResponseMsg *msg);
//void ReadGetTimeCorrectionDampingFactorMsg(uint8 const **data, GetTimeCorrectionDampingFactorMsg *msg);
//void WriteGetTimeCorrectionDampingFactorResponseMsg(uint8 **data, const GetTimeCorrectionDampingFactorResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetTimeCorrectionDampingFactorMsg(uint8 **data, const SetTimeCorrectionDampingFactorMsg *msg);
void ReadSetTimeCorrectionDampingFactorResponseMsg(uint8 const **data, SetTimeCorrectionDampingFactorResponseMsg *msg);
void WriteGetTimeCorrectionDampingFactorMsg(uint8 **data, const GetTimeCorrectionDampingFactorMsg *msg);
void ReadGetTimeCorrectionDampingFactorResponseMsg(uint8 const **data, GetTimeCorrectionDampingFactorResponseMsg *msg);
#endif








/* Source Utc Offset
*/
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
} TimeReferenceSourceUTCOffset;

typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	sint16 offset;
} TimeReferenceSourceUTCOffsetResp;

typedef TimeReferenceSourceUTCOffset		GetTimeReferenceSourceUTCOffsetMsg;
typedef TimeReferenceSourceUTCOffsetResp	GetTimeReferenceSourceUTCOffsetResponseMsg;

/*generic*/
void ReadTimeReferenceSourceUTCOffset(uint8 const **data, TimeReferenceSourceUTCOffset *msg);
void WriteTimeReferenceSourceUTCOffsetResp(uint8 **data, const TimeReferenceSourceUTCOffsetResp *msg);
#define ReadGetTimeReferenceSourceUTCOffsetMsg ReadTimeReferenceSourceUTCOffset
#define WriteTimeReferenceSourceUTCOffsetRespMsg WriteTimeReferenceSourceUTCOffsetResp

#ifdef SEMTECH_TARGET
#else
void ReadTimeReferenceSourceUTCOffsetResp(uint8 const **data, TimeReferenceSourceUTCOffsetResp *msg);
void WriteTimeReferenceSourceUTCOffset(uint8 **data, const TimeReferenceSourceUTCOffset *msg);
#define WriteGetTimeReferenceSourceUTCOffsetMsg WriteTimeReferenceSourceUTCOffset
#define ReadTimeReferenceSourceUTCOffsetRespMsg ReadTimeReferenceSourceUTCOffsetResp
#endif




/* Source noise analyser alarm threshold
*/
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	Direction direction;
	Bool onThreshold;
	Signal threshold;
} NoiseAnalyserAlarmThreshold;

typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	Direction direction;
	Bool onThreshold;
} GetNoiseAnalyserAlarmThreshold;

typedef NoiseAnalyserAlarmThreshold SetNoiseAnalyserAlarmThresholdMsg;
typedef NoiseAnalyserAlarmThreshold SetNoiseAnalyserAlarmThresholdResponseMsg;

typedef GetNoiseAnalyserAlarmThreshold	GetNoiseAnalyserAlarmThresholdMsg;
typedef NoiseAnalyserAlarmThreshold GetNoiseAnalyserAlarmThresholdResponseMsg;

/*generic*/
void ReadNoiseAnalyserAlarmThreshold(uint8 const **data, NoiseAnalyserAlarmThreshold *msg);
void WriteNoiseAnalyserAlarmThreshold(uint8 **data, const NoiseAnalyserAlarmThreshold *msg);
void ReadGetNoiseAnalyserAlarmThreshold(uint8 const **data, GetNoiseAnalyserAlarmThreshold *msg);
void WriteGetNoiseAnalyserAlarmThreshold(uint8 **data, const GetNoiseAnalyserAlarmThreshold *msg);
#define ReadSetNoiseAnalyserAlarmThresholdMsg	ReadNoiseAnalyserAlarmThreshold
#define WriteSetNoiseAnalyserAlarmThresholdResponseMsg	WriteNoiseAnalyserAlarmThreshold
#define ReadGetNoiseAnalyserAlarmThresholdMsg	ReadGetNoiseAnalyserAlarmThreshold
#define WriteGetNoiseAnalyserAlarmThresholdResponseMsg	WriteNoiseAnalyserAlarmThreshold


#ifdef SEMTECH_TARGET
#else
#define WriteSetNoiseAnalyserAlarmThresholdMsg	WriteNoiseAnalyserAlarmThreshold
#define ReadSetNoiseAnalyserAlarmThresholdResponseMsg	ReadNoiseAnalyserAlarmThreshold
#define WriteGetNoiseAnalyserAlarmThresholdMsg	WriteGetNoiseAnalyserAlarmThreshold
#define ReadGetNoiseAnalyserAlarmThresholdResponseMsg	ReadNoiseAnalyserAlarmThreshold
#endif






/*source pll bandwidths*/
typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	PLLid pllId;
	Bool locked;
	Frequency bandwidth;
} TimeReferenceSourcePLLBandwidth;

typedef TimeReferenceSourcePLLBandwidth	SetTimeReferenceSourcePLLBandwidthMsg;
typedef TimeReferenceSourcePLLBandwidth	SetTimeReferenceSourcePLLBandwidthResponseMsg;
typedef TimeReferenceSourcePLLBandwidth	GetTimeReferenceSourcePLLBandwidthResponseMsg;

/*generic*/
void ReadTimeReferenceSourcePLLBandwidth(uint8 const **data, TimeReferenceSourcePLLBandwidth *msg);
void WriteTimeReferenceSourcePLLBandwidth(uint8 **data, const TimeReferenceSourcePLLBandwidth *msg);
#define ReadSetTimeReferenceSourcePLLBandwidthMsg	ReadTimeReferenceSourcePLLBandwidth
#define WriteSetTimeReferenceSourcePLLBandwidthResponseMsg	WriteTimeReferenceSourcePLLBandwidth
#define WriteGetTimeReferenceSourcePLLBandwidthResponseMsg	WriteTimeReferenceSourcePLLBandwidth

#ifdef SEMTECH_TARGET
#else
#define ReadSetTimeReferenceSourcePLLBandwidthResponseMsg	ReadTimeReferenceSourcePLLBandwidth
#define ReadGetTimeReferenceSourcePLLBandwidthResponseMsg	ReadTimeReferenceSourcePLLBandwidth
#define WriteSetTimeReferenceSourcePLLBandwidthMsg	WriteTimeReferenceSourcePLLBandwidth
#endif





typedef struct
{
	ToPSyncMsgHeader header;
	TimeTransport timeSource;
	uint8 id;
	PLLid pllId;
	Bool locked;
} GetTimeReferenceSourcePLLBandwidthMsg;
void ReadGetTimeReferenceSourcePLLBandwidthMsg(uint8 const **data, GetTimeReferenceSourcePLLBandwidthMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetTimeReferenceSourcePLLBandwidthMsg(uint8 **data, const GetTimeReferenceSourcePLLBandwidthMsg *msg);
#endif



/********************************
 * Local Oscillator
 *******************************/

/* Local Oscillator Type message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	LocalOscillatorType localOscillatorType;
} LocalOscillatorTypeMsg;

typedef LocalOscillatorTypeMsg SetLocalOscillatorTypeMsg;
typedef LocalOscillatorTypeMsg SetLocalOscillatorTypeResponseMsg;
typedef ToPSyncMsgHeader	   GetLocalOscillatorTypeMsg;
typedef LocalOscillatorTypeMsg GetLocalOscillatorTypeResponseMsg;

/* Generic function */
void ReadLocalOscillatorTypeMsg(uint8 const **data, LocalOscillatorTypeMsg *msg);
void WriteLocalOscillatorTypeMsg(uint8 **data, const LocalOscillatorTypeMsg *msg);
void ReadSetLocalOscillatorTypeMsg(uint8 const **data, SetLocalOscillatorTypeMsg *msg);
void ReadGetLocalOscillatorTypeMsg(uint8 const **data, GetLocalOscillatorTypeMsg *msg);
void WriteGetLocalOscillatorTypeResponseMsg(uint8 **data, const GetLocalOscillatorTypeResponseMsg *msg);
void WriteSetLocalOscillatorTypeResponseMsg(uint8 **data, const SetLocalOscillatorTypeResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetLocalOscillatorTypeMsg(uint8 **data, const SetLocalOscillatorTypeMsg *msg);
void ReadSetLocalOscillatorTypeResponseMsg(uint8 const **data, SetLocalOscillatorTypeResponseMsg *msg);
void WriteGetLocalOscillatorTypeMsg(uint8 **data, const GetLocalOscillatorTypeMsg *msg);
void ReadGetLocalOscillatorTypeResponseMsg(uint8 const **data, GetLocalOscillatorTypeResponseMsg *msg);
#endif







/* Local Oscillator Stratum Level message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	ClockStratum stratumLevel;
} LocalOscillatorStratumLevelMsg;

typedef LocalOscillatorStratumLevelMsg SetLocalOscillatorStratumLevelMsg;
typedef LocalOscillatorStratumLevelMsg SetLocalOscillatorStratumLevelResponseMsg;
typedef ToPSyncMsgHeader			   GetLocalOscillatorStratumLevelMsg;
typedef LocalOscillatorStratumLevelMsg GetLocalOscillatorStratumLevelResponseMsg;

/* Generic function */
void ReadLocalOscillatorStratumLevelMsg(uint8 const **data, LocalOscillatorStratumLevelMsg *msg);
void WriteLocalOscillatorStratumLevelMsg(uint8 **data, const LocalOscillatorStratumLevelMsg *msg);

void ReadSetLocalOscillatorStratumLevelMsg(uint8 const **data, SetLocalOscillatorStratumLevelMsg *msg);
void WriteSetLocalOscillatorStratumLevelResponseMsg(uint8 **data, const SetLocalOscillatorStratumLevelResponseMsg *msg);
void ReadGetLocalOscillatorStratumLevelMsg(uint8 const **data, GetLocalOscillatorStratumLevelMsg *msg);
void WriteGetLocalOscillatorStratumLevelResponseMsg(uint8 **data, const GetLocalOscillatorStratumLevelResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetLocalOscillatorStratumLevelMsg(uint8 **data, const SetLocalOscillatorStratumLevelMsg *msg);
void ReadSetLocalOscillatorStratumLevelResponseMsg(uint8 const **data, SetLocalOscillatorStratumLevelResponseMsg *msg);
void WriteGetLocalOscillatorStratumLevelMsg(uint8 **data, const GetLocalOscillatorStratumLevelMsg *msg);
void ReadGetLocalOscillatorStratumLevelResponseMsg(uint8 const **data, GetLocalOscillatorStratumLevelResponseMsg *msg);
#endif







/* Local Oscillator Phase Noise Pairs message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint16 numberOfPairs;
	PhaseNoisePairs phaseNoisePairs;
} LocalOscillatorPhaseNoisePairsMsg;

typedef LocalOscillatorPhaseNoisePairsMsg SetLocalOscillatorPhaseNoisePairsMsg;
typedef LocalOscillatorPhaseNoisePairsMsg SetLocalOscillatorPhaseNoisePairsResponseMsg;
typedef ToPSyncMsgHeader				  GetLocalOscillatorPhaseNoisePairsMsg;
typedef LocalOscillatorPhaseNoisePairsMsg GetLocalOscillatorPhaseNoisePairsResponseMsg;

/* Generic function */
void ReadLocalOscillatorPhaseNoisePairsMsg(uint8 const **data, LocalOscillatorPhaseNoisePairsMsg *msg);
void WriteLocalOscillatorPhaseNoisePairsMsg(uint8 **data, const LocalOscillatorPhaseNoisePairsMsg *msg);
void ReadSetLocalOscillatorPhaseNoisePairsMsg(uint8 const **data, SetLocalOscillatorPhaseNoisePairsMsg *msg);
void WriteSetLocalOscillatorPhaseNoisePairsResponseMsg(uint8 **data, const SetLocalOscillatorPhaseNoisePairsResponseMsg *msg);


#ifdef SEMTECH_TARGET
#else
void WriteSetLocalOscillatorPhaseNoisePairsMsg(uint8 **data, const SetLocalOscillatorPhaseNoisePairsMsg *msg);
void ReadSetLocalOscillatorPhaseNoisePairsResponseMsg(uint8 const **data, SetLocalOscillatorPhaseNoisePairsResponseMsg *msg);
void WriteGetLocalOscillatorPhaseNoisePairsMsg(uint8 **data, const GetLocalOscillatorPhaseNoisePairsMsg *msg);
void ReadGetLocalOscillatorPhaseNoisePairsResponseMsg(uint8 const **data, GetLocalOscillatorPhaseNoisePairsResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetLocalOscillatorPhaseNoisePairsMsg(uint8 const **data, GetLocalOscillatorPhaseNoisePairsMsg *msg);
void WriteGetLocalOscillatorPhaseNoisePairsResponseMsg(uint8 **data, const GetLocalOscillatorPhaseNoisePairsResponseMsg *msg);
#endif











/********************************
 * System Management
 *******************************/

/* Seconds Since Last Reset message (up-time)
 */
typedef ToPSyncMsgHeader GetSecondsSinceLastResetMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 systemUpTime;
} GetSecondsSinceLastResetResponseMsg;

void WriteGetSecondsSinceLastResetResponseMsg(uint8 **data, const GetSecondsSinceLastResetResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetSecondsSinceLastResetMsg(uint8 **data, const GetSecondsSinceLastResetMsg *msg);
void ReadGetSecondsSinceLastResetResponseMsg(uint8 const **data, GetSecondsSinceLastResetResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetSecondsSinceLastResetMsg(uint8 const **data, GetSecondsSinceLastResetMsg *msg);
#endif





/* ToPSync Location message.
 */
typedef ToPSyncMsgHeader GetToPSyncLocationMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 locationId;
} GetToPSyncLocationResponseMsg;

void WriteGetToPSyncLocationResponseMsg(uint8 **data, const GetToPSyncLocationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetToPSyncLocationMsg(uint8 **data, const GetToPSyncLocationMsg *msg);
void ReadGetToPSyncLocationResponseMsg(uint8 const **data, GetToPSyncLocationResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetToPSyncLocationMsg(uint8 const **data, GetToPSyncLocationMsg *msg);
#endif





#if(0)
/* Ethernet MAC address message
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 portNumber;
	EthernetAddress macAddress;
} SetEthernetMacAddressMsg;
typedef SetEthernetMacAddressMsg SetEthernetMacAddressResponseMsg;

void ReadSetEthernetMacAddressMsg(uint8 const **data, SetEthernetMacAddressMsg *msg);
void WriteSetEthernetMacAddressMsg(uint8 **data, const SetEthernetMacAddressMsg *msg);
void WriteSetEthernetMacAddressResponseMsg(uint8 **data, const SetEthernetMacAddressResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadSetEthernetMacAddressResponseMsg(uint8 const **data, SetEthernetMacAddressResponseMsg *msg);
#endif

#endif






/* ToPSync Initial System configuration message.
   InitialSystemConfigurationMsg moved to near the top
 */


typedef InitialSystemConfigurationMsg SetInitialSystemConfigurationMsg;
typedef InitialSystemConfigurationMsg SetInitialSystemConfigurationResponseMsg;
typedef ToPSyncMsgHeader			  GetInitialSystemConfigurationMsg;
typedef InitialSystemConfigurationMsg GetInitialSystemConfigurationResponseMsg;

/* Generic function */
void ReadInitialSystemConfigurationMsg(uint8 const **data, InitialSystemConfigurationMsg *msg);
void WriteInitialSystemConfigurationMsg(uint8 **data, const InitialSystemConfigurationMsg *msg);
void ReadSetInitialSystemConfigurationMsg(uint8 const **data, SetInitialSystemConfigurationMsg *msg);
void WriteSetInitialSystemConfigurationResponseMsg(uint8 **data, const SetInitialSystemConfigurationResponseMsg *msg);
void WriteGetInitialSystemConfigurationResponseMsg(uint8 **data, const GetInitialSystemConfigurationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetInitialSystemConfigurationMsg(uint8 **data, const SetInitialSystemConfigurationMsg *msg);
void ReadSetInitialSystemConfigurationResponseMsg(uint8 const **data, SetInitialSystemConfigurationResponseMsg *msg);
void WriteGetInitialSystemConfigurationMsg(uint8 **data, const GetInitialSystemConfigurationMsg *msg);
void ReadGetInitialSystemConfigurationResponseMsg(uint8 const **data, GetInitialSystemConfigurationResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetInitialSystemConfigurationMsg(uint8 const **data, GetInitialSystemConfigurationMsg *msg);
#endif









/* ToPSync PTP System Parameters message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	ToPSyncPtpSystemParameters ptpSystemParameters;
} ToPSyncPtpSystemParametersMsg;

typedef ToPSyncPtpSystemParametersMsg SetToPSyncPtpSystemParametersMsg;
typedef ToPSyncPtpSystemParametersMsg SetToPSyncPtpSystemParametersResponseMsg;
typedef ToPSyncMsgHeader			  GetToPSyncPtpSystemParametersMsg;
typedef ToPSyncPtpSystemParametersMsg GetToPSyncPtpSystemParametersResponseMsg;

/* Generic function */
void ReadToPSyncPtpSystemParametersMsg(uint8 const **data, ToPSyncPtpSystemParametersMsg *msg);
void WriteToPSyncPtpSystemParametersMsg(uint8 **data, const ToPSyncPtpSystemParametersMsg *msg);

void ReadSetToPSyncPtpSystemParametersMsg(uint8 const **data, SetToPSyncPtpSystemParametersMsg *msg);
void WriteSetToPSyncPtpSystemParametersResponseMsg(uint8 **data, const SetToPSyncPtpSystemParametersResponseMsg *msg);
void WriteGetToPSyncPtpSystemParametersResponseMsg(uint8 **data, const GetToPSyncPtpSystemParametersResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetToPSyncPtpSystemParametersMsg(uint8 **data, const SetToPSyncPtpSystemParametersMsg *msg);
void ReadSetToPSyncPtpSystemParametersResponseMsg(uint8 const **data, SetToPSyncPtpSystemParametersResponseMsg *msg);
void WriteGetToPSyncPtpSystemParametersMsg(uint8 **data, const GetToPSyncPtpSystemParametersMsg *msg);
void ReadGetToPSyncPtpSystemParametersResponseMsg(uint8 const **data, GetToPSyncPtpSystemParametersResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetToPSyncPtpSystemParametersMsg(uint8 const **data, GetToPSyncPtpSystemParametersMsg *msg);
#endif







/* ToPSync Upload Configuration message.
 */
typedef struct
{
	ToPSyncMsgHeader header;
	ToPSyncUploadConfiguration uploadConfiguration;
} ToPSyncUploadConfigurationMsg;

typedef ToPSyncUploadConfigurationMsg SetToPSyncUploadConfigurationMsg;
typedef ToPSyncUploadConfigurationMsg SetToPSyncUploadConfigurationResponseMsg;
typedef ToPSyncMsgHeader			  GetToPSyncUploadConfigurationMsg;
typedef ToPSyncUploadConfigurationMsg GetToPSyncUploadConfigurationResponseMsg;

void ReadToPSyncUploadConfigurationMsg(uint8 const **data, ToPSyncUploadConfigurationMsg *msg);
void WriteToPSyncUploadConfigurationMsg(uint8 **data, const ToPSyncUploadConfigurationMsg *msg);
void ReadSetToPSyncUploadConfigurationMsg(uint8 const **data, SetToPSyncUploadConfigurationMsg *msg);
void WriteSetToPSyncUploadConfigurationResponseMsg(uint8 **data, const SetToPSyncUploadConfigurationResponseMsg *msg);
void WriteGetToPSyncUploadConfigurationResponseMsg(uint8 **data, const GetToPSyncUploadConfigurationResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteSetToPSyncUploadConfigurationMsg(uint8 **data, const SetToPSyncUploadConfigurationMsg *msg);
void ReadSetToPSyncUploadConfigurationResponseMsg(uint8 const **data, SetToPSyncUploadConfigurationResponseMsg *msg);
void WriteGetToPSyncUploadConfigurationMsg(uint8 **data, const GetToPSyncUploadConfigurationMsg *msg);
void ReadGetToPSyncUploadConfigurationResponseMsg(uint8 const **data, GetToPSyncUploadConfigurationResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetToPSyncUploadConfigurationMsg(uint8 const **data, GetToPSyncUploadConfigurationMsg *msg);
#endif










/* Security Key message
 */
typedef ToPSyncMsgHeader GetSecurityKeyMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint32 securityKey;
} GetSecurityKeyResponseMsg;

void WriteGetSecurityKeyResponseMsg(uint8 **data, const GetSecurityKeyResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetSecurityKeyMsg(uint8 **data, const GetSecurityKeyMsg *msg);
void ReadGetSecurityKeyResponseMsg(uint8 const **data, GetSecurityKeyResponseMsg *msg);
#endif

#ifdef KEEP_UNUSED_FUNCTION
void ReadGetSecurityKeyMsg(uint8 const **data, GetSecurityKeyMsg *msg);
#endif









/********************************
 * System Exceptions
 *******************************/

/* Get ToPSync System Exceptions
 */
typedef ToPSyncMsgHeader GetToPSyncSystemExceptionsMsg;
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 numberOfExceptions;
	ToPSyncSystemExceptionReport systemExceptionReport;
} GetToPSyncSystemExceptionsResponseMsg;

void WriteGetToPSyncSystemExceptionsResponseMsg(uint8 **data, const GetToPSyncSystemExceptionsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void WriteGetToPSyncSystemExceptionsMsg(uint8 **data, const GetToPSyncSystemExceptionsMsg *msg);
void ReadGetToPSyncSystemExceptionsResponseMsg(uint8 const **data, GetToPSyncSystemExceptionsResponseMsg *msg);
#endif


#ifdef KEEP_UNUSED_FUNCTION
void ReadGetToPSyncSystemExceptionsMsg(uint8 const **data, GetToPSyncSystemExceptionsMsg *msg);
#endif






/* Set ToPSync System Exceptions Configurations
 */
typedef struct
{
	ToPSyncMsgHeader header;
	Bool reportExceptionsUnsolicited;
} SetToPSyncSystemExceptionsConfigurationsMsg;

typedef SetToPSyncSystemExceptionsConfigurationsMsg SetToPSyncSystemExceptionsConfigurationsResponseMsg;
void ReadSetToPSyncSystemExceptionsConfigurationsMsg(uint8 const **data, SetToPSyncSystemExceptionsConfigurationsMsg *msg);
void WriteSetToPSyncSystemExceptionsConfigurationsMsg(uint8 **data, const SetToPSyncSystemExceptionsConfigurationsMsg *msg);

void WriteSetToPSyncSystemExceptionsConfigurationsResponseMsg(uint8 **data, const SetToPSyncSystemExceptionsConfigurationsResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadSetToPSyncSystemExceptionsConfigurationsResponseMsg(uint8 const **data, SetToPSyncSystemExceptionsConfigurationsResponseMsg *msg);
#endif









/********************************
 * Alarm Monitoring
 *******************************/
 /* Alarm Type Enabled message
  */
typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	Bool enabled;
} AlarmSourceEnabled;

typedef AlarmSourceEnabled SetAlarmSourceEnabledMsg;
typedef AlarmSourceEnabled SetAlarmSourceEnabledResponseMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
} GetAlarmSourceEnabled;

typedef GetAlarmSourceEnabled GetAlarmSourceEnabledMsg;
typedef AlarmSourceEnabled GetAlarmSourceEnabledResponseMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	AlarmSourceIdentity clientId;
	Bool enabled;
} AlarmSourceClientEnabled;

typedef AlarmSourceClientEnabled SetAlarmSourceClientEnabledMsg;
typedef AlarmSourceClientEnabled SetAlarmSourceClientEnabledResponseMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	AlarmSourceIdentity clientId;
} GetAlarmSourceClientEnabled;

typedef GetAlarmSourceClientEnabled GetAlarmSourceClientEnabledMsg;
typedef AlarmSourceClientEnabled GetAlarmSourceClientEnabledResponseMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	Bool		masked;
} GetAlarmSet;

typedef GetAlarmSet GetAlarmSetMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	Bool		masked;
	uint32		set;
} GetAlarmSetResponse;

typedef GetAlarmSetResponse GetAlarmSetResponseMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	AlarmSource alarmSource;
	Bool		masked;
	AlarmStateArray arrayOfSets;
} GetAlarmSetArrayResponse;

typedef GetAlarmSetArrayResponse GetAlarmSetArrayResponseMsg;
typedef GetAlarmSet GetAlarmSetArrayMsg;



/* Generic functions */
void ReadAlarmSourceEnabledMsg(uint8 const **data, AlarmSourceEnabled *msg);
void WriteAlarmSourceEnabledMsg(uint8 **data, const AlarmSourceEnabled *msg);
void ReadAlarmSourceClientEnabledMsg(uint8 const **data, AlarmSourceClientEnabled *msg);
void WriteAlarmSourceClientEnabledMsg(uint8 **data, const AlarmSourceClientEnabled *msg);
void ReadGetAlarmSourceEnabledMsg(uint8 const **data, GetAlarmSourceEnabled *msg);
void ReadGetAlarmSourceClientEnabledMsg(uint8 const **data, GetAlarmSourceClientEnabled *msg);
void ReadGetAlarmSetMsg(uint8 const **data, GetAlarmSetMsg *msg);
void WriteGetAlarmSetResponseMsg(uint8 **data, const GetAlarmSetResponseMsg *msg);
void WriteGetAlarmSetArrayResponseMsg(uint8 **data, const GetAlarmSetArrayResponseMsg *msg);


#define ReadSetAlarmSourceEnabledMsg			ReadAlarmSourceEnabledMsg
#define WriteSetAlarmSourceEnabledResponseMsg	WriteAlarmSourceEnabledMsg
#define WriteGetAlarmSourceEnabledResponseMsg	WriteAlarmSourceEnabledMsg
#define ReadSetAlarmSourceClientEnabledMsg			ReadAlarmSourceClientEnabledMsg
#define WriteSetAlarmSourceClientEnabledResponseMsg WriteAlarmSourceClientEnabledMsg
#define WriteGetAlarmSourceClientEnabledResponseMsg WriteAlarmSourceClientEnabledMsg
#define ReadGetAlarmSetArrayMsg					ReadGetAlarmSetMsg

#ifdef SEMTECH_TARGET
#else
void WriteGetAlarmSetMsg(uint8 **data, const GetAlarmSetMsg *msg);
void WriteGetAlarmSourceClientEnabledMsg(uint8 **data, const GetAlarmSourceClientEnabled *msg);
void WriteGetAlarmSourceEnabledMsg(uint8 **data, const GetAlarmSourceEnabled *msg);
void ReadGetAlarmSetResponseMsg(uint8 const **data, GetAlarmSetResponseMsg *msg);
void ReadGetAlarmSetArrayResponseMsg(uint8 const **data, GetAlarmSetArrayResponseMsg *msg);

#define WriteSetAlarmSourceEnabledMsg			WriteAlarmSourceEnabledMsg
#define ReadSetAlarmSourceEnabledResponseMsg	ReadAlarmSourceEnabledMsg
#define ReadGetAlarmSourceEnabledResponseMsg	ReadAlarmSourceEnabledMsg
#define WriteSetAlarmSourceClientEnabledMsg 		WriteAlarmSourceClientEnabledMsg
#define ReadSetAlarmSourceClientEnabledResponseMsg	ReadAlarmSourceClientEnabledMsg
#define ReadGetAlarmSourceClientEnabledResponseMsg	ReadAlarmSourceClientEnabledMsg
#define WriteGetAlarmSetArrayMsg				WriteGetAlarmSetMsg
#endif







typedef struct
{
	ToPSyncMsgHeader header;
} AnyAlarmsSet;

typedef AnyAlarmsSet GetAnyAlarmsSetMsg;


typedef struct
{
	ToPSyncMsgHeader header;
	Bool	set;
} AnyAlarmsSetResponse;

typedef AnyAlarmsSetResponse GetAnyAlarmsSetResponseMsg;
void ReadGetAnyAlarmsSetMsg(uint8 const **data, GetAnyAlarmsSetMsg *msg);
void WriteGetAnyAlarmsSetResponseMsg(uint8 **data, const GetAnyAlarmsSetResponseMsg *msg);

#ifdef SEMTECH_TARGET
#else
void ReadGetAnyAlarmsSetResponseMsg(uint8 const **data, GetAnyAlarmsSetResponseMsg *msg);
void WriteGetAnyAlarmsSetMsg(uint8 **data, const GetAnyAlarmsSetMsg *msg);
#endif






/*other functions*/
void WriteToPSyncDiscoveryResponseMsg(uint8** data, const ToPSyncDiscoveryResponseMsg* msg);
void WriteGetLockValueResponseMsg(uint8 **data, const GetLockValueResponseMsg *msg);
void WriteGetPhaseErrorResponseMsg(uint8 **data, const GetPhaseErrorResponseMsg *msg);
void WriteGetCurrentMasterIpAddressResponseMsg(uint8 **data, const GetCurrentMasterIpAddressResponseMsg *msg);
void WriteGetNumberOfVisibleMastersResponseMsg(uint8 **data, GetNumberOfVisibleMastersResponseMsg const *msg);
void WriteGetPortStateResponseMsg(uint8 **data, GetPortStateResponseMsg const *msg);
void WriteGetCurrentMasterToSlaveFlightTimeResponseMsg(uint8 **data, GetCurrentMasterToSlaveFlightTimeResponseMsg const *msg);
void WriteGetSlaveToCurrentMasterFlightTimeResponseMsg(uint8 **data, GetSlaveToCurrentMasterFlightTimeResponseMsg const *msg);
void WriteGetClockQualityResponseMsg(uint8 **data, GetClockQualityResponseMsg const *msg);
void WriteGetCurrentMasterToSlaveNoiseResponseMsg(uint8 **data, GetCurrentMasterToSlaveNoiseResponseMsg const *msg);
void WriteGetSlaveToCurrentMasterNoiseResponseMsg(uint8 ** data, GetSlaveToCurrentMasterNoiseResponseMsg const *msg);
void WriteGetCurrentMasterClockIdResponseMsg(uint8 ** data, GetCurrentMasterClockIdResponseMsg const *msg);
void ReadDebugPrintUnacknowledgedMsg(uint8 const **data, DebugPrintUnacknowledgedMsg *msg);
void WriteFloatingPointValueMsg(uint8 **data, const FloatingPointValueMsg *msg);


#ifdef SEMTECH_TARGET
#else
void ReadFloatingPointValueMsg(uint8 const **data, FloatingPointValueMsg *msg);
void WriteToPSyncDiscoveryMsg(uint8** data, const ToPSyncDiscoveryMsg* msg);
void ReadToPSyncDiscoveryResponseMsg(uint8 const ** data, ToPSyncDiscoveryResponseMsg* msg);

void WriteGetCurrentMasterIpAddressMsg(uint8 **data, const GetCurrentMasterIpAddressMsg *msg);
void WriteGetPortStateMsg(uint8 **data, GetPortStateMsg const *msg);
void ReadGetPortStateResponseMsg(uint8 const **data, GetPortStateResponseMsg *msg);
void WriteGetSlaveToCurrentMasterFlightTimeMsg(uint8 **data, GetSlaveToCurrentMasterFlightTimeMsg const *msg);
void ReadGetSlaveToCurrentMasterFlightTimeResponseMsg(uint8 const ** data, GetSlaveToCurrentMasterFlightTimeResponseMsg *msg);
void WriteGetSlaveToCurrentMasterNoiseMsg(uint8 **data, GetSlaveToCurrentMasterNoiseMsg const *msg);
void ReadGetSlaveToCurrentMasterNoiseResponseMsg(uint8 const ** data, GetSlaveToCurrentMasterNoiseResponseMsg *msg);
void WriteGetCurrentMasterClockIdMsg(uint8 **data, GetCurrentMasterClockIdMsg const *msg);
void ReadGetCurrentMasterClockIdResponseMsg(uint8 const ** data, GetCurrentMasterClockIdResponseMsg *msg);


/*simulator only*/
void WriteGetLockValueMsg(uint8 **data, const GetLockValueMsg *msg);
void WriteGetPhaseErrorMsg(uint8 **data, const GetPhaseErrorMsg *msg);
void WriteGetNumberOfVisibleMastersMsg(uint8 **data, GetNumberOfVisibleMastersMsg const *msg);
void WriteGetCurrentMasterToSlaveFlightTimeMsg(uint8 **data, GetCurrentMasterToSlaveFlightTimeMsg const *msg);
void WriteGetClockQualityMsg(uint8 **data, GetClockQualityMsg const *msg);
void WriteGetCurrentMasterToSlaveNoiseMsg(uint8 **data, GetCurrentMasterToSlaveNoiseMsg const *msg);
void ReadGetClockQualityResponseMsg(uint8 const ** data, GetClockQualityResponseMsg *msg);
void ReadGetCurrentMasterIpAddressResponseMsg(uint8 const ** data, GetCurrentMasterIpAddressResponseMsg *msg);
void ReadGetLockValueResponseMsg(uint8 const **data, GetLockValueResponseMsg *msg);
void ReadGetPhaseErrorResponseMsg(uint8 const **data, GetPhaseErrorResponseMsg *msg);
void ReadGetCurrentMasterToSlaveFlightTimeResponseMsg(uint8 const ** data, GetCurrentMasterToSlaveFlightTimeResponseMsg *msg);
void ReadGetCurrentMasterToSlaveNoiseResponseMsg(uint8 const ** data, GetCurrentMasterToSlaveNoiseResponseMsg *msg);
void ReadGetNumberOfVisibleMastersResponseMsg(uint8 const **data, GetNumberOfVisibleMastersResponseMsg *msg);
#endif


//unused functions
#ifdef KEEP_UNUSED_FUNCTION
void ReadGetClockQualityMsg(uint8 const ** data, GetClockQualityMsg *msg);
void ReadGetCurrentMasterClockIdMsg(uint8 const ** data, GetCurrentMasterClockIdMsg *msg);
void ReadGetCurrentMasterIpAddressMsg(uint8 const ** data, GetCurrentMasterIpAddressMsg *msg);
void ReadGetCurrentMasterToSlaveFlightTimeMsg(uint8 const ** data, GetCurrentMasterToSlaveFlightTimeMsg *msg);
void ReadGetCurrentMasterToSlaveNoiseMsg(uint8 const ** data, GetCurrentMasterToSlaveNoiseMsg *msg);
void ReadGetLockValueMsg(uint8 const **data, GetLockValueMsg *msg);
void ReadGetNumberOfVisibleMastersMsg(uint8 const **data, GetNumberOfVisibleMastersMsg *msg);
void ReadGetPhaseErrorMsg(uint8 const **data, GetPhaseErrorMsg *msg);
void ReadGetPortStateMsg(uint8 const **data, GetPortStateMsg *msg);
void ReadGetSlaveToCurrentMasterFlightTimeMsg(uint8 const ** data, GetSlaveToCurrentMasterFlightTimeMsg *msg);
void ReadGetSlaveToCurrentMasterNoiseMsg(uint8 const ** data, GetSlaveToCurrentMasterNoiseMsg *msg);
void ReadToPSyncDiscoveryMsg(uint8 const ** data, ToPSyncDiscoveryMsg* msg);
#endif


#ifdef TOPSYNC_LOGGER
void WriteDebugPrintUnacknowledgedMsg(uint8 **data, const DebugPrintUnacknowledgedMsg *msg);
#endif


/* SETS messages - caution these messages are not for general use.and you should only use them if instructed specifically
 * to do so!
 */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 address;
	uint8 value;
}GenericSETSMsg;

typedef GenericSETSMsg SETSReadMsg;
typedef GenericSETSMsg SETSReadResponseMsg;
typedef GenericSETSMsg SETSWriteMsg;
typedef GenericSETSMsg SETSWriteResponseMsg;

void ReadGenericSETSMsg(uint8 const ** data, GenericSETSMsg* msg);
void WriteGenericSETSMsg(uint8** data, const GenericSETSMsg* msg);

#define ReadSETSReadMsg 			ReadGenericSETSMsg
#define ReadSETSReadResponseMsg 	ReadGenericSETSMsg
#define WriteSETSReadMsg			WriteGenericSETSMsg
#define WriteSETSReadResponseMsg	WriteGenericSETSMsg
#define ReadSETSWriteMsg			ReadGenericSETSMsg
#define ReadSETSWriteResponseMsg	ReadGenericSETSMsg
#define WriteSETSWriteMsg			WriteGenericSETSMsg
#define WriteSETSWriteResponseMsg	WriteGenericSETSMsg

typedef struct
{
	ToPSyncMsgHeader header;
	Bool enabled;
} SETSAutomaticConfigurationEnabledMsg;

typedef struct
{
	ToPSyncMsgHeader header;
} GetSETSAutomaticConfigurationEnabledMsg;


typedef SETSAutomaticConfigurationEnabledMsg	SetSETSAutomaticConfigurationEnabledMsg;
typedef SETSAutomaticConfigurationEnabledMsg	SetSETSAutomaticConfigurationEnabledResponseMsg;
typedef SETSAutomaticConfigurationEnabledMsg	GetSETSAutomaticConfigurationEnabledResponseMsg;

void WriteGenericSETSAutomaticConfigurationEnabledMsg(uint8 **data, const SETSAutomaticConfigurationEnabledMsg *msg);
void ReadGenericSETSAutomaticConfigurationEnabledMsg(uint8 const **data, SETSAutomaticConfigurationEnabledMsg *msg);

void ReadGetSETSAutomaticConfigurationEnabledMsg(uint8 const **data, GetSETSAutomaticConfigurationEnabledMsg *msg);
void WriteGetSETSAutomaticConfigurationEnabledMsg(uint8 **data, const GetSETSAutomaticConfigurationEnabledMsg *msg);

/* Read/Write Get */
#define ReadSetSETSAutomaticConfigurationEnabledMsg ReadGenericSETSAutomaticConfigurationEnabledMsg
#define WriteSetSETSAutomaticConfigurationEnabledMsg WriteGenericSETSAutomaticConfigurationEnabledMsg
#define ReadSetSETSAutomaticConfigurationEnabledResponseMsg ReadGenericSETSAutomaticConfigurationEnabledMsg
#define WriteSetSETSAutomaticConfigurationEnabledResponseMsg WriteGenericSETSAutomaticConfigurationEnabledMsg
#define ReadGetSETSAutomaticConfigurationEnabledResponseMsg ReadGenericSETSAutomaticConfigurationEnabledMsg
#define WriteGetSETSAutomaticConfigurationEnabledResponseMsg WriteGenericSETSAutomaticConfigurationEnabledMsg




/*Mux set/get  */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 muxId;
	uint8 line;
	uint8 value;
} SetMUXInput;


typedef struct
{
	ToPSyncMsgHeader header;
	uint8 muxId;
	uint8 line;
} GetMUXInput;


typedef SetMUXInput SetMUXInputMsg;
typedef GetMUXInput GetMUXInputMsg;
typedef SetMUXInput GetMUXInputResponseMsg;
typedef SetMUXInput SetMUXInputResponseMsg;

void ReadSetMUXInputMsg(uint8 const ** data, SetMUXInput* msg);
void WriteSetMUXInputMsg(uint8** data, const SetMUXInput* msg);

void ReadGetMUXInputMsg(uint8 const ** data, GetMUXInput* msg);
#define WriteSetMUXInputResponseMsg WriteSetMUXInputMsg
#define WriteGetMUXInputResponseMsg WriteSetMUXInputMsg

#ifdef SEMTECH_TARGET
#else
void WriteGetMUXInputMsg(uint8** data, const GetMUXInput* msg);
#define ReadGetMUXInputResponseMsg ReadSetMUXInputMsg
#define ReadSetMUXInputResponseMsg ReadSetMUXInputMsg
#endif







/*Physical Port*/
/* structure to configure slaves*/
typedef struct
{
	ToPSyncMsgHeader	header;
	MasterLoadLimit 	limitType; /*eg maxTotalAnnounceRate eg */
	sint32				value;
}SetMasterLoadLimit;


typedef SetMasterLoadLimit SetMasterLoadLimitMsg;
typedef SetMasterLoadLimit SetMasterLoadLimitResponseMsg;


void ReadSetMasterLoadLimitMsg(uint8 const ** data, SetMasterLoadLimit* msg);
void WriteSetMasterLoadLimitMsg(uint8** data, const SetMasterLoadLimit* msg);


typedef struct
{
	ToPSyncMsgHeader header;
	MasterLoadLimit 	limitType; /*eg maxTotalAnnounceRate eg */
} GetMasterLoadLimit;

typedef GetMasterLoadLimit	GetMasterLoadLimitMsg;
typedef SetMasterLoadLimit	GetMasterLoadLimitResponseMsg;

#define WriteSetMasterLoadLimitResponseMsg	WriteSetMasterLoadLimitMsg
void ReadGetMasterLoadLimitMsg(uint8 const ** data, GetMasterLoadLimit* msg);
#define WriteGetMasterLoadLimitResponseMsg WriteSetMasterLoadLimitMsg


#ifdef SEMTECH_TARGET
#else
void WriteGetMasterLoadLimitMsg(uint8** data, const GetMasterLoadLimit* msg);
#define ReadSetMasterLoadLimitResponseMsg	ReadSetMasterLoadLimitMsg
#define ReadGetMasterLoadLimitResponseMsg ReadSetMasterLoadLimitMsg
#endif




//pps input time
typedef struct
{
	ToPSyncMsgHeader	header;
	uint8				onePPSInput;
	ToPSyncTime			timeInput;
	ToPSyncTimescale	timeScale;
}PPSInputTime;

typedef PPSInputTime	SetPPSInputTimeMsg;
typedef PPSInputTime	SetPPSInputTimeResponseMsg;


void ReadSetPPSInputTimeMsg(uint8 const ** data, PPSInputTime* msg);
void WriteSetPPSInputTimeMsg(uint8** data, const PPSInputTime* msg);

#define WriteSetPPSInputTimeResponseMsg WriteSetPPSInputTimeMsg

#ifdef SEMTECH_TARGET
#else
#define ReadSetPPSInputTimeResponseMsg	ReadSetPPSInputTimeMsg

#endif



//pps input time of day
typedef struct
{
	ToPSyncMsgHeader	header;
	uint8				onePPSInput;
	ToPSyncTimeOfDay	timeInput;
	ToPSyncTimescale	timeScale;
}PPSInputTimeOfDay;

typedef PPSInputTimeOfDay	SetPPSInputTimeOfDayMsg;
typedef PPSInputTimeOfDay	SetPPSInputTimeOfDayResponseMsg;


void ReadSetPPSInputTimeOfDayMsg(uint8 const ** data, PPSInputTimeOfDay* msg);
void WriteSetPPSInputTimeOfDayMsg(uint8** data, const PPSInputTimeOfDay* msg);

#define WriteSetPPSInputTimeOfDayResponseMsg WriteSetPPSInputTimeOfDayMsg

#ifdef SEMTECH_TARGET
#else
#define ReadSetPPSInputTimeOfDayResponseMsg	ReadSetPPSInputTimeOfDayMsg

#endif





//get issued grant details
//ToPSyncConfigResult ToPSyncGetIssuedGrantDetails(const ToPSyncAddress* const toPSyncAddress, uint8 ptpPortNumber, MessageType messageType, uint16 index, GrantStatus* grant)
typedef struct
{
	ToPSyncMsgHeader	header;
	uint8				ptpPortNumber;
	MessageType			messagetype;
	uint16				index;
}GetIssuedGrantDetails;

typedef GetIssuedGrantDetails	GetIssuedGrantDetailsMsg;

void ReadGetIssuedGrantDetailsMsg(uint8 const ** data, GetIssuedGrantDetails* msg);


#ifdef SEMTECH_TARGET
#else
void WriteGetIssuedGrantDetailsMsg(uint8** data, const GetIssuedGrantDetails* msg);
#endif


typedef struct
{
	ToPSyncMsgHeader	header;
	uint8				ptpPortNumber;
	MessageType			messagetype;
	uint16				index;
	GrantStatus			grantStatus;
}GetIssuedGrantDetailsResponse;

typedef GetIssuedGrantDetailsResponse	GetIssuedGrantDetailsResponseMsg;
void WriteGetIssuedGrantDetailsResponseMsg(uint8** data, const GetIssuedGrantDetailsResponse* msg);


#ifdef SEMTECH_TARGET
#else
void ReadGetIssuedGrantDetailsResponseMsg(uint8 const ** data, GetIssuedGrantDetailsResponse* msg);
#endif






/*I2C functions*/
/*write to I2C functions*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8			addr;
	Bool			isReg;
	uint16			reg;
	uint8			dataLen;
	uint8			data[I2C_MAX_DATA_LENGTH];
} I2CData;

typedef I2CData	I2CWriteMsg;
typedef I2CData	I2CWriteResponseMsg;

void ReadI2CWriteMsg(uint8 const ** data, I2CData* msg);
void WriteI2CWriteResponseMsg(uint8** data, const I2CData* msg);


#ifdef SEMTECH_TARGET
#else
#define WriteI2CWriteMsg WriteI2CWriteResponseMsg
#define ReadI2CWriteResponseMsg ReadI2CWriteMsg
#endif


/*read from i2c functions*/
typedef struct
{
	ToPSyncMsgHeader header;
	uint8			addr;
	Bool			isReg;
	uint16			reg;
	uint8			dataLen;
} I2CRead;

typedef I2CRead	I2CReadMsg;
typedef I2CData I2CReadResponseMsg;

void ReadI2CReadMsg(uint8 const ** data, I2CRead* msg);
#define WriteI2CReadResponseMsg WriteI2CWriteResponseMsg

#ifdef SEMTECH_TARGET
#else
void WriteI2CReadMsg(uint8** data, const I2CRead* msg);
#define ReadI2CReadResponseMsg ReadI2CWriteMsg
#endif



/* API message typedefs for delay replacement for modes 2 & 3 */
/** 
 * This enumeration provides descriptive names for the major-mode parameter. 
 * Please refer to the section \ref TS_Mode_2_Setup_Params 
 * \ingroup DelayReplacement
 */
typedef enum TsMajorModeEnum {
	tsDeliveryModeNormal,        /**< Timestamp will be delivered normally in PTP messages */
	tsDeliveryModeDRM,           /**< Timestamp will be delivered using a DRM as defined in UG-TS2 01 */
	tsDeliveryModeTLV,           /**< Timestamp will be delivered using a TLV as defined in UG-TS2 01. For example, a T2 timestamp can be attached via a TLV to a Sync event message */
	tsDeliveryModeEmbedded,      /**< Timestamp will be delivered using an embedded timestamp in the reserved bytes of the PTP message */
	tsDeliveryModeLocalFollowup, /**< Timestamp will be delivered using a local follow up message */
	tsDeliveryModeCFAdjust,      /**< Timestamp will be delivered by adjusting the correction field as defined in UG-TS2 01 */
	tsDeliveryModeReflectDReq    /**< Timestamp will be delivered using a reflected delay request as defined in UG-TS2 */
} TsMajorMode;


/** 
 * This enumeration provides descriptive names for the minor-mode parameter. 
 * Please refer to the section \ref TS_Mode_2_Setup_Params 
 * \ingroup DelayReplacement
 */
typedef enum TsMinorModeEnum {
	tsDeliveryViaEthernet      = 1, /**< Timestamp DRM is expected only over Ethernet */
	tsDeliveryViaSPI           = 2, /**< Timestamp DRM is expected only over the SPI interface */
	tsDeliveryViaEthernetOrSpi = 3, /**< Timestamp DRM is expected over either Ethernet or the SPI interface */
	tsDeliveryViaShortTLV      = 1, /**< Timestamp is expected in a Semtech TLV that contains nanoseconds-only timestamp  */
	tsDeliveryViaLongTLV       = 2, /**< Timestamp is expected in a Semtech TLV that contains a full seconds and nanoseconds timestamp */
	tsDeliveryViaEmbeddedBE    = 1, /**< The timestamp is expected embedded in big endian format */
	tsDeliveryViaEmbeddedLE    = 2  /**< The timestamp is expected embedded in little endian format */
} TsMinorMode;


/** 
 * This enumeration provides descriptive names for the format of the timestamp expected. A full timestamp includes
 * the full 48-bit seconds count and 32-bit nanoseconds as defined in IEEE1588. The short timestamp includes only
 * the nanoseconds portion of the timestamp. The seconds portion, in this case, shall be set to 0xFF_FFFF_FFFF.
 * Please refer to the section \ref TS_Mode_2_Setup_Params 
 * \ingroup DelayReplacement
 */
typedef enum TsTimestampFormatEnum {
	tsDeliveryAsNanosecondsOnly, /**< The expected timestamp will only contain a nanoseconds timestamp */
	tsDeliveryAsFullTime,	     /**< The expected timestamp will contain a 48-bit seconds and 32-bit nanoseconds timestamp */
	tsDeliveryAs32bitNanoseconds /**< The expected timestamp will contain a nanosecond timestamp with full 32bit value range */
} TsTimestampFormat;	


/**
 * This structure is used in the ToPSyncSetMode2Configuration() and ToPSyncGetMode2Configuration()
 * APIs to specify the ways in which the master will expect to receive timestamp information.
 * Please refer to the section  \ref TS_Mode_2_Setup_Params
 * \ingroup DelayReplacement
 */
typedef struct Mode2MasterSetupParametersStruct
{
	/** If t1IsTimestamped is false, this specifies the bit pattern with which the SYNC messages  
	 *  origin time stamp is filled. */
	ToPSyncTime        t1Value;

	/** True if SYNC event messages are to be timestamped with egress time. False if SYNC event 
	 *  message origin timestamp is to be filled with a predefined pattern specified in t1Value */
	Bool               t1IsTimestamped; 

	/** True if the timestamping device is not able to modify packets on-the-fly. In this case
	 *  the T1 timestamp is given back to ToPSync, which then sends a follow up message containing
	 *  this timestamp */
	Bool               t1Is2Step;

	/** Specifies the major delivery type. I.e., how T1 timestamps are delivered to the master.
	 *  \note This is only used when the master is operating in two-step mode .
	 *  \note Only DRM options are valid.
	 * \see TsMajorMode */
	TsMajorMode        t1MajorMode;

	/** Specifies the minor delivery type that specifies which sub-mode will be used. See TsMinorMode.
	 *  This is only used when the master is operating in two-step mode.
	 *  \see TsMinorMode */
	TsMinorMode        t1MinorMode;

	/** Specifies the expected timestamp format as being either a full seconds and nanoseconds
	 *  timestamp or a nanoseconds-only timestamp */
	TsTimestampFormat  t1TimestampFormat;

	/** Specifies the major delivery type. I.e., how T4 timestamps are delivered to the master.
	 * \see TsMajorMode */
	TsMajorMode        t4MajorMode;

	/** Specifies the minor delivery type that specifies which sub-mode will be used. See TsMinorMode
	 *  \see TsMinorMode */
	TsMinorMode        t4MinorMode;
	
    /** Specifies the expected timestamp format as being either a full seconds and nanoseconds
	 *  timestamp or a nanoseconds-only timestamp.
	 * \note Reflected delay request cannot be used */
	TsTimestampFormat  t4TimestampFormat;
	
	uint32 t4EmbeddedOffsetNanos;
	uint32 t4EmbeddedOffsetSecsHi;
	uint32 t4EmbeddedOffsetSecsLo;

} Mode2MasterSetupParameters;


/**
 * This structure is used in the ToPSyncSetMode2Configuration and ToPSyncGetMode2Configuration
 * APIs to specify the ways in which the slave will expect to receive timestamp information.
 *
 *  Please refer to the section \ref TS_Mode_2_Setup_Params
 * \ingroup DelayReplacement
 */
typedef struct Mode2SlaveSetupParametersStruct
{
	/** Specifies the major delivery type. I.e., how T4 timestamps are delivered to the master.
	 *  \note Reflected delay request cannot be used.
	 * \see TsMajorMode */
	TsMajorMode        t2MajorMode;

	/** Specifies the minor delivery type that specifies which sub-mode will be used. See TsMinorMode
	 *  \see TsMinorMode */
	TsMinorMode        t2MinorMode;

	/** Specifies the expected timestamp format as being either a full seconds and nanoseconds
	 *  timestamp or a nanoseconds-only timestamp */
	TsTimestampFormat  t2TimestampFormat;

	uint32 t2EmbeddedOffsetNanos;
	uint32 t2EmbeddedOffsetSecsHi;
	uint32 t2EmbeddedOffsetSecsLo;

	/** If t3IsTimestamped is false, this specifies the bit pattern with which the DREQ messages
	 *  origin time stamp is filled. */
	ToPSyncTime        t3Value;

	/** True if DREQ event messages are to be timestamped with egress time. False if DREQ event
	 *  message origin timestamp is to be filled with a predefined pattern specified in t3Value */
	Bool               t3IsTimestamped;

	/** Specifies the major delivery type. I.e., how T4 timestamps are delivered to the master.
	 * \see TsMajorMode */
	TsMajorMode        t3MajorMode;

	/** Specifies the minor delivery type that specifies which sub-mode will be used. See TsMinorMode
	 *  \see TsMinorMode */
	TsMinorMode        t3MinorMode;

	/** Specifies the expected timestamp format as being either a full seconds and nanoseconds
	 *  timestamp or a nanoseconds-only timestamp */
	TsTimestampFormat  t3TimestampFormat;

	uint32 t3EmbeddedOffsetNanos;
	uint32 t3EmbeddedOffsetSecsHi;
	uint32 t3EmbeddedOffsetSecsLo;


} Mode2SlaveSetupParameters;

/* ToPSync mode 3 configuration API message types and helper-function prototypes */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	uint8 deliverMode;
	uint8 tsFormat;
} SetMode3ConfigurationMsg;	

typedef ToPSyncMsgHeader SetMode3ConfigurationResponseMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
} GetMode3ConfigurationMsg;	

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 deliverMode;
	uint8 tsFormat;
} GetMode3ConfigurationResponseMsg;	


/* ToPSync mode 2 configuration API message types and helper-function prototypes */
typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
	Mode2MasterSetupParameters masterParams;
	Mode2SlaveSetupParameters  slaveParams;
} SetMode2ConfigurationMsg;

typedef ToPSyncMsgHeader SetMode2ConfigurationResponseMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint8 ptpPortNumber;
} GetMode2ConfigurationMsg;

typedef struct
{
	ToPSyncMsgHeader header;	
	Mode2MasterSetupParameters masterParams;
	Mode2SlaveSetupParameters  slaveParams;
} GetMode2ConfigurationResponseMsg;

#if defined(SEMTECH_TARGET) || defined(_SIMULATOR)
	/* Used by ToPSync application */
	void ReadSetMode3ConfigurationMsg(uint8 const **data, SetMode3ConfigurationMsg *msg);
	void WriteSetMode3ConfigurationResponseMsg(uint8 **data, SetMode3ConfigurationResponseMsg* msg);
	void ReadGetMode3ConfigurationMsg(uint8 const **data, GetMode3ConfigurationMsg* msg);
	void WriteGetMode3ConfigurationResponseMsg(uint8 **data, GetMode3ConfigurationResponseMsg* msg);
	void ReadSetMode2ConfigurationMsg(uint8 const **data, SetMode2ConfigurationMsg *msg);
	void WriteSetMode2ConfigurationResponseMsg(uint8 **data, SetMode2ConfigurationResponseMsg *msg);
	void ReadGetMode2ConfigurationMsg(uint8 const **data, GetMode2ConfigurationMsg* msg);
	void WriteGetMode2ConfigurationResponseMsg(uint8 **data, GetMode2ConfigurationResponseMsg const *const msg);

#else
	/* Used by the Host processor application */
	void WriteSetMode3ConfigurationMsg(uint8 **data, SetMode3ConfigurationMsg *msg);
	#define ReadSetMode3ConfigurationResponseMsg(data, header) ReadToPSyncMessageHeader((data), (ToPSyncMsgHeader*)(header))
	void WriteGetMode3ConfigurationMsg(uint8 **data, GetMode3ConfigurationMsg* msg);
	void ReadGetMode3ConfigurationResponseMsg(uint8 const **data, GetMode3ConfigurationResponseMsg* msg);
	void WriteSetMode2ConfigurationMsg(uint8 **data, SetMode2ConfigurationMsg const *const msg);
	#define ReadSetMode2ConfigurationResponseMsg(data, header) ReadToPSyncMessageHeader((data), (ToPSyncMsgHeader *)(header))	
	void WriteGetMode2ConfigurationMsg(uint8 **data, GetMode2ConfigurationMsg const* msg);
	void ReadGetMode2ConfigurationResponseMsg(uint8 const **data, GetMode2ConfigurationResponseMsg *const msg);
#endif


/* DRM statistics API message types and helper-function prototypes */
typedef ToPSyncMsgHeader GetDrmStatisticsMsg;
typedef struct  
{
	ToPSyncMsgHeader header;
	DRMStatistics    stats;
} GetDrmStatisticsResponseMsg;

#if defined(SEMTECH_TARGET) || defined(_SIMULATOR)
    void ReadGetDrmStatisticsMsg(uint8 const **data, GetDrmStatisticsMsg *const msg);
    void WriteGetDrmStatisticsResponseMsg(uint8 **data, GetDrmStatisticsResponseMsg const *const msg);
#else
	void ReadGetDrmStatisticsResponseMsg(uint8 const **data, GetDrmStatisticsResponseMsg *const msg);
	void WriteGetDrmStatisticsMsg(uint8 **data, GetDrmStatisticsMsg const *const msg);
#endif


/******************************************************************************
 * New functions for memory mapped API (This is work in progress)
 * Functionality subject to change
 ******************************************************************************/
#define MMAPI_MAX_DATA_LENGTH 44  //max msg size is 200, 200 - hdr(15) - address(4) - length(4) = 177 bytes is =  44 words + 1 byte, SET_MMAPI_MESSAGE_LENGTH = 15+8

typedef struct
{
	ToPSyncMsgHeader header;
	uint32  address;
	uint32	length;
}MMAPIMsg;

typedef struct
{
	ToPSyncMsgHeader header;
	uint32  address;
	uint32	length;
	uint32 data[MMAPI_MAX_DATA_LENGTH];
}MMAPIDataMsg;


typedef MMAPIMsg GetMMAPIMsg;
typedef MMAPIDataMsg GetMMAPIRespMsg;
typedef MMAPIDataMsg SetMMAPIMsg;
typedef MMAPIDataMsg SetMMAPIRespMsg;

void ReadMMAPIMsg(uint8 const **data, MMAPIMsg *msg);
void WriteMMAPIMsg(uint8 **data, const MMAPIMsg *msg);
void ReadMMAPIDataMsg(uint8 const **data, MMAPIDataMsg *msg);
void WriteMMAPIDataMsg(uint8 **data, const MMAPIDataMsg *msg);

#define ReadGetMMAPIMsg ReadMMAPIMsg
#define WriteGetMMAPIMsg WriteMMAPIMsg
#define ReadGetMMAPIRespMsg ReadMMAPIDataMsg
#define WriteGetMMAPIRespMsg WriteMMAPIDataMsg

#define ReadSetMMAPIMsg ReadMMAPIDataMsg
#define ReadSetMMAPIRespMsg ReadMMAPIDataMsg
#define WriteSetMMAPIMsg WriteMMAPIDataMsg
#define WriteSetMMAPIRespMsg WriteMMAPIDataMsg


/*************EVENT MESSAGING SYSTEM**********************/

#define EVENT_MESSAGING_SYSTEM_ALARM_TYPE 0
#define EVENT_MESSAGING_SYSTEM_RESTART_TYPE 1


//ALARM MSGS
#define EVENT_MESSAGING_ALARM_BEGIN_REQUEST_MSG 1
#define EVENT_MESSAGING_ALARM_OUTPUT_ACTIVE_MSG 2
#define EVENT_MESSAGING_ALARM_OUTPUT_ACTIVE_ACK_MSG 3
#define EVENT_MESSAGING_ALARM_OUTPUT_INACTIVE_MSG 4
#define EVENT_MESSAGING_ALARM_OUTPUT_INACTIVE_ACK_MSG 5
#define EVENT_MESSAGING_ALARM_END_REQUEST_MSG 6

#define EVENT_MESSAGING_ALARM_BEGIN_REQUEST_MSG_LEN 7
#define EVENT_MESSAGING_ALARM_END_REQUEST_MSG_LEN 2
#define EVENT_MESSAGING_ALARM_ACTIVE_MSG_LEN 10
#define EVENT_MESSAGING_ALARM_ACTIVE_ACK_MSG_LEN 2
#define EVENT_MESSAGING_ALARM_INACTIVE_MSG_LEN 2
#define EVENT_MESSAGING_ALARM_INACTIVE_ACK_MSG_LEN 2

//RESTART MESSAGES
#define EVENT_MESSAGING_RESTART_REQUEST_MSG 0
#define EVENT_MESSAGING_RESTART_REQUEST_ACK_MSG 1

#define EVENT_MESSAGING_RESTART_REQUEST_MSG_LEN 2
#define EVENT_MESSAGING_RESTART_REQUEST_ACK_MSG_LEN 2



//EVENT_MESSAGING_BEGIN_REQUEST_MSG,
typedef struct
{
	uint8 eventType;
	uint8 msgId;
	uint32 duration;
	uint8  period;
} EventMessagingAlarmBeginRequestMsg;

void ReadEventMessagingAlarmBeginRequestMsg(uint8 const **data, EventMessagingAlarmBeginRequestMsg *msg);
void WriteEventMessagingAlarmBeginRequestMsg(uint8 **data, const EventMessagingAlarmBeginRequestMsg *msg);

//EVENT_MESSAGING_OUTPUT_ACTIVE_MSG,
typedef struct
{
	uint8 eventType;
	uint8 msgId;
	uint32 alarmBitField[ALARM_SOURCE_WORDS];
} EventMessagingAlarmActiveMsg;
void ReadEventMessagingAlarmActiveMsg(uint8 const **data, EventMessagingAlarmActiveMsg *msg);
void WriteEventMessagingAlarmActiveMsg(uint8 **data, const EventMessagingAlarmActiveMsg *msg);


typedef struct
{
	uint8 eventType;
	uint8 msgId;
} EventMessagingGeneralMsg;

typedef EventMessagingGeneralMsg EventMessagingInactiveMsg;

void ReadEventMessagingGeneralMsg(uint8 const **data, EventMessagingGeneralMsg *msg);
void WriteEventMessagingGeneralMsg(uint8 **data, const EventMessagingGeneralMsg *msg);



#ifdef __cplusplus
}
#endif

#endif
